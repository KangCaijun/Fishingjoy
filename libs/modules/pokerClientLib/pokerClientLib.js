/*!
 * PokerClientLib - JS for Debug
 * @licence PokerClientLib - v0.0.0 (2018-08-01)
 * qq:1042933914 | Licence: gepan
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 红包.xlsx SHEET: 红包
     */
    var RedEnvelopeConfig = (function () {
        function RedEnvelopeConfig() {
        }
        RedEnvelopeConfig.prototype.GetType = function () { return 'table.RedEnvelopeConfig'; };
        return RedEnvelopeConfig;
    }());
    table.RedEnvelopeConfig = RedEnvelopeConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 红包局数控制表.xlsx SHEET: Sheet1 KEY: gameId
     */
    var RedEnvelopeControlconfig = (function () {
        function RedEnvelopeControlconfig() {
        }
        RedEnvelopeControlconfig.prototype.GetType = function () { return 'table.RedEnvelopeControlconfig'; };
        return RedEnvelopeControlconfig;
    }());
    table.RedEnvelopeControlconfig = RedEnvelopeControlconfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 红包开奖份额表.xlsx SHEET: 红包
     */
    var RedEnvelopeNumberConfig = (function () {
        function RedEnvelopeNumberConfig() {
        }
        RedEnvelopeNumberConfig.prototype.GetType = function () { return 'table.RedEnvelopeNumberConfig'; };
        return RedEnvelopeNumberConfig;
    }());
    table.RedEnvelopeNumberConfig = RedEnvelopeNumberConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 关键资源表.xlsx SHEET: 关键资源表
     */
    var TableCoreResources = (function () {
        function TableCoreResources() {
        }
        TableCoreResources.prototype.GetType = function () { return 'table.TableCoreResources'; };
        return TableCoreResources;
    }());
    table.TableCoreResources = TableCoreResources;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 创建房间选项.xlsx SHEET: 单个麻将设置 KEY: gameId
     */
    var TableCreateConfigList = (function () {
        function TableCreateConfigList() {
        }
        TableCreateConfigList.prototype.GetType = function () { return 'table.TableCreateConfigList'; };
        return TableCreateConfigList;
    }());
    table.TableCreateConfigList = TableCreateConfigList;
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var UserNbrItem = (function () {
            function UserNbrItem() {
            }
            return UserNbrItem;
        }());
        TableCreateConfigList.UserNbrItem = UserNbrItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var EnterLimitItem = (function () {
            function EnterLimitItem() {
            }
            return EnterLimitItem;
        }());
        TableCreateConfigList.EnterLimitItem = EnterLimitItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var CreateLimitItem = (function () {
            function CreateLimitItem() {
            }
            return CreateLimitItem;
        }());
        TableCreateConfigList.CreateLimitItem = CreateLimitItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var PlayTypeItem = (function () {
            function PlayTypeItem() {
            }
            return PlayTypeItem;
        }());
        TableCreateConfigList.PlayTypeItem = PlayTypeItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var GameNbrItem = (function () {
            function GameNbrItem() {
            }
            return GameNbrItem;
        }());
        TableCreateConfigList.GameNbrItem = GameNbrItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var PayTypeItem = (function () {
            function PayTypeItem() {
            }
            return PayTypeItem;
        }());
        TableCreateConfigList.PayTypeItem = PayTypeItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var HostTipItem = (function () {
            function HostTipItem() {
            }
            return HostTipItem;
        }());
        TableCreateConfigList.HostTipItem = HostTipItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
    var TableCreateConfigList;
    (function (TableCreateConfigList) {
        var OutTimeItem = (function () {
            function OutTimeItem() {
            }
            return OutTimeItem;
        }());
        TableCreateConfigList.OutTimeItem = OutTimeItem;
    })(TableCreateConfigList = table.TableCreateConfigList || (table.TableCreateConfigList = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 比赛场配置表.xlsx SHEET: Sheet1 KEY: id
     */
    var TableEventConfig = (function () {
        function TableEventConfig() {
        }
        TableEventConfig.prototype.GetType = function () { return 'table.TableEventConfig'; };
        return TableEventConfig;
    }());
    table.TableEventConfig = TableEventConfig;
    var TableEventConfig;
    (function (TableEventConfig) {
        var RewardItem = (function () {
            function RewardItem() {
            }
            return RewardItem;
        }());
        TableEventConfig.RewardItem = RewardItem;
    })(TableEventConfig = table.TableEventConfig || (table.TableEventConfig = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 道具.xlsx SHEET: 兑换
     */
    var TableExchangeConfig = (function () {
        function TableExchangeConfig() {
        }
        TableExchangeConfig.prototype.GetType = function () { return 'table.TableExchangeConfig'; };
        return TableExchangeConfig;
    }());
    table.TableExchangeConfig = TableExchangeConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 游戏控制表.xlsx SHEET: Sheet1 KEY: gameId
     */
    var TableGameControl = (function () {
        function TableGameControl() {
        }
        TableGameControl.prototype.GetType = function () { return 'table.TableGameControl'; };
        return TableGameControl;
    }());
    table.TableGameControl = TableGameControl;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 道具与商城.xlsx SHEET: 道具
     */
    var TableGoodsConfig = (function () {
        function TableGoodsConfig() {
        }
        TableGoodsConfig.prototype.GetType = function () { return 'table.TableGoodsConfig'; };
        return TableGoodsConfig;
    }());
    table.TableGoodsConfig = TableGoodsConfig;
    var TableGoodsConfig;
    (function (TableGoodsConfig) {
        var GiftGoodsItem = (function () {
            function GiftGoodsItem() {
            }
            return GiftGoodsItem;
        }());
        TableGoodsConfig.GiftGoodsItem = GiftGoodsItem;
    })(TableGoodsConfig = table.TableGoodsConfig || (table.TableGoodsConfig = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 语言.xlsx SHEET: Sheet1
     */
    var TableLanguage = (function () {
        function TableLanguage() {
        }
        TableLanguage.prototype.GetType = function () { return 'table.TableLanguage'; };
        return TableLanguage;
    }());
    table.TableLanguage = TableLanguage;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 创建房间选项.xlsx SHEET: 麻将大厅设置 KEY: id
     */
    var TableLobbyGameList = (function () {
        function TableLobbyGameList() {
        }
        TableLobbyGameList.prototype.GetType = function () { return 'table.TableLobbyGameList'; };
        return TableLobbyGameList;
    }());
    table.TableLobbyGameList = TableLobbyGameList;
    var TableLobbyGameList;
    (function (TableLobbyGameList) {
        var ExerciseListItem = (function () {
            function ExerciseListItem() {
            }
            return ExerciseListItem;
        }());
        TableLobbyGameList.ExerciseListItem = ExerciseListItem;
    })(TableLobbyGameList = table.TableLobbyGameList || (table.TableLobbyGameList = {}));
    var TableLobbyGameList;
    (function (TableLobbyGameList) {
        var ExerciseListItem;
        (function (ExerciseListItem) {
            var GameListItem = (function () {
                function GameListItem() {
                }
                return GameListItem;
            }());
            ExerciseListItem.GameListItem = GameListItem;
        })(ExerciseListItem = TableLobbyGameList.ExerciseListItem || (TableLobbyGameList.ExerciseListItem = {}));
    })(TableLobbyGameList = table.TableLobbyGameList || (table.TableLobbyGameList = {}));
    var TableLobbyGameList;
    (function (TableLobbyGameList) {
        var ExerciseLabelListItem = (function () {
            function ExerciseLabelListItem() {
            }
            return ExerciseLabelListItem;
        }());
        TableLobbyGameList.ExerciseLabelListItem = ExerciseLabelListItem;
    })(TableLobbyGameList = table.TableLobbyGameList || (table.TableLobbyGameList = {}));
    var TableLobbyGameList;
    (function (TableLobbyGameList) {
        var ExerciseLabelListItem;
        (function (ExerciseLabelListItem) {
            var GameListItem = (function () {
                function GameListItem() {
                }
                return GameListItem;
            }());
            ExerciseLabelListItem.GameListItem = GameListItem;
        })(ExerciseLabelListItem = TableLobbyGameList.ExerciseLabelListItem || (TableLobbyGameList.ExerciseLabelListItem = {}));
    })(TableLobbyGameList = table.TableLobbyGameList || (table.TableLobbyGameList = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 会员.xlsx SHEET: 会员 KEY: vipLevel
     */
    var TableMahjongVipConfig = (function () {
        function TableMahjongVipConfig() {
        }
        TableMahjongVipConfig.prototype.GetType = function () { return 'table.TableMahjongVipConfig'; };
        return TableMahjongVipConfig;
    }());
    table.TableMahjongVipConfig = TableMahjongVipConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 积分赛配置表.xlsx SHEET: Sheet1 KEY: id
     */
    var TableOfficalEventConfig = (function () {
        function TableOfficalEventConfig() {
        }
        TableOfficalEventConfig.prototype.GetType = function () { return 'table.TableOfficalEventConfig'; };
        return TableOfficalEventConfig;
    }());
    table.TableOfficalEventConfig = TableOfficalEventConfig;
    var TableOfficalEventConfig;
    (function (TableOfficalEventConfig) {
        var RewardItem = (function () {
            function RewardItem() {
            }
            return RewardItem;
        }());
        TableOfficalEventConfig.RewardItem = RewardItem;
    })(TableOfficalEventConfig = table.TableOfficalEventConfig || (table.TableOfficalEventConfig = {}));
    var TableOfficalEventConfig;
    (function (TableOfficalEventConfig) {
        var WeekRewardItem = (function () {
            function WeekRewardItem() {
            }
            return WeekRewardItem;
        }());
        TableOfficalEventConfig.WeekRewardItem = WeekRewardItem;
    })(TableOfficalEventConfig = table.TableOfficalEventConfig || (table.TableOfficalEventConfig = {}));
    var TableOfficalEventConfig;
    (function (TableOfficalEventConfig) {
        var MonthRewardItem = (function () {
            function MonthRewardItem() {
            }
            return MonthRewardItem;
        }());
        TableOfficalEventConfig.MonthRewardItem = MonthRewardItem;
    })(TableOfficalEventConfig = table.TableOfficalEventConfig || (table.TableOfficalEventConfig = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 比赛奖励表.xlsx SHEET: Sheet1 KEY: id
     */
    var TableRewardItemConfig = (function () {
        function TableRewardItemConfig() {
        }
        TableRewardItemConfig.prototype.GetType = function () { return 'table.TableRewardItemConfig'; };
        return TableRewardItemConfig;
    }());
    table.TableRewardItemConfig = TableRewardItemConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 房费.xlsx SHEET: 房费
     */
    var TableRoomCostConfig = (function () {
        function TableRoomCostConfig() {
        }
        TableRoomCostConfig.prototype.GetType = function () { return 'table.TableRoomCostConfig'; };
        return TableRoomCostConfig;
    }());
    table.TableRoomCostConfig = TableRoomCostConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 道具.xlsx SHEET: 商城
     */
    var TableShopConfig = (function () {
        function TableShopConfig() {
        }
        TableShopConfig.prototype.GetType = function () { return 'table.TableShopConfig'; };
        return TableShopConfig;
    }());
    table.TableShopConfig = TableShopConfig;
    var TableShopConfig;
    (function (TableShopConfig) {
        /**
         * 物品
         */
        var ShopGoodsItem = (function () {
            function ShopGoodsItem() {
            }
            return ShopGoodsItem;
        }());
        TableShopConfig.ShopGoodsItem = ShopGoodsItem;
    })(TableShopConfig = table.TableShopConfig || (table.TableShopConfig = {}));
    var TableShopConfig;
    (function (TableShopConfig) {
        /**
         * 首充奖励
         */
        var FirstShopGoodsItem = (function () {
            function FirstShopGoodsItem() {
            }
            return FirstShopGoodsItem;
        }());
        TableShopConfig.FirstShopGoodsItem = FirstShopGoodsItem;
    })(TableShopConfig = table.TableShopConfig || (table.TableShopConfig = {}));
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 商城配置表.xlsx SHEET: Sheet1 KEY: id
     */
    var TableShopSetConfig = (function () {
        function TableShopSetConfig() {
        }
        TableShopSetConfig.prototype.GetType = function () { return 'table.TableShopSetConfig'; };
        return TableShopSetConfig;
    }());
    table.TableShopSetConfig = TableShopSetConfig;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 比赛场配置表.xlsx SHEET: 德扑SNG KEY: id*0xFF + userNum
     */
    var TableTexasSNG = (function () {
        function TableTexasSNG() {
        }
        TableTexasSNG.prototype.GetType = function () { return 'table.TableTexasSNG'; };
        return TableTexasSNG;
    }());
    table.TableTexasSNG = TableTexasSNG;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: gameList.xlsx SHEET: gameList
     */
    var gameList = (function () {
        function gameList() {
        }
        gameList.prototype.GetType = function () { return 'table.gameList'; };
        return gameList;
    }());
    table.gameList = gameList;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 扑克表.xlsx SHEET: Sheet1 KEY: thisId
     */
    var TablePokerCard = (function () {
        function TablePokerCard() {
        }
        TablePokerCard.prototype.GetType = function () { return 'table.TablePokerCard'; };
        return TablePokerCard;
    }());
    table.TablePokerCard = TablePokerCard;
})(table || (table = {}));

var GX;
(function (GX) {
    var AvatarListIem = (function () {
        function AvatarListIem() {
        }
        return AvatarListIem;
    }());
    var AvatarList = (function () {
        function AvatarList() {
            this.m_avatarList = {};
            this.m_storageKey = "m_storageKey";
        }
        AvatarList.prototype.add = function (item) {
            if (item == null)
                return;
            this.m_avatarList[item.url] = item;
        };
        AvatarList.prototype.find = function (url) {
            return this.m_avatarList[url];
        };
        AvatarList.prototype.sava = function () {
        };
        AvatarList.prototype.load = function () {
            if (this.m_avatarList)
                return;
            this.m_avatarList = {};
        };
        return AvatarList;
    }());
    var ImageLoader = (function () {
        function ImageLoader() {
        }
        ImageLoader.prototype.load = function (url, loadComplete, thisArg) {
            this.url = url;
            this.loadComplete = loadComplete;
            this.thisArg = thisArg;
            this.imageLoader = new egret.ImageLoader();
            this.imageLoader.addEventListener(egret.Event.COMPLETE, this.onComplete, this);
            this.imageLoader.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
            this.imageLoader.load(url);
        };
        ImageLoader.prototype.onComplete = function (e) {
            this.loadComplete.call(this.thisArg, this.imageLoader.data, this.url);
            this.destroy();
        };
        ImageLoader.prototype.onIOError = function () {
            this.loadComplete.call(this.thisArg);
            this.destroy();
        };
        ImageLoader.prototype.destroy = function () {
            if (this.imageLoader) {
                this.imageLoader.removeEventListener(egret.Event.COMPLETE, this.onComplete, this);
                this.imageLoader.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
                this.imageLoader = null;
            }
        };
        return ImageLoader;
    }());
    /**
     * 头像管理
     */
    var AvatarManager = (function () {
        function AvatarManager() {
        }
        /**
         * 加载头像资源
         */
        AvatarManager.read = function (url, loadComplete, thisObject, style) {
            if (style === void 0) { style = GX.RESStyle.Rect; }
            if (url == null)
                return;
            if (!GX.isPathRooted(url)) {
                if (RES.hasRes(url)) {
                    var data = RES.getRes(url);
                    if (data)
                        loadComplete.call(thisObject, GX.Utils.getStyleTexture(url, style), url);
                    else
                        GX.Utils.getStyleTextureAsync(url, loadComplete, thisObject, style);
                }
                return;
            }
            var archive = AvatarManager.avatarList.find(url);
            if (archive) {
                var texture = archive.rect;
                if (style != GX.RESStyle.Rect)
                    texture = archive.circle ? archive.circle : GX.Utils.getStyleTextureBuyBitmapData(archive.rect, style);
                return loadComplete.call(thisObject, texture, url);
            }
            var loadList = AvatarManager.loading[url];
            if (loadList) {
                loadList.push({ loadComplete: loadComplete, thisObject: thisObject });
                return;
            }
            loadList = [];
            loadList.push({ loadComplete: loadComplete, thisObject: thisObject });
            AvatarManager.loading[url] = loadList;
            (new ImageLoader()).load(url, function (data, url) {
                var loadList = AvatarManager.loading[url];
                var texture = data;
                if (style != GX.RESStyle.Rect) {
                    texture = GX.Utils.getStyleTextureBuyBitmapData(data, style);
                }
                if (loadList == null)
                    return;
                for (var _i = 0, loadList_1 = loadList; _i < loadList_1.length; _i++) {
                    var item_1 = loadList_1[_i];
                    item_1.loadComplete.call(item_1.thisObject, texture, url);
                }
                AvatarManager.loading[url] = null;
                if (data == null)
                    return;
                //缓存头像资源
                var item = new AvatarListIem();
                item.url = url;
                item.rect = data;
                item.circle = style == GX.RESStyle.Circular ? texture : null;
                AvatarManager.avatarList.add(item);
                AvatarManager.avatarList.sava();
            }, this);
        };
        /**
         * 缓存模式
         */
        AvatarManager.cache = true;
        /**
         * 缓存头像列表
         */
        AvatarManager.avatarList = new AvatarList();
        /**
         * 正在加载的资源 防止同一资源多次下载
         */
        AvatarManager.loading = {};
        return AvatarManager;
    }());
    GX.AvatarManager = AvatarManager;
})(GX || (GX = {}));

var GX;
(function (GX) {
    /**
     * 可记录调用"this"的函数代理
     */
    var SinglecastEvent = (function () {
        function SinglecastEvent(action, self) {
            this.action = action;
            this.self = self;
        }
        SinglecastEvent.prototype.call = function () {
            var argArray = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                argArray[_i - 0] = arguments[_i];
            }
            return this.apply(argArray);
        };
        SinglecastEvent.prototype.apply = function (argArray) {
            if (this.action == null)
                return;
            return this.action.apply(this.self, argArray);
        };
        return SinglecastEvent;
    }());
    GX.SinglecastEvent = SinglecastEvent;
    /**
     * 记录所有的挂载事件
     */
    var Event = (function () {
        function Event() {
        }
        Event.prototype.add = function (multicase) {
            if (this.eventList == null)
                this.eventList = [];
            this.eventList.push(multicase);
        };
        Event.prototype.clear = function () {
            this.eventList.clear();
        };
        /**
         * 兼容老游戏  游戏端不需要调用此方发
         */
        Event.prototype.removeAll = function () {
            this.removeAllEvent();
        };
        Event.prototype.removeAllEvent = function () {
            for (var _i = 0, _a = this.eventList; _i < _a.length; _i++) {
                var item = _a[_i];
                item.removeAll();
            }
        };
        return Event;
    }());
    GX.Event = Event;
    /**
     * 多播事件
     */
    var MulticastEvent = (function () {
        function MulticastEvent() {
            MulticastEvent.EventList.add(this);
        }
        MulticastEvent.prototype.call = function () {
            var argArray = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                argArray[_i - 0] = arguments[_i];
            }
            return this.apply(argArray);
        };
        MulticastEvent.prototype.apply = function (argArray) {
            var len = this.length;
            if (len == 0)
                return;
            // 单播情况的优化
            if (len == 1) {
                var f = this.list[0];
                f.apply(argArray);
                return;
            }
            // 多播调用时必须拷贝一份，避免调用过程中容器修改
            for (var _i = 0, _a = this.list.clone(); _i < _a.length; _i++) {
                var f = _a[_i];
                f.apply(argArray);
            }
        };
        /**
         * 挂载事件回调
         * @param action
         * @return 返回挂载的事件回调函数本身，方便lambda挂载结果记录以供移除
         */
        MulticastEvent.prototype.add = function (action, thisArg) {
            if (action == null)
                return action;
            if (this.list == null)
                this.list = [];
            if (this.list.seek(function (v) { return v.action == action && v.self == thisArg; }))
                return action;
            this.list.push(new SinglecastEvent(action, thisArg));
            return action;
        };
        /**
         * 卸载事件回调
         * @param action
         * @param thisArg
         * @return 卸载成功，false表示该事件中并不包含给定的回调
         */
        MulticastEvent.prototype.remove = function (action, thisArg) {
            if (thisArg === void 0) { thisArg = -1; }
            if (typeof action !== "function" || this.list == null)
                return false;
            return this.list.removeFirst(function (i) { return i.action === action && (thisArg == -1 ? true : i.self == thisArg); });
        };
        /**
         * 卸载所有以指定对象作为调用this的回调函数
         */
        MulticastEvent.prototype.removeOn = function (thisArg) {
            if (this.list == null)
                return 0;
            return this.list.removeAll(function (i) { return i.self == thisArg; });
        };
        /**
         * 卸载所有挂载的事件
         */
        MulticastEvent.prototype.removeAll = function () {
            this.list = null;
        };
        Object.defineProperty(MulticastEvent.prototype, "length", {
            /**
             * 得到事件中包含的回调数目
             */
            get: function () {
                if (this.list == null)
                    return 0;
                return this.list.length;
            },
            enumerable: true,
            configurable: true
        });
        MulticastEvent.EventList = new Event();
        return MulticastEvent;
    }());
    GX.MulticastEvent = MulticastEvent;
})(GX || (GX = {}));

if (!Array.prototype.first) {
    Array.prototype.first = function (callbackfn) {
        if (typeof callbackfn == "function") {
            for (var i = 0; i < this.length; i++) {
                var v = this[i];
                if (callbackfn(v, i, this)) {
                    return v;
                }
            }
        }
        else if (this.length > 0) {
            return this[0];
        }
        return null;
    };
}
if (!Array.prototype.last) {
    Array.prototype.last = function (callbackfn) {
        if (typeof callbackfn == "function") {
            for (var i = this.length - 1; i >= 0; i--) {
                var v = this[i];
                if (callbackfn(v, i, this)) {
                    return v;
                }
            }
        }
        else if (this.length > 0) {
            return this[this.length - 1];
        }
        return null;
    };
}
if (!Array.prototype.random) {
    Array.prototype.random = function () {
        if (this.length == 0) {
            return null;
        }
        var index = Math.randomInteger(0, this.length - 1);
        return this[index];
    };
}
if (!Array.prototype.remove) {
    Array.prototype.remove = function (value, fromIndex) {
        var index = this.indexOf(value, fromIndex);
        if (index < 0)
            return false;
        this.splice(index, 1);
        return true;
    };
}
if (!Array.prototype.removeAt) {
    Array.prototype.removeAt = function (index) {
        if (index < 0 || index >= this.length)
            return false;
        this.splice(index, 1);
        return true;
    };
}
if (!Array.prototype.removeFirst) {
    Array.prototype.removeFirst = function (predicate, fromIndex) {
        if (predicate == null)
            return false;
        if (fromIndex == null)
            fromIndex = 0;
        else if (fromIndex < 0 || fromIndex >= this.length)
            return false;
        for (var i = fromIndex; i < this.length; i++) {
            if (predicate(this[i], i)) {
                this.splice(i, 1);
                return true;
            }
        }
        return false;
    };
}
if (!Array.prototype.removeAll) {
    Array.prototype.removeAll = function (predicate, fromIndex) {
        if (fromIndex == null)
            fromIndex = 0;
        if (fromIndex < 0 || fromIndex >= this.length)
            return 0;
        if (predicate == null) {
            var length = this.length;
            this.splice(fromIndex, this.length);
            return length - this.length;
        }
        // 逆序遍历，防止下标错乱
        var count = 0;
        for (var i = this.length - 1; i >= fromIndex; i--) {
            if (predicate(this[i], i)) {
                this.splice(i, 1);
                count++;
            }
        }
        return count;
    };
}
if (!Array.prototype.clear) {
    Array.prototype.clear = function () {
        this.splice(0, this.length);
    };
}
if (!Array.prototype.clone) {
    Array.prototype.clone = function () {
        return this.slice(0);
    };
}
if (!Array.create) {
    function createMultiDimensionArray(dimensionLength) {
        if (dimensionLength.length == 0)
            return null;
        var array = new Array(dimensionLength[0]);
        if (dimensionLength.length > 1) {
            var subDimension = dimensionLength.slice(1);
            for (var i = 0; i < array.length; i++) {
                array[i] = createMultiDimensionArray(subDimension);
            }
        }
        return array;
    }
    Array.create = function () {
        var dimensionLength = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dimensionLength[_i - 0] = arguments[_i];
        }
        return createMultiDimensionArray(dimensionLength);
    };
}
Array.prototype.seek = function (func) {
    if (func == null) {
        return false;
    }
    for (var _i = 0, _a = this; _i < _a.length; _i++) {
        var item = _a[_i];
        if (func(item)) {
            return true;
        }
    }
    return false;
};
Array.prototype.first = function (func) {
    if (func == null) {
        return this[0];
    }
    for (var _i = 0, _a = this; _i < _a.length; _i++) {
        var item = _a[_i];
        if (func(item)) {
            return item;
        }
    }
    return null;
};
Array.prototype.find = function (func) {
    if (func == null) {
        return -1;
    }
    for (var i = 0; i < this.length; i++) {
        if (func(this[i])) {
            return i;
        }
    }
    return -1;
};
Array.prototype.deletefirst = function (func) {
    if (func == null) {
        return -1;
    }
    for (var i = 0; i < this.length; i++) {
        if (func(this[i])) {
            this.splice(i, 1);
            return i;
        }
    }
    return -1;
};
Array.prototype.last = function (func) {
    if (!(this instanceof Array)) {
        return null;
    }
    return this[this.length - 1];
};
Array.prototype.random = function () {
    var length = this.length - 1;
    return this[Math.randomInteger(0, length)];
};
Array.prototype.randomItems = function (selectnum) {
    var length = this.length - 1;
    var indexs = Math.randomIntegers(0, length, selectnum);
    var newArray = new Array();
    for (var _i = 0, indexs_1 = indexs; _i < indexs_1.length; _i++) {
        var i = indexs_1[_i];
        newArray.push(this[i]);
    }
    return newArray;
};
Array.prototype.distinct = function () {
    var h = {};
    var arr = [];
    for (var i = 0; i < this.length; i++) {
        if (!h[this[i]]) {
            h[this[i]] = true;
            arr.push(this[i]);
        }
    }
    return arr;
};
Array.prototype.deepcopy = function () {
    return this.slice(0);
};
if (!Array.prototype.reverse) {
    Array.prototype.reverse = function () {
        var arr = [];
        var len = this.length;
        for (var i = 0; i < len; i++) {
            arr.unshift(this[i]);
        }
        return arr;
    };
}

var GX;
(function (GX) {
    /**
     * 时间戳格式
     */
    (function (TimeFormat) {
        /**
         * Y-M-D H:M:S
         */
        TimeFormat[TimeFormat["ALL"] = 1] = "ALL";
        /**
         * H:M
         */
        TimeFormat[TimeFormat["HM"] = 2] = "HM";
        /**
         * H:M:S
         */
        TimeFormat[TimeFormat["HMS"] = 3] = "HMS";
        /**
         * M:S
         */
        TimeFormat[TimeFormat["MS"] = 4] = "MS";
    })(GX.TimeFormat || (GX.TimeFormat = {}));
    var TimeFormat = GX.TimeFormat;
    /**
     * 资源风格
     */
    (function (RESStyle) {
        /**
         * 矩形
         */
        RESStyle[RESStyle["Rect"] = 1] = "Rect";
        /**
         * 圆形
         */
        RESStyle[RESStyle["Circular"] = 2] = "Circular";
        /**
         * 圆角矩形
         */
        RESStyle[RESStyle["RoundRect"] = 3] = "RoundRect";
    })(GX.RESStyle || (GX.RESStyle = {}));
    var RESStyle = GX.RESStyle;
    /**
     * 字符串不是`undefined`、`null`或`""`
     */
    function stringIsNullOrEmpty(value) {
        return typeof (value) !== "string" || value.length == 0;
    }
    GX.stringIsNullOrEmpty = stringIsNullOrEmpty;
    /**
     * @ref http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/8809472#8809472
     */
    function generateUUID() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }
    GX.generateUUID = generateUUID;
    function MD5(message) {
        // 如果编译报错找不到名称"md5"，请确认应用层egretProperties.json文件中添加了以下模块：
        // {
        //     "name": "md5",
        //     "path": "../../egret-game-library/md5/libsrc"
        // }
        var hash = new md5();
        return hash.hex_md5(message);
    }
    GX.MD5 = MD5;
    /**
     * @ref http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript
     */
    function unixTimestamp() {
        if (!Date.now) {
            Date.now = function () { return new Date().getTime(); };
        }
        return Date.now() / 1000 | 0;
    }
    GX.unixTimestamp = unixTimestamp;
    /**
     * 得到扩展名，带“.”
     * @param path
     */
    function getExtension(path) {
        var index = path.lastIndexOf(".");
        if (index == -1)
            return "";
        return path.substring(index);
    }
    GX.getExtension = getExtension;
    /**
     * 得到路径，不带末尾“/”
     * @param path
     */
    function getDirectoryName(path) {
        var index = path.lastIndexOf("/");
        if (index == -1)
            return "";
        return path.substring(0, index);
    }
    GX.getDirectoryName = getDirectoryName;
    /**
     * 得到文件名，带扩展名
     * @param path
     */
    function getFileName(path) {
        var index = path.lastIndexOf("/");
        if (index == -1)
            return path;
        return path.substring(index + 1);
    }
    GX.getFileName = getFileName;
    /**
     * 得到不带扩展名的文件名
     * @param path
     */
    function getFileNameWithoutExtension(path) {
        var name = getFileName(path);
        var index = name.lastIndexOf(".");
        if (index == -1)
            return name;
        return name.substring(0, index);
    }
    GX.getFileNameWithoutExtension = getFileNameWithoutExtension;
    /**
     * 是否是全路径
     * @param path
     */
    function isPathRooted(path) {
        return path.startsWith("http://") || path.startsWith("https://");
    }
    GX.isPathRooted = isPathRooted;
    /**
     * 时间戳转换为字符串
     * format 参数可设置为
     */
    function timestampToString(time, format) {
        if (format === void 0) { format = TimeFormat.ALL; }
        if (time == null)
            return "";
        time = time.toString().length == 10 ? time * 1000 : time;
        var now = new Date(time);
        var year = now.getFullYear();
        var month = (now.getMonth() + 1).toString().padLeft(2, '0');
        var date = now.getDate().toString().padLeft(2, '0');
        var hour = now.getHours().toString().padLeft(2, '0');
        var minute = now.getMinutes().toString().padLeft(2, '0');
        var second = now.getSeconds().toString().padLeft(2, '0');
        if (format == TimeFormat.HM) {
            return hour + ":" + minute;
        }
        else if (format == TimeFormat.HMS) {
            return hour + ":" + minute + ":" + second;
        }
        else {
            return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
        }
    }
    GX.timestampToString = timestampToString;
    /**
     * 【金额表示方法】：
     *1 - 10万（不含10万），不用单位
     *10万 - 1000万（不含1000万），用K
     *1000万及以上，用M
     *数字加千分号，保留2位小数
     */
    function GoldFormat(value) {
        if (value == null)
            return;
        value = Math.floor(value * 100) / 100;
        if (value < 100000) {
            return toEnInLocaleString(GX.numToFixed(value, 2));
        }
        if (value < 10000000) {
            var point_1 = value / 1000;
            return toEnInLocaleString(GX.numToFixed(point_1, 2)) + "K";
        }
        var point = value / 1000000;
        return toEnInLocaleString(GX.numToFixed(point, 2)) + "M";
    }
    GX.GoldFormat = GoldFormat;
    /**
     * 千位/拉克（十万）/克若尔（千万）分隔
     */
    function toEnInLocaleString(n) {
        var b = parseInt(n).toString();
        var point = (n + "").split(".")[1];
        var len = b.length;
        if (len <= 3) {
            return b + (Number(point) > 0 ? ("." + point) : "");
        }
        var r = len % 3;
        return (r > 0 ? b.slice(0, r) + "," + b.slice(r, len).match(/\d{3}/g).join(",") : b.slice(r, len).match(/\d{3}/g).join(",")) + (Number(point) > 0 ? ("." + point) : "");
    }
    GX.toEnInLocaleString = toEnInLocaleString;
    /**
     * value转化为num位小数的字符串
     */
    function numToFixed(value, num) {
        if (num === void 0) { num = 2; }
        var scaleValue = Math.pow(10, num);
        value = value * scaleValue;
        value = Math.floor(value);
        var intValue = Math.floor(value / scaleValue);
        var dotValue = value % scaleValue;
        var dotVal = dotValue + "";
        var dotLen = dotVal.length;
        for (var i = dotLen; i < num; i++) {
            dotVal = "0" + dotVal;
        }
        if (dotVal.length == 0) {
            return intValue + "";
        }
        else {
            return intValue + "." + dotVal;
        }
    }
    GX.numToFixed = numToFixed;
    /**
     * 获取俩点的弧度
     */
    function getRadianByPoint(p1, p2) {
        var px = p1.x;
        var py = p1.y;
        var mx = p2.x;
        var my = p2.y;
        var x = Math.abs(px - mx);
        var y = Math.abs(py - my);
        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        var cos = y / z;
        var radina = Math.acos(cos);
        var radian = Math.floor(180 / (Math.PI / radina));
        if (mx > px && my > py) {
            radian = 180 - radian;
        }
        if (mx == px && my > py) {
            radian = 180;
        }
        if (mx > px && my == py) {
            radian = 90;
        }
        if (mx < px && my > py) {
            radian = 180 + radian;
        }
        if (mx < px && my == py) {
            radian = 270;
        }
        if (mx < px && my < py) {
            radian = 360 - radian;
        }
        return radian;
    }
    GX.getRadianByPoint = getRadianByPoint;
    /**
     *获取俩点的距离
     */
    function getDistanceByPoint(p1, p2) {
        var x = p1.x - p2.x;
        var y = p1.y - p2.y;
        return Math.sqrt(x * x + y * y);
    }
    GX.getDistanceByPoint = getDistanceByPoint;
    /**
     * 通过角度获得弧度
     */
    function getRadian(angle) {
        return angle * Math.PI / 180;
    }
    GX.getRadian = getRadian;
    /**
     * 通过弧度获得角度
     */
    function getAngle(radian) {
        return radian * 180 / Math.PI;
    }
    GX.getAngle = getAngle;
    /**
    *获取弧度所在的象限
     */
    function getQuadrantByRadian(radian) {
        if (radian > 270)
            return 4;
        else if (radian > 180)
            return 3;
        else if (radian > 90)
            return 2;
        return 1;
    }
    GX.getQuadrantByRadian = getQuadrantByRadian;
    /**
     * 返回点和弧度生成的直线指向舞台边界反射后的点和弧度
     */
    function getBorderPoint(point, angle) {
        var quadrant = GX.getQuadrantByRadian(angle);
        var maxEndX = quadrant == 1 || quadrant == 2 ? uniLib.Global.screenWidth : 0;
        var maxEndY = quadrant == 2 || quadrant == 3 ? uniLib.Global.screenHeight : 0;
        var radian = GX.getRadian(angle);
        var maxDistX = Math.abs(maxEndX - point.x);
        var offsetY = Math.abs(maxDistX / Math.sin(radian) * Math.cos(radian));
        var maxDistY = Math.abs(maxEndY - point.y);
        var offsetX = Math.abs(maxDistY / Math.cos(radian) * Math.sin(radian));
        if (offsetY < maxDistY) {
            var endY = quadrant == 1 || quadrant == 4 ? point.y - offsetY : point.y + offsetY;
            var endAngle = void 0;
            if (quadrant == 1)
                endAngle = 360 - angle;
            else if (quadrant == 2)
                endAngle = 360 - angle;
            else if (quadrant == 3)
                endAngle = 360 - angle;
            else if (quadrant == 4)
                endAngle = 360 - angle;
            return { x: maxEndX, y: endY, angle: endAngle };
        }
        else if (offsetX < maxDistX) {
            var endX = quadrant == 1 || quadrant == 2 ? point.x + offsetX : point.x - offsetX;
            var endAngle = void 0;
            if (quadrant == 1)
                endAngle = 180 - angle;
            else if (quadrant == 2)
                endAngle = 180 - angle;
            else if (quadrant == 3)
                endAngle = 360 - (angle - 180);
            else if (quadrant == 4)
                endAngle = 360 - angle + 180;
            return { x: endX, y: maxEndY, angle: endAngle };
        }
    }
    GX.getBorderPoint = getBorderPoint;
    /**
    *是否为json字符串
     */
    function isJsonString(str) {
        try {
            if (typeof JSON.parse(str) == "object") {
                return true;
            }
        }
        catch (e) {
        }
        return false;
    }
    GX.isJsonString = isJsonString;
})(GX || (GX = {}));

if (!Math.randomFloat) {
    Math.randomFloat = function (min, max) {
        if (max > min) {
            min, max = max, min;
        }
        return min + Math.random() * (max - min);
    };
}
if (!Math.randomInteger) {
    Math.randomInteger = function (min, max) {
        if (max > min) {
            min, max = max, min;
        }
        min, max = Math.round(min), Math.round(max);
        // The Math.random() method returns a random number from 0 (inclusive) up to but not including 1 (exclusive).
        return min + Math.floor(Math.random() * (max - min + 1));
    };
}
if (!Math.clamp) {
    Math.clamp = function (value, min, max) {
        if (value == null)
            return min;
        if (value < min)
            return min;
        else if (value > max)
            return max;
        else
            return value;
    };
}
Math.randomInteger = function (min, max) {
    var choices = max - min + 1;
    return Math.floor(Math.random() * choices + min);
};
Math.randomIntegers = function (min, max, selectnum) {
    if ((max - min + 1) < selectnum)
        return;
    var choices = max - min + 1;
    var nums = new Array();
    for (var i = 0; i < selectnum; i++) {
        var equal = false;
        var random = Math.floor(Math.random() * choices + min);
        for (var _i = 0, nums_1 = nums; _i < nums_1.length; _i++) {
            var item = nums_1[_i];
            if (item == random) {
                equal = true;
                i--;
                break;
            }
        }
        if (!equal)
            nums.push(random);
    }
    return nums;
};
Math.boolFromPercentage = function (num) {
    if (Math.random() < num) {
        return true;
    }
    else {
        return false;
    }
};

Number.prototype.percentage = function () {
    return (this != null ? this : 0) / 100;
};

var GX;
(function (GX) {
    /**
     * 线性同余随机数生成器，因为js提供的api不支持种子，所以为了匹配Unity，另写一套
     */
    var Random = (function () {
        /**
         * 创建一个随机数生成器
         */
        function Random(seed) {
            this.seed = seed;
            if (!this.seed && this.seed != 0) {
                this.seed = new Date().getTime();
            }
        }
        Object.defineProperty(Random.prototype, "value", {
            /**
             * 返回一个随机数，在0.0～1.0之间
             */
            get: function () {
                return this.range(0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random.prototype, "insideUnitCircle", {
            /**
             * 返回半径为1的圆内的一个随机点
             */
            get: function () {
                var randomAngle = this.range(0, 360);
                var randomDis = this.range(0, 1);
                var randomX = randomDis * Math.cos(randomAngle * Math.PI / 180);
                var randomY = randomDis * Math.sin(randomAngle * Math.PI / 180);
                return new egret.Point(randomX, randomY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random.prototype, "onUnitCircle", {
            /**
             * 返回半径为1的圆边的一个随机点
             */
            get: function () {
                var randomAngle = this.range(0, 360);
                var randomX = Math.cos(randomAngle * Math.PI / 180);
                var randomY = Math.sin(randomAngle * Math.PI / 180);
                return new egret.Point(randomX, randomY);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 返回一个在min和max之间的随机浮点数
         */
        Random.prototype.range = function (min, max) {
            if (!this.seed && this.seed != 0) {
                this.seed = new Date().getTime();
            }
            max = max || 1;
            min = min || 0;
            this.seed = (this.seed * 9301 + 49297) % 233280;
            var rnd = this.seed / 233280.0;
            return min + rnd * (max - min);
        };
        Object.defineProperty(Random, "value", {
            /**
             * 返回一个随机数，在0.0～1.0之间
             */
            get: function () {
                return this.range(0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random, "insideUnitCircle", {
            /**
             * 返回半径为1的圆内的一个随机点
             */
            get: function () {
                var randomAngle = this.range(0, 360);
                var randomDis = this.range(0, 1);
                var randomX = randomDis * Math.cos(randomAngle * Math.PI / 180);
                var randomY = randomDis * Math.sin(randomAngle * Math.PI / 180);
                return new egret.Point(randomX, randomY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random, "onUnitCircle", {
            /**
             * 返回半径为1的圆边的一个随机点
             */
            get: function () {
                var randomAngle = this.range(0, 360);
                var randomX = Math.cos(randomAngle * Math.PI / 180);
                var randomY = Math.sin(randomAngle * Math.PI / 180);
                return new egret.Point(randomX, randomY);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 返回一个在min和max之间的随机浮点数
         */
        Random.range = function (min, max) {
            if (!this.seed && this.seed != 0) {
                this.seed = new Date().getTime();
            }
            max = max || 1;
            min = min || 0;
            this.seed = (this.seed * 9301 + 49297) % 233280;
            var rnd = this.seed / 233280.0;
            return min + rnd * (max - min);
        };
        return Random;
    }());
    GX.Random = Random;
})(GX || (GX = {}));

if (!String.prototype.format) {
    String.prototype.format = function () {
        var replacements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            replacements[_i - 0] = arguments[_i];
        }
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] !== 'undefined'
                ? args[number]
                : match;
        });
    };
}
if (!String.prototype.padLeft) {
    String.prototype.padLeft = function (totalWidth, paddingChar) {
        if (typeof paddingChar !== "string" || paddingChar.length != 1) {
            paddingChar = " ";
        }
        var pad = "";
        while (pad.length + this.length < totalWidth) {
            pad += paddingChar;
        }
        return pad + this;
    };
}
if (!String.prototype.padRight) {
    String.prototype.padRight = function (totalWidth, paddingChar) {
        if (typeof paddingChar !== "string" || paddingChar.length != 1) {
            paddingChar = " ";
        }
        var pad = "";
        while (pad.length + this.length < totalWidth) {
            pad += paddingChar;
        }
        return this + pad;
    };
}
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (str) {
        if (this == null || str == null)
            return false;
        if (str.length == 0)
            return true;
        if (this.length < str.length)
            return false;
        for (var i = 0; i < str.length; i++) {
            if (this[i] != str[i])
                return false;
        }
        return true;
    };
}
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (str) {
        if (this == null || str == null)
            return false;
        if (str.length == 0)
            return true;
        if (this.length < str.length)
            return false;
        for (var i = 0; i < str.length; i++) {
            if (this[this.length - 1 - i] != str[str.length - 1 - i])
                return false;
        }
        return true;
    };
}
if (!String.prototype.trimEnd) {
    String.prototype.trimEnd = function () {
        return uniLib.StringUtils.rtrim(this);
    };
}
if (!String.prototype.trimStart) {
    String.prototype.trimStart = function () {
        return uniLib.StringUtils.ltrim(this);
    };
}
String.prototype.padLeft = function (totalWidth, paddingChar) {
    if (paddingChar != null) {
        return this.PadHelper(totalWidth, paddingChar, false);
    }
    else {
        return this.PadHelper(totalWidth, ' ', false);
    }
};
String.prototype.PadHelper = function (totalWidth, paddingChar, isRightPadded) {
    if (this.length < totalWidth) {
        var paddingString = new String();
        for (var i = 1; i <= (totalWidth - this.length); i++) {
            paddingString += paddingChar;
        }
        if (isRightPadded) {
            return (this + paddingString);
        }
        else {
            return (paddingString + this);
        }
    }
    else {
        return this;
    }
};

if (!uniLib.DragonUtils.createDragonBoneAnimation) {
    uniLib.DragonUtils.createDragonBoneAnimation = function (resName, armatureName) {
        var factory = dragonBones.EgretFactory.factory;
        if (factory.getDragonBonesData(resName) == null) {
            var dragonbonesData = RES.getRes(resName + "_ske_json");
            var textureData = RES.getRes(resName + "_tex_json");
            var texture = RES.getRes(resName + "_tex_png");
            factory.parseDragonBonesData(dragonbonesData, resName);
            factory.parseTextureAtlasData(textureData, texture);
        }
        return factory.buildArmatureDisplay(armatureName == null ? "armatureName" : armatureName, resName);
    };
}
var GX;
(function (GX) {
    /**
     * 创建龙骨对象 v>=5.0
     * 播放方式  dragonBones.EgretArmatureDisplay => animation.play
     * @param resName 资源简写名  如：(XXXX_ske_json,XXXX_tex_json,XXXX__tex_png)  resName值为XXXX
     * @param  armatureName 骨架名称  默认为"armatureName"
     * @param  stageObj 绑定舞台对象
     * @param animationName - 动画数据名称。 （如果未设置，则播放默认动画，或将暂停状态切换为播放状态，或重新播放之前播放的动画）
     * @param playTimes - 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @param first 创建后开始播放龙骨
     * @param interval 刷新龙骨频率  默认3帧刷新一次
     */
    function createUniDragon(resName, armatureName, stageObj, animationName, playTimes, first, interval) {
        if (first === void 0) { first = false; }
        if (interval === void 0) { interval = 2; }
        var factory = new dragonBones.EgretFactory();
        var dragonbonesData = RES.getRes(resName + "_ske_json");
        var textureData = RES.getRes(resName + "_tex_json");
        var texture = RES.getRes(resName + "_tex_png");
        factory.parseDragonBonesData(dragonbonesData, resName);
        factory.parseTextureAtlasData(textureData, texture);
        var armature = factory.buildArmature(armatureName == null ? "armatureName" : armatureName);
        return uniLib.SetUniDragonTimeout(stageObj, armature, animationName, playTimes, interval, first);
    }
    GX.createUniDragon = createUniDragon;
})(GX || (GX = {}));

var GX;
(function (GX) {
    var ResManager = (function () {
        function ResManager() {
        }
        /**
         * 读取公共资源
         */
        ResManager.readCommon = function (url, compFunc, thisObject, resourceType) {
            if (url == null)
                return;
            url = ResManager.urlRoot + url;
            if (RES.hasRes(url)) {
                var data = RES.getRes(url);
                if (data)
                    compFunc.call(thisObject, data, url);
                else
                    RES.getResAsync(url, compFunc, thisObject);
                return;
            }
            this.loadByUrl(url, compFunc, thisObject, resourceType);
        };
        ResManager.loadByUrl = function (url, compFunc, thisObject, resourceType) {
            var type = resourceType != null ? resourceType : this.getTypeByUrl(url);
            RES.getResByUrl(url, compFunc, thisObject, type);
        };
        /**
         * 读取扑克牌公共资源
         * @param  {string} resourceRoot  资源文件跟目录 TablePokerCard.json
         * @param  {string} config 配置文件名
         * @param  {number} cardId 牌id
         * @param  {string} resourceType? 配置文件类型
         */
        ResManager.readCommonPokerCard = function (resourceRoot, config, cardId, compFunc, thisObject, resourceType) {
            var _this = this;
            if (resourceRoot == null || config == null || cardId == null)
                return;
            resourceRoot = ResManager.urlRoot + resourceRoot;
            var configUrl = resourceRoot + config;
            this.loadByUrl(configUrl, function (data) {
                if (data == null)
                    compFunc.call(thisObject, null, configUrl);
                var card = data.first(function (v) { return v.thisId == cardId; });
                if (card == null)
                    compFunc.call(thisObject, null, configUrl);
                var point = card.point == 1 ? 14 : card.point;
                point = point == 2 ? 16 : point;
                var cardurl = resourceRoot + "common_Poker_" + card.suit + "_" + point.toString().padLeft(2, "0") + ".png";
                _this.loadByUrl(cardurl, compFunc, thisObject, resourceType);
            }, thisObject, resourceType);
        };
        /**
         * 通过url获取文件类型
         * @from egret-core-3.2.0\src\extension\resource\Resource.ts
         */
        ResManager.getTypeByUrl = function (url) {
            var suffix = url.substr(url.lastIndexOf(".") + 1);
            if (suffix) {
                suffix = suffix.toLowerCase();
            }
            var type;
            switch (suffix) {
                case RES.ResourceItem.TYPE_JSON:
                    type = RES.ResourceItem.TYPE_JSON; // json
                    break;
                case RES.ResourceItem.TYPE_SHEET:
                    type = RES.ResourceItem.TYPE_SHEET; // sheet
                    break;
                case "fnt":
                    type = RES.ResourceItem.TYPE_FONT; // font
                    break;
                case "txt":
                case "exml":
                    type = RES.ResourceItem.TYPE_TEXT; // text
                    break;
                case RES.ResourceItem.TYPE_XML:
                case "tmx":
                    type = RES.ResourceItem.TYPE_XML; // xml
                    break;
                case "png":
                case "jpg":
                case "gif":
                case "jpeg":
                case "bmp":
                    type = RES.ResourceItem.TYPE_IMAGE; // image
                    break;
                case "mp3":
                case "ogg":
                case "mpeg":
                case "wav":
                case "m4a":
                case "mp4":
                case "aiff":
                case "wma":
                case "mid":
                    type = RES.ResourceItem.TYPE_SOUND; // sound
                    break;
                default:
                    type = RES.ResourceItem.TYPE_BIN; // bin
                    break;
            }
            return type;
        };
        ResManager.urlRoot = "http://112.90.61.227/juxian/commonRes/";
        return ResManager;
    }());
    GX.ResManager = ResManager;
})(GX || (GX = {}));

// TypeScript file
var GX;
(function (GX) {
    var Effect;
    (function (Effect) {
        /**
         * 押注飞行到目标的缓动动画,
         * @param chip:飞行的底注
         * @param toPos:飞行的目的位置
         * @param duration:飞行的时间，默认为0.3秒
         * @param fromPos:飞行的起始位置,如果不填写，则是用对象本身的坐标;
         * @param ease:{egret.Ease} 缓动算法
         * @return 返回当前的egret.Tween对象，如果需要再缓动动画播放完后回调，则在调用后再.call
        */
        function ChipflyTo(chip, toPos, duration, waitTime, fromPos, ease) {
            if (duration === void 0) { duration = 300; }
            if (waitTime === void 0) { waitTime = 0; }
            if (fromPos === void 0) { fromPos = null; }
            if (ease === void 0) { ease = egret.Ease.circOut; }
            var setInfo = { x: chip.x, y: chip.y };
            if (fromPos != null) {
                if (fromPos.x != undefined) {
                    setInfo.x = fromPos.x;
                }
                if (fromPos.y != undefined) {
                    setInfo.y = fromPos.y;
                }
            }
            return egret.Tween.get(chip).wait(waitTime).set(setInfo).to({ x: toPos.x, y: toPos.y }, duration, ease);
        }
        Effect.ChipflyTo = ChipflyTo;
        /**
         * 押注由桌面飞回去的缓动动画,
         * @param chip:飞行的底注
         * @param toPos:飞行的目的位置
         * @param duration:飞行的时间，默认为0.3秒
         * @param fromPos:飞行的起始位置,如果不填写，则是用对象本身的坐标;
         *  @param ease:{egret.Ease} 缓动算法
         * @return 返回当前的egret.Tween对象，如果需要再缓动动画播放完后回调，则在调用后再.call
        */
        function ChipflyBack(chip, toPos, duration, waitTime, fromPos, ease) {
            if (duration === void 0) { duration = 300; }
            if (waitTime === void 0) { waitTime = 0; }
            if (fromPos === void 0) { fromPos = null; }
            if (ease === void 0) { ease = egret.Ease.getPowIn(2); }
            var setInfo = { x: chip.x, y: chip.y };
            if (fromPos != null) {
                if (fromPos.x != undefined) {
                    setInfo.x = fromPos.x;
                }
                if (fromPos.y != undefined) {
                    setInfo.y = fromPos.y;
                }
            }
            return egret.Tween.get(chip).wait(waitTime).set(setInfo).to({ x: toPos.x, y: toPos.y }, duration, ease);
        }
        Effect.ChipflyBack = ChipflyBack;
    })(Effect = GX.Effect || (GX.Effect = {}));
})(GX || (GX = {}));

var GX;
(function (GX) {
    /**
     * 游戏容器类
    * by dily
    * (c) copyright 2014 - 2035
    * All Rights Reserved.
    * EgerPro显示对象层级
    * Main-GameScene（sceneLayer、mainLayer、popLayer、effectLayer、maskLayer、loadLayer）
    *
    */
    var GameLayerManager = (function () {
        function GameLayerManager() {
        }
        GameLayerManager.removeUI = function (ui) {
            if (!ui || !ui.parent)
                return;
            ui.parent.removeChild(ui);
        };
        Object.defineProperty(GameLayerManager, "sceneLayer", {
            get: function () {
                return this.m_sceneLayer;
            },
            set: function (ui) {
                this.m_sceneLayer = ui;
                this.m_sceneLayer.name = "sceneLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToScene = function (ui) {
            if (!this.m_sceneLayer)
                return;
            this.m_sceneLayer.addChild(ui);
        };
        Object.defineProperty(GameLayerManager, "mainLayer", {
            get: function () {
                return this.m_mainLayer;
            },
            set: function (ui) {
                this.m_mainLayer = ui;
                this.m_mainLayer.name = "mainLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToMain = function (ui) {
            if (!this.m_mainLayer)
                return;
            this.m_mainLayer.addChild(ui);
        };
        Object.defineProperty(GameLayerManager, "effectLayer", {
            get: function () {
                return this.m_effectLayer;
            },
            set: function (ui) {
                this.m_effectLayer = ui;
                this.m_effectLayer.name = "effectLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToEffect = function (ui) {
            if (!this.m_effectLayer)
                return;
            this.m_effectLayer.addChild(ui);
        };
        Object.defineProperty(GameLayerManager, "popLayer", {
            get: function () {
                return this.m_popLayer;
            },
            set: function (ui) {
                this.m_popLayer = ui;
                this.m_popLayer.name = "popLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToPop = function (ui) {
            if (!this.m_popLayer)
                return;
            this.m_popLayer.addChild(ui);
        };
        Object.defineProperty(GameLayerManager, "maskLayer", {
            get: function () {
                return this.m_maskLayer;
            },
            set: function (ui) {
                this.m_maskLayer = ui;
                this.m_maskLayer.name = "maskLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToMask = function (ui) {
            if (!this.m_maskLayer)
                return;
            this.m_maskLayer.addChild(ui);
        };
        Object.defineProperty(GameLayerManager, "loadLayer", {
            get: function () {
                return this.m_loadLayer;
            },
            set: function (ui) {
                this.m_loadLayer = ui;
                this.m_loadLayer.name = "loadLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayerManager.addUIToLoad = function (ui) {
            if (!this.m_loadLayer)
                return;
            this.m_loadLayer.addChild(ui);
        };
        /**
         * 加载遮罩层 场景切换的时候加载资源UI
         */
        GameLayerManager.m_loadLayer = new egret.DisplayObjectContainer();
        return GameLayerManager;
    }());
    GX.GameLayerManager = GameLayerManager;
})(GX || (GX = {}));
/**
 * 废弃 移动至GX.GameLayerManager
  */
var GameLayerManager = (function () {
    function GameLayerManager() {
        /**
         * 加载遮罩层 场景切换的时候加载资源UI
         */
        this.m_loadLayer = new egret.DisplayObjectContainer();
    }
    Object.defineProperty(GameLayerManager, "Instance", {
        //游戏容器管理器单例
        get: function () {
            if (!this._instance)
                this._instance = new GameLayerManager();
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.removeUI = function (ui) {
        if (!ui || !ui.parent)
            return;
        ui.parent.parent.removeChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "sceneLayer", {
        get: function () {
            return this.m_sceneLayer;
        },
        set: function (ui) {
            this.m_sceneLayer = ui;
            this.m_sceneLayer.name = "sceneLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToSceneLayer = function (ui) {
        if (!this.m_sceneLayer)
            return;
        this.m_sceneLayer.addChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "mainLayer", {
        get: function () {
            return this.m_mainLayer;
        },
        set: function (ui) {
            this.m_mainLayer = ui;
            this.m_mainLayer.name = "mainLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToMainLayer = function (ui) {
        if (!this.m_mainLayer)
            return;
        this.m_mainLayer.addChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "popLayer", {
        get: function () {
            return this.m_popLayer;
        },
        set: function (ui) {
            this.m_popLayer = ui;
            this.m_popLayer.name = "popLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToPopLayer = function (ui) {
        if (!this.m_popLayer)
            return;
        this.m_popLayer.addChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "effectLayer", {
        get: function () {
            return this.m_effectLayer;
        },
        set: function (ui) {
            this.m_effectLayer = ui;
            this.m_effectLayer.name = "effectLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToEffectLayer = function (ui) {
        if (!this.m_effectLayer)
            return;
        this.m_effectLayer.addChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "maskLayer", {
        get: function () {
            return this.m_maskLayer;
        },
        set: function (ui) {
            this.m_maskLayer = ui;
            this.m_maskLayer.name = "maskLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToMaskLayer = function (ui) {
        if (!this.m_maskLayer)
            return;
        this.m_maskLayer.addChild(ui);
    };
    Object.defineProperty(GameLayerManager.prototype, "loadLayer", {
        get: function () {
            return this.m_loadLayer;
        },
        set: function (ui) {
            this.m_loadLayer = ui;
            this.m_loadLayer.name = "loadLayer";
        },
        enumerable: true,
        configurable: true
    });
    GameLayerManager.prototype.addUIToLoadLayer = function (ui) {
        if (!this.m_loadLayer)
            return;
        this.m_loadLayer.addChild(ui);
    };
    return GameLayerManager;
}());

var GX;
(function (GX) {
    /**
    * 面板弹出管理类
    * by dily
    * (c) copyright 2014 - 2035
    * All Rights Reserved.
    * 面板弹出的管理类
    */
    var PopUpManager;
    (function (PopUpManager) {
        /**
         * 背景对象
         */
        var DarkPop = (function () {
            function DarkPop() {
            }
            return DarkPop;
        }());
        PopUpManager.DarkPop = DarkPop;
        PopUpManager.DarkPops = [];
        /**
        * 添加面板方法
        * @param panel       		面板
        * @param dark        		背景是否变黑
        * @param effectType			0：没有动画 1:从中间轻微弹出 2：从中间猛烈弹出  3：从左向右 4：从右向左 5、从上到下 6、从下到上
        * @param backFun			回调函数 用于动画的完成的后续操作
        * @param darkAlpha			背景变黑的透明的
        */
        function addPopUp(panel, dark, effectType, backFun, darkAlpha) {
            if (dark === void 0) { dark = false; }
            if (effectType === void 0) { effectType = PopUpEffect.NOMAL; }
            if (GX.GameLayerManager.popLayer.contains(panel)) {
                return;
            }
            var popUpWidth = panel.width;
            var popUpHeight = panel.height;
            var scaleX = panel.scaleX == 0 ? 1 : panel.scaleX;
            var scaleY = panel.scaleY == 0 ? 1 : panel.scaleY;
            panel.x = 0;
            panel.y = 0;
            panel.alpha = 1;
            if (dark) {
                var darkPop = PopUpManager.DarkPops.first(function (v) { return v.relyPanel == panel; });
                if (darkPop == null) {
                    darkPop = new DarkPop();
                    darkPop.relyPanel = panel;
                    var darkSprite = new egret.Sprite();
                    darkSprite.graphics.clear();
                    darkSprite.graphics.beginFill(0x000000, darkAlpha == null ? 0.3 : darkAlpha);
                    darkSprite.graphics.drawRect(0, 0, uniLib.Global.screenWidth, uniLib.Global.screenHeight);
                    darkSprite.graphics.endFill();
                    darkSprite.width = uniLib.Global.screenWidth;
                    darkSprite.height = uniLib.Global.screenHeight;
                    darkPop.darkSprite = darkSprite;
                    PopUpManager.DarkPops.push(darkPop);
                }
                if (!GX.GameLayerManager.popLayer.contains(darkPop.darkSprite)) {
                    GX.GameLayerManager.popLayer.addChild(darkPop.darkSprite);
                }
                darkPop.darkSprite.touchEnabled = true;
                egret.Tween.get(darkPop.darkSprite).to({ alpha: 1 }, 150);
                darkPop.darkSprite.visible = true;
            }
            GX.GameLayerManager.popLayer.addChild(panel);
            panel.x = uniLib.Global.screenWidth / 2 - popUpWidth / 2;
            panel.y = uniLib.Global.screenHeight / 2 - popUpHeight / 2;
            //以下是弹窗动画
            var leftX = uniLib.Global.screenWidth / 2 - popUpWidth / 2;
            var upY = uniLib.Global.screenHeight / 2 - popUpHeight / 2;
            egret.Tween.removeTweens(panel);
            switch (effectType) {
                case 0:
                    break;
                case 1:
                    panel.alpha = 0;
                    panel.scaleX = 0.5;
                    panel.scaleY = 0.5;
                    panel.x = panel.x + popUpWidth / 4;
                    panel.y = panel.y + popUpHeight / 4;
                    if (backFun)
                        egret.Tween.get(panel).to({ alpha: 1, scaleX: scaleX, scaleY: scaleY, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 300, egret.Ease.backOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ alpha: 1, scaleX: scaleX, scaleY: scaleY, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 300, egret.Ease.backOut);
                    break;
                case 2:
                    panel.alpha = 0;
                    panel.scaleX = 0.5;
                    panel.scaleY = 0.5;
                    panel.x = panel.x + popUpWidth / 4;
                    panel.y = panel.y + popUpHeight / 4;
                    if (backFun)
                        egret.Tween.get(panel).to({ alpha: 1, scaleX: scaleX, scaleY: scaleY, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 600, egret.Ease.elasticOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ alpha: 1, scaleX: scaleX, scaleY: scaleY, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 600, egret.Ease.elasticOut);
                    break;
                case 3:
                    panel.x = -popUpWidth;
                    if (backFun)
                        egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut);
                    break;
                case 4:
                    panel.x = popUpWidth;
                    if (backFun)
                        egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut);
                    break;
                case 5:
                    panel.y = -popUpHeight;
                    if (backFun)
                        egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut);
                    break;
                case 6:
                    panel.y = popUpHeight;
                    if (backFun)
                        egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut);
                    break;
                default:
                    break;
            }
        }
        PopUpManager.addPopUp = addPopUp;
        /**
        * 移除面板方法
        * @param panel       		面板
        * @param effectType			0：没有动画 1:从中间缩小消失 2：  3：从左向右 4：从右向左 5、从上到下 6、从下到上
        * @param backFun			回调函数 用于动画的完成的后续操作
        */
        function removePopUp(panel, effectType, backFun) {
            if (effectType === void 0) { effectType = PopUpEffect.NOMAL; }
            var onComplete = function () {
                var darkPop = PopUpManager.DarkPops.first(function (v) { return v.relyPanel == panel; });
                if (darkPop == null)
                    return;
                if (GX.GameLayerManager.popLayer.contains(darkPop.darkSprite)) {
                    GX.GameLayerManager.popLayer.removeChild(darkPop.darkSprite);
                }
                PopUpManager.DarkPops.remove(darkPop);
            };
            onComplete();
            egret.Tween.removeTweens(panel); //移除动画先
            switch (effectType) {
                case 0:
                    break;
                case 1:
                    if (backFun)
                        egret.Tween.get(panel).to({ alpha: 0, scaleX: 0, scaleY: 0, x: panel.x + panel.width / 2, y: panel.y + panel.height / 2 }, 300).call(backFun);
                    else
                        egret.Tween.get(panel).to({ alpha: 0, scaleX: 0, scaleY: 0, x: panel.x + panel.width / 2, y: panel.y + panel.height / 2 }, 300);
                    break;
                case 2:
                    break;
                case 3:
                    if (backFun)
                        egret.Tween.get(panel).to({ x: panel.width }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ x: panel.width }, 300, egret.Ease.cubicOut);
                    break;
                case 4:
                    if (backFun)
                        egret.Tween.get(panel).to({ x: -panel.width }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ x: -panel.width }, 300, egret.Ease.cubicOut);
                    break;
                case 5:
                    if (backFun)
                        egret.Tween.get(panel).to({ y: panel.height }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ y: panel.height }, 300, egret.Ease.cubicOut);
                    break;
                case 6:
                    if (backFun)
                        egret.Tween.get(panel).to({ y: -panel.height }, 300, egret.Ease.cubicOut).call(backFun);
                    else
                        egret.Tween.get(panel).to({ y: -panel.height }, 300, egret.Ease.cubicOut);
                    break;
                default:
                    break;
            }
            var waitTime = 300;
            if (effectType == 0) {
                waitTime = 0;
            }
            egret.setTimeout(function () {
                if (GX.GameLayerManager.popLayer.contains(panel)) {
                    GX.GameLayerManager.popLayer.removeChild(panel);
                }
            }, this, waitTime);
        }
        PopUpManager.removePopUp = removePopUp;
    })(PopUpManager = GX.PopUpManager || (GX.PopUpManager = {}));
    /**
    * 弹出效果
    */
    (function (PopUpEffect) {
        /**
        * 没有动画
        */
        PopUpEffect[PopUpEffect["NOMAL"] = 0] = "NOMAL";
        /**
        * 从中间轻微弹出
        */
        PopUpEffect[PopUpEffect["CENTER"] = 1] = "CENTER";
        /**
        * 从中间猛烈弹出
        */
        PopUpEffect[PopUpEffect["CENTER_S"] = 2] = "CENTER_S";
        /**
        * 从左向右
        */
        PopUpEffect[PopUpEffect["LEFT"] = 3] = "LEFT";
        /**
        * 从右向左
        */
        PopUpEffect[PopUpEffect["RIGHT"] = 4] = "RIGHT";
        /**
        * 从上到下
        */
        PopUpEffect[PopUpEffect["TOP"] = 5] = "TOP";
        /**
        * 从下到上
        */
        PopUpEffect[PopUpEffect["BOTTOM"] = 6] = "BOTTOM";
    })(GX.PopUpEffect || (GX.PopUpEffect = {}));
    var PopUpEffect = GX.PopUpEffect;
})(GX || (GX = {}));
/**
* 废弃 移动至GX.removePopUp
*/
var PopUpManager;
(function (PopUpManager) {
    /**
     * 背景对象
     */
    var DarkPop = (function () {
        function DarkPop() {
        }
        return DarkPop;
    }());
    PopUpManager.DarkPop = DarkPop;
    PopUpManager.DarkPops = [];
    /**
    * 废弃 移动至GX.removePopUp
    */
    function addPopUp(panel, dark, effectType) {
        if (dark === void 0) { dark = false; }
        if (effectType === void 0) { effectType = PopUpEffect.NOMAL; }
        if (GameLayerManager.Instance.popLayer.contains(panel)) {
            return;
        }
        var popUpWidth = panel.width;
        var popUpHeight = panel.height;
        panel.scaleX = 1;
        panel.scaleY = 1;
        panel.x = 0;
        panel.y = 0;
        panel.alpha = 1;
        if (dark) {
            var darkPop = PopUpManager.DarkPops.first(function (v) { return v.relyPanel == panel; });
            if (darkPop == null) {
                darkPop = new DarkPop();
                darkPop.relyPanel = panel;
                var darkSprite = new egret.Sprite();
                darkSprite.graphics.clear();
                darkSprite.graphics.beginFill(0x000000, 0.3);
                darkSprite.graphics.drawRect(0, 0, uniLib.Global.screenWidth, uniLib.Global.screenHeight);
                darkSprite.graphics.endFill();
                darkSprite.width = uniLib.Global.screenWidth;
                darkSprite.height = uniLib.Global.screenHeight;
                darkPop.darkSprite = darkSprite;
                PopUpManager.DarkPops.push(darkPop);
            }
            if (!GameLayerManager.Instance.popLayer.contains(darkPop.darkSprite)) {
                GameLayerManager.Instance.popLayer.addChild(darkPop.darkSprite);
            }
            darkPop.darkSprite.touchEnabled = true;
            egret.Tween.get(darkPop.darkSprite).to({ alpha: 1 }, 150);
            darkPop.darkSprite.visible = true;
        }
        GameLayerManager.Instance.popLayer.addChild(panel);
        panel.x = uniLib.Global.screenWidth / 2 - popUpWidth / 2;
        panel.y = uniLib.Global.screenHeight / 2 - popUpHeight / 2;
        //以下是弹窗动画
        var leftX = uniLib.Global.screenWidth / 2 - popUpWidth / 2;
        var upY = uniLib.Global.screenHeight / 2 - popUpHeight / 2;
        egret.Tween.removeTweens(panel); //移除所有动画先
        switch (effectType) {
            case 0:
                break;
            case 1:
                panel.alpha = 0;
                panel.scaleX = 0.5;
                panel.scaleY = 0.5;
                panel.x = panel.x + popUpWidth / 4;
                panel.y = panel.y + popUpHeight / 4;
                egret.Tween.get(panel).to({ alpha: 1, scaleX: 1, scaleY: 1, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 300, egret.Ease.backOut);
                break;
            case 2:
                panel.alpha = 0;
                panel.scaleX = 0.5;
                panel.scaleY = 0.5;
                panel.x = panel.x + popUpWidth / 4;
                panel.y = panel.y + popUpHeight / 4;
                egret.Tween.get(panel).to({ alpha: 1, scaleX: 1, scaleY: 1, x: panel.x - popUpWidth / 4, y: panel.y - popUpHeight / 4 }, 600, egret.Ease.elasticOut);
                break;
            case 3:
                panel.x = -popUpWidth;
                egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut);
                break;
            case 4:
                panel.x = popUpWidth;
                egret.Tween.get(panel).to({ x: 0 }, 300, egret.Ease.cubicOut);
                break;
            case 5:
                panel.y = -popUpHeight;
                egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut);
                break;
            case 6:
                panel.y = popUpHeight;
                egret.Tween.get(panel).to({ y: 0 }, 300, egret.Ease.cubicOut);
                break;
            default:
                break;
        }
    }
    PopUpManager.addPopUp = addPopUp;
    /**
    * 废弃 移动至GX.removePopUp
    */
    function removePopUp(panel, effectType) {
        if (effectType === void 0) { effectType = PopUpEffect.NOMAL; }
        var onComplete = function () {
            var darkPop = PopUpManager.DarkPops.first(function (v) { return v.relyPanel == panel; });
            if (darkPop == null)
                return;
            if (GameLayerManager.Instance.popLayer.contains(darkPop.darkSprite)) {
                GameLayerManager.Instance.popLayer.removeChild(darkPop.darkSprite);
            }
            PopUpManager.DarkPops.remove(darkPop);
        };
        onComplete();
        egret.Tween.removeTweens(panel); //移除所有动画先
        switch (effectType) {
            case 0:
                break;
            case 1:
                egret.Tween.get(panel).to({ alpha: 0, scaleX: 0, scaleY: 0, x: panel.x + panel.width / 2, y: panel.y + panel.height / 2 }, 300);
                break;
            case 2:
                break;
            case 3:
                egret.Tween.get(panel).to({ x: panel.width }, 300, egret.Ease.cubicOut);
                break;
            case 4:
                egret.Tween.get(panel).to({ x: -panel.width }, 300, egret.Ease.cubicOut);
                break;
            case 5:
                egret.Tween.get(panel).to({ y: panel.height }, 300, egret.Ease.cubicOut);
                break;
            case 6:
                egret.Tween.get(panel).to({ y: -panel.height }, 300, egret.Ease.cubicOut);
                break;
            default:
                break;
        }
        var waitTime = 300;
        if (effectType == 0) {
            waitTime = 0;
        }
        egret.setTimeout(function () {
            if (GameLayerManager.Instance.popLayer.contains(panel)) {
                GameLayerManager.Instance.popLayer.removeChild(panel);
            }
        }, this, waitTime);
    }
    PopUpManager.removePopUp = removePopUp;
    /**
    * 废弃 移动至GX.removePopUp
    */
    (function (PopUpEffect) {
        /**
        * 没有动画
        */
        PopUpEffect[PopUpEffect["NOMAL"] = 0] = "NOMAL";
        /**
        * 从中间轻微弹出
        */
        PopUpEffect[PopUpEffect["CENTER"] = 1] = "CENTER";
        /**
        * 从中间猛烈弹出
        */
        PopUpEffect[PopUpEffect["CENTER_S"] = 2] = "CENTER_S";
        /**
        * 从左向右
        */
        PopUpEffect[PopUpEffect["LEFT"] = 3] = "LEFT";
        /**
        * 从右向左
        */
        PopUpEffect[PopUpEffect["RIGHT"] = 4] = "RIGHT";
        /**
        * 从上到下
        */
        PopUpEffect[PopUpEffect["TOP"] = 5] = "TOP";
        /**
        * 从下到上
        */
        PopUpEffect[PopUpEffect["BOTTOM"] = 6] = "BOTTOM";
    })(PopUpManager.PopUpEffect || (PopUpManager.PopUpEffect = {}));
    var PopUpEffect = PopUpManager.PopUpEffect;
})(PopUpManager || (PopUpManager = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var GX;
(function (GX) {
    /**
     * 提示
     */
    var Tips;
    (function (Tips_1) {
        /**
         * 弹窗形式的提示
         * 自定义弹出界面PopupClass   构造方法参数许一致
         * return 返回弹窗对象
         */
        function showPopup(msg, confirmFunc, cancelFunc, thisObject, cancelVisible, title, confirmLabel, cancelLabel, popUpEffect, dark) {
            if (Tips_1.PopupClass == null) {
                Tips_1.PopupClass = GX.Tips.Popup;
            }
            var tips = new Tips_1.PopupClass(msg, confirmFunc, cancelFunc, thisObject, cancelVisible, title, confirmLabel, cancelLabel);
            tips.x = (uniLib.Global.screenWidth - tips.width) / 2;
            tips.y = (uniLib.Global.screenHeight - tips.height) / 2;
            GX.PopUpManager.addPopUp(tips, dark, popUpEffect);
            return tips;
        }
        Tips_1.showPopup = showPopup;
        function tipsY() {
            return uniLib.Global.screenHeight / 2 - 120;
        }
        var tipsList = [];
        /**
         * 消息提示 显示在屏幕中央，没有操作，显示3秒后移除
         */
        function showTips(msg) {
            var tipsLastY = tipsY();
            var tipsLength = tipsList.length;
            var starY = tipsLastY - tipsLength * Tips.MinHeight;
            for (var i = 0; i < tipsLength; i++) {
                var item = tipsList[i];
                egret.Tween.get(item).to({ y: starY + Tips.MinHeight * i }, 300);
            }
            if (Tips_1.TipsClass == null) {
                Tips_1.TipsClass = GX.Tips.Tips;
            }
            var tips = new Tips_1.TipsClass(msg);
            tips.x = (uniLib.Global.screenWidth - tips.width) / 2;
            tips.y = tipsLastY;
            tipsList.push(tips);
            egret.Tween.get(tips).wait(300).call(function () {
                GX.GameLayerManager.addUIToPop(tips);
            }).wait(2000).to({ alpha: 0.5 }, 500).call(function () {
                GX.GameLayerManager.removeUI(tips);
                tipsList.remove(tips);
            });
            return tips;
        }
        Tips_1.showTips = showTips;
        var BasePopup = (function (_super) {
            __extends(BasePopup, _super);
            function BasePopup(msg, confirmFunc, cancelFunc, thisObject, cancelVisible, title, confirmLabel, cancelLabel) {
                _super.call(this);
            }
            return BasePopup;
        }(eui.Component));
        Tips_1.BasePopup = BasePopup;
        var Popup = (function (_super) {
            __extends(Popup, _super);
            function Popup(msg, confirmFunc, cancelFunc, thisObject, cancelVisible, title, confirmLabel, cancelLabel) {
                var _this = this;
                _super.call(this, msg, confirmFunc, cancelFunc, thisObject, cancelVisible, title, confirmLabel, cancelLabel);
                this.skinName = Popup.exml;
                this.titleLabel.text = title ? title : "温馨提示";
                this.msgLabel.text = msg ? msg : "";
                this.confirmFunc = confirmFunc;
                this.cancelFunc = cancelFunc;
                this.thisObject = thisObject;
                ;
                this.confirmButton.label = confirmLabel ? confirmLabel : "确定";
                this.cancelButton.label = confirmLabel ? confirmLabel : "取消";
                if (game.Language.open) {
                    this.confirmButton.label = game.Language.Translate(this.confirmButton.label);
                    this.cancelButton.label = game.Language.Translate(this.cancelButton.label);
                    this.titleLabel.text = game.Language.Translate(this.titleLabel.text);
                }
                if (!cancelVisible) {
                    this.cancelButton.parent.removeChild(this.cancelButton);
                }
                this.addUIListener();
                GX.ResManager.readCommon("common/common2.png", function (data) {
                    _this.bgImage.texture = data;
                }, this);
                GX.ResManager.readCommon("common/common3.png", function (data) {
                    _this.confirmButton.iconDisplay.texture = data;
                }, this);
                GX.ResManager.readCommon("common/common3.png", function (data) {
                    _this.cancelButton.iconDisplay.texture = data;
                }, this);
            }
            Popup.prototype.setMsgLabel = function (txt) {
                this.msgLabel.text = txt;
            };
            Popup.prototype.destroy = function () {
                this.removeUIListener();
                this.thisObject = null;
                this.cancelFunc = null;
                this.confirmFunc = null;
            };
            Popup.prototype.addUIListener = function () {
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickTap, this);
            };
            Popup.prototype.removeUIListener = function () {
                this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickTap, this);
            };
            Popup.prototype.onClickTap = function (e) {
                var target = e.target;
                if (target == this.confirmButton) {
                    this.confirmFunc && this.confirmFunc.call(this.thisObject);
                    GX.PopUpManager.removePopUp(this);
                    this.destroy();
                }
                else if (target == this.cancelButton) {
                    this.cancelFunc && this.cancelFunc.call(this.thisObject);
                    GX.PopUpManager.removePopUp(this);
                    this.destroy();
                }
            };
            Popup.exml = "\n            <?xml version='1.0' encoding='utf-8'?>\n            <e:Skin class=\"LibPopupSkin\" xmlns:e=\"http://ns.egret.com/eui\" xmlns:w=\"http://ns.egret.com/wing\">\n                <e:Image id=\"bgImage\" y=\"0\" scale9Grid=\"8,7,42,43\" x=\"0\"/>\n                <e:Label id=\"titleLabel\" textColor=\"0xFFFFFF\" size=\"36\" fontFamily=\"Arial\" wordWrap=\"false\" text=\"\u6E29\u99A8\u63D0\u793A\" textAlign=\"center\" verticalAlign=\"middle\" width=\"430\" y=\"-1\" x=\"-3\" height=\"96\"/>\n                <e:Group width=\"399\" height=\"185\" y=\"97\" anchorOffsetY=\"0\" x=\"13\">\n                    <e:Label id=\"msgLabel\" size=\"30\" width=\"338\" horizontalCenter=\"0\" verticalCenter=\"0\" textAlign=\"center\" fontFamily=\"Arial\" textColor=\"0x000000\"/>\n                </e:Group>\n                <e:Group id=\"buttonGroup\" width=\"426\" height=\"55\" y=\"301\" anchorOffsetX=\"0\" anchorOffsetY=\"0\" x=\"0\">\n                    <e:Button id=\"cancelButton\" y=\"-4\" width=\"150\" x=\"40\" scaleX=\"1\" scaleY=\"1\" label=\"\u53D6\u6D88\">\n                        <e:skinName>\n                        <e:Skin states=\"up,down,disabled\">\n                            <e:Image id=\"iconDisplay\" width=\"100%\" height=\"100%\" source=\"panel_ok\"/>\n                            <e:Label id=\"labelDisplay\" size=\"30\" horizontalCenter=\"0\" verticalCenter=\"0\"/>\n                        </e:Skin>\n                        </e:skinName>\n                    </e:Button>\n                    <e:Button id=\"confirmButton\" label=\"\u786E\u5B9A\" y=\"19.5\" width=\"150\" x=\"235\" scaleX=\"1\" scaleY=\"1\">\n                        <e:skinName>\n                        <e:Skin states=\"up,down,disabled\">\n                            <e:Image id=\"iconDisplay\" width=\"100%\" height=\"100%\" source=\"panel_ok\"/>\n                            <e:Label id=\"labelDisplay\" size=\"30\" horizontalCenter=\"0\" verticalCenter=\"0\"/>\n                        </e:Skin>\n                        </e:skinName>\n                    </e:Button>\n                    <e:layout>\n                        <e:HorizontalLayout gap=\"100\" horizontalAlign=\"center\"/>\n                    </e:layout>\n                </e:Group>\n            </e:Skin>";
            return Popup;
        }(BasePopup));
        Tips_1.Popup = Popup;
        var Tips = (function (_super) {
            __extends(Tips, _super);
            function Tips(msg) {
                var _this = this;
                _super.call(this);
                this.touchEnabled = false;
                this.touchChildren = false;
                var image = new eui.Image;
                this.bgImage = image;
                image.minWidth = Tips.MinWidth;
                image.minHeight = Tips.MinHeight;
                this.width = Tips.MinWidth;
                this.height = Tips.MinHeight;
                this.addChild(image);
                this.label = new eui.Label();
                this.label.text = msg;
                this.addChild(this.label);
                this.label.x = (this.width - this.label.width) / 2;
                this.label.y = (this.height - this.label.height) / 2;
                GX.ResManager.readCommon("common/common1.png", function (data) {
                    image.texture = data;
                    var width = _this.label.width + 40;
                    var height = _this.label.height;
                    image.width = width > Tips.MinWidth ? width : Tips.MinWidth;
                    image.height = height > Tips.MinHeight ? height : Tips.MinHeight;
                    image.x = (_this.width - image.width) / 2;
                    image.y = (_this.height - image.height) / 2;
                }, this);
            }
            Tips.MinWidth = 400;
            Tips.MinHeight = 40;
            return Tips;
        }(egret.Sprite));
        Tips_1.Tips = Tips;
    })(Tips = GX.Tips || (GX.Tips = {}));
})(GX || (GX = {}));

// TypeScript file
var GX;
(function (GX) {
    /**
     * 工具类
     */
    var Utils = (function () {
        function Utils() {
        }
        /**
         * 返回val在规定字节长度max内的值 超出带...
         * @param  {String} string
         * @param  {number} max
         */
        Utils.GetByteString = function (val, max) {
            if (val == null)
                return;
            var returnValue = "";
            var byteValLen = 0;
            for (var i = 0; i < val.length; i++) {
                if (val[i].match(/[^\x00-\xff]/ig) != null)
                    byteValLen += 2;
                else
                    byteValLen += 1;
                if (byteValLen > max) {
                    returnValue += "...";
                    break;
                }
                returnValue += val[i];
            }
            return returnValue;
        };
        /*
        * 格式化 时间戳
        */
        Utils.FormatTime = function (time, format) {
            if (format === void 0) { format = GX.TimeFormat.ALL; }
            return GX.timestampToString(time, format);
        };
        /**
         * 十进制转换为二进制字符串
         */
        Utils.DecimalToBinaryString = function (value, length) {
            if (!value)
                return "".padLeft(length, '0');
            var bigString = "";
            while (value > 1) {
                bigString += (value % 2);
                value = Math.floor(value / 2);
            }
            bigString += value;
            var result = "";
            for (var i = bigString.length - 1; i > -1; i--) {
                result += bigString[i];
            }
            if (result.length != length) {
                result = result.padLeft(length, '0');
            }
            return result;
        };
        /**
         * 十进制转换为二进制bool型数组
         */
        Utils.DecimalToBinaryBool = function (value, length) {
            var bigString = Utils.DecimalToBinaryString(value, length);
            var result = new Array();
            for (var _i = 0, bigString_1 = bigString; _i < bigString_1.length; _i++) {
                var item = bigString_1[_i];
                if (item == "1")
                    result.push(true);
                else
                    result.push(false);
            }
            return result;
        };
        /**
         * 秒数转换为字符串
         */
        Utils.SecondsToString = function (seconds, format) {
            if (format === void 0) { format = GX.TimeFormat.MS; }
            if (seconds == null || seconds == NaN)
                return "00:00";
            if (format == GX.TimeFormat.MS) {
                var m = (Math.floor(seconds / 60) + "").padLeft(2, '0');
                var s = (Math.floor(seconds % 60) + "").padLeft(2, '0');
                return m + ":" + s;
            }
            else if (format == GX.TimeFormat.HMS) {
                var h = Math.floor(seconds / 3600); //;
                seconds -= (h * 3600);
                var m = Math.floor(seconds / 60);
                var s = seconds - (m * 60);
                return (h + "").padLeft(2, '0') + ":" + (m + "").padLeft(2, '0') + ":" + (s + "").padLeft(2, '0');
            }
            return;
        };
        /**
         * BitmapData转换为具有RESStyle风格的Texture
         */
        Utils.getStyleTextureBuyBitmapData = function (bitmap, style) {
            if (style === void 0) { style = GX.RESStyle.Rect; }
            if (!bitmap) {
                return;
            }
            if (style == GX.RESStyle.Rect)
                return bitmap;
            var width = bitmap.width;
            var height = bitmap.height;
            var min = width > height ? height : width;
            var display = new egret.DisplayObjectContainer();
            var texture = new egret.Texture();
            texture.bitmapData = bitmap;
            var image = new egret.Bitmap(texture);
            display.addChild(image);
            var circle = new egret.Shape();
            circle.graphics.beginFill(0x0000ff);
            image.mask = circle;
            display.addChild(circle);
            circle.touchEnabled = false;
            var renderTexture = new egret.RenderTexture();
            if (style == GX.RESStyle.Circular) {
                circle.graphics.drawCircle(width / 2, height / 2, min / 2);
                circle.graphics.endFill();
                renderTexture.drawToTexture(display, new egret.Rectangle((width - min) / 2, (height - min) / 2, min, min));
            }
            else if (style == GX.RESStyle.RoundRect) {
                circle.graphics.drawRoundRect(0, 0, width, height, width / 5, height / 5);
                circle.graphics.endFill();
                renderTexture.drawToTexture(display, new egret.Rectangle(0, 0, width, height));
            }
            return renderTexture;
        };
        /**
         * 本地配置资源转换为具有RESStyle风格的Texture
         */
        Utils.getStyleTexture = function (key, style) {
            if (style === void 0) { style = GX.RESStyle.Rect; }
            var data = RES.getRes(key);
            return this.getStyleTextureBuyBitmapData(data);
        };
        /**
         * 异步加载本地配置资源转换为具有RESStyle风格的Texture
         */
        Utils.getStyleTextureAsync = function (key, loadComplete, thisObject, style) {
            var _this = this;
            if (style === void 0) { style = GX.RESStyle.Rect; }
            if (!RES.hasRes(key)) {
                return;
            }
            RES.getResAsync(key, function (data, url) {
                loadComplete.call(thisObject, _this.getStyleTextureBuyBitmapData(data), key);
            }, this);
        };
        return Utils;
    }());
    GX.Utils = Utils;
})(GX || (GX = {}));

// TypeScript file
var game;
(function (game) {
    var BankerData = (function () {
        function BankerData() {
            this.cardChanged = new GX.MulticastEvent();
            this.cardKeyChange = new GX.MulticastEvent();
            this.bankerChanged = new GX.MulticastEvent();
            this.multipleChanged = new GX.MulticastEvent();
        }
        Object.defineProperty(BankerData, "Instance", {
            get: function () {
                if (this.m_Instance == null) {
                    this.m_Instance = new BankerData();
                }
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        BankerData.clearInstance = function () {
            this.m_Instance = null;
        };
        Object.defineProperty(BankerData.prototype, "cardList", {
            get: function () {
                return this.m_cardList;
            },
            set: function (v) {
                if (!v || !(v instanceof Array))
                    return;
                this.m_cardList = v;
                this.cardChanged.call();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BankerData.prototype, "cardType", {
            get: function () {
                return this.m_cardType;
            },
            set: function (v) {
                this.m_cardType = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BankerData.prototype, "cardKey", {
            get: function () {
                return this.m_cardKey;
            },
            set: function (value) {
                if (!value || !(value instanceof Array)) {
                    this.m_cardKey = null;
                }
                this.m_cardKey = value;
                this.cardKeyChange.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BankerData.prototype, "banker", {
            get: function () {
                return this._banker;
            },
            set: function (value) {
                this._banker = value;
                this.bankerChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BankerData.prototype, "multiple", {
            get: function () {
                return this.m_multiple;
            },
            set: function (v) {
                this.m_multiple = v;
                this.multipleChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        return BankerData;
    }());
    game.BankerData = BankerData;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * gameLib配置
     */
    var Config = (function () {
        function Config() {
        }
        /**
         * 交互音效
         */
        Config.InteractiveSoundName = null;
        /**
         * 是否开格式话名字
         */
        Config.IsFormatName = true;
        /**
         * 游戏座位数量
         */
        Config.GameSeatNumber = null;
        /**
         * 是否是有座位概念的游戏
         */
        Config.SeatGame = true;
        /**
         * 超时退出房间倒计时时间
         */
        Config.BetTimeout = 0;
        /**
         * 公共金币字体
         */
        Config.PublicGoldFont = null;
        return Config;
    }());
    game.Config = Config;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 自定义数据 全局存储
     */
    var CustomData = (function () {
        function CustomData() {
        }
        CustomData.setData = function (key, data) {
            return this.customData[key] = data;
        };
        CustomData.getData = function (key) {
            return this.customData[key];
        };
        CustomData.clearData = function (key) {
            delete this.customData[key];
        };
        CustomData.clearAll = function (key) {
            this.customData = {};
        };
        Object.defineProperty(CustomData, "tagList", {
            get: function () {
                return this._tagList;
            },
            set: function (list) {
                this._tagList = list;
            },
            enumerable: true,
            configurable: true
        });
        CustomData.customData = {};
        /**收藏牌谱id */
        CustomData.collectionList = [];
        return CustomData;
    }());
    game.CustomData = CustomData;
    var CustomData;
    (function (CustomData) {
        /**
         * 总结算
         */
        CustomData.FinalResult = "FinalResult";
        /**
         * 商店
         */
        CustomData.ShopPanel = "ShopPanel";
        /**
         * 牌局回放
         */
        CustomData.PlaybackPanel = "PlaybackPanel";
    })(CustomData = game.CustomData || (game.CustomData = {}));
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 扑克公共数据
     */
    var PokerFunction = (function () {
        function PokerFunction() {
        }
        Object.defineProperty(PokerFunction, "MainSeat", {
            /**
             * 获取主角服座位数据
             */
            get: function () {
                return PokerFunction.GetSeatDataByUid(uniLib.NetMgr.UID);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PokerFunction, "MainSeatId", {
            /**
             * 获取主角服务器座位ID
             */
            get: function () {
                var seatList = game.RoomData.Instance.seatList;
                var mySeat = seatList.first(function (v) { return (v.user && v.user.uid == uniLib.NetMgr.UID); });
                if (mySeat == null)
                    return null;
                return mySeat.seatId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取座位数据
         */
        PokerFunction.GetSeatDataByUid = function (uid) {
            var seatList = game.RoomData.Instance.seatList;
            return seatList.first(function (v) { return (v.user && v.user.uid == uid); });
        };
        /**
        * 通过座位号获取座位数据
        */
        PokerFunction.GetSeatDataBySeatId = function (seatId) {
            var seatList = game.RoomData.Instance.seatList;
            return seatList.first(function (v) { return (v.seatId == seatId); });
        };
        /**
        * 获取座位中角色数据数据通过座位号
        */
        PokerFunction.GetUserInfoBySeatId = function (seatId) {
            if (seatId == null)
                return null;
            var seatList = game.RoomData.Instance.seatList;
            var seatData = seatList.first(function (v) { return (v.seatId == seatId); });
            return seatData == null ? null : seatData.user;
        };
        /**
         * 获取座位中角色数据通过uid  不区分是否在座位
         */
        PokerFunction.GetUserInfoByUid = function (uid) {
            var seatdata = PokerFunction.GetSeatDataByUid(uid);
            return seatdata == null ? game.RoomData.Instance.audienceList.first(function (v) { return v.uid == uid; }) : seatdata.user;
        };
        /**
          *废弃
          * GetUserInfoByUid
          */
        PokerFunction.GetAudienceByUid = function (uid) {
            return this.GetUserInfoByUid(uid);
        };
        /**
        * 废弃
        * GetUserInfoByUid
        */
        PokerFunction.GetUserByUid = function (uid) {
            return this.GetUserInfoByUid(uid);
        };
        Object.defineProperty(PokerFunction, "MainUser", {
            /**
            * 获取主角信息 不区分是否在座位
            */
            get: function () {
                var uid = uniLib.NetMgr.UID;
                var seatdata = PokerFunction.GetSeatDataByUid(uid);
                return seatdata == null ? PokerFunction.GetAudienceByUid(uid) : seatdata.user;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 指定玩家是否坐下
         */
        PokerFunction.IsSitDown = function (uid) {
            var user = PokerFunction.GetUserInfoByUid(uid);
            return user ? true : false;
        };
        Object.defineProperty(PokerFunction, "IsSitDownMain", {
            /**
             * 主角是否坐下
             */
            get: function () {
                return PokerFunction.IsSitDown(uniLib.NetMgr.UID);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PokerFunction, "BankerUid", {
            /**
             * 获取庄家uid
             */
            get: function () {
                var banker = game.BankerData.Instance.banker;
                return banker ? banker.uid : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 发送协议
         */
        PokerFunction.tcpSend = function (data) {
            GX.PokerEvent.Instance.tcpSendEvent.call(data);
            if (!game.PokerData.isStandAlone && game.RoomInfo.getInstance().video != 1) {
                var ws = uniLib.NetMgr.ws;
                if (ws && ws.isConnected) {
                    uniLib.NetMgr.tcpSend(data);
                }
                var type = data.GetType();
                if (type == "Cmd.ClientEchoRoomCmd_SC" || type == "Cmd.PlayCardCmd_CS") {
                    uniLib.Global.lastPingUpTimestamp = Date.now();
                }
                else if (type == "Cmd.BetRoomCmd_CS") {
                    if (Cmd.betTimeoutTipsPanel) {
                        Cmd.betTimeoutTipsPanel.close();
                    }
                    var level_1 = game.RoomData.Instance.level;
                    var roomConfigList = RES.getRes("TableBaseRuleConfigList_json");
                    if (roomConfigList == null)
                        return;
                    var config = roomConfigList.first(function (v) { return v.level == level_1; });
                    if (config == null)
                        return;
                    var chips = data.bet ? data.bet.chips : null;
                    if (chips == null)
                        return;
                    var gold = config.betPointList[chips - 1];
                    var mainUser = game.PokerFunction.MainUser;
                    if (mainUser == null)
                        return;
                    if (gold > mainUser.point) {
                        uniLib.Global.dispatchEvent(uniLib.CustomEvent.Auto_BuyGold, { type: 1, value: gold });
                    }
                }
            }
        };
        /**
         * 退出游戏
         * 废弃移动至game.GameFunction
         */
        PokerFunction.exitGame = function () {
            game.GameFunction.exitGame();
        };
        /*
       * 废弃移动至GX.Utils
       */
        PokerFunction.FormatTime = function (time) {
            return GX.Utils.FormatTime(time);
        };
        /**
         * 废弃移动至GX.Utils
         */
        PokerFunction.BitToString = function (value, length) {
            return GX.Utils.DecimalToBinaryString(value, length);
        };
        /**
         *废弃移动至GX.Utils
         */
        PokerFunction.BitToArray = function (value, length) {
            return GX.Utils.DecimalToBinaryBool(value, length);
        };
        return PokerFunction;
    }());
    game.PokerFunction = PokerFunction;
})(game || (game = {}));

// TypeScript file
var game;
(function (game) {
    /**
     * 天、低、玄、黄
     */
    var DoorData = (function () {
        function DoorData(id) {
            this.chipsSumChanged = new GX.MulticastEvent();
            this.chipsMainChanged = new GX.MulticastEvent();
            this.playMainAnimation = new GX.MulticastEvent();
            this.playAllAnimation = new GX.MulticastEvent();
            this.cardChanged = new GX.MulticastEvent();
            this.cardKeyChange = new GX.MulticastEvent();
            this.multipleChanged = new GX.MulticastEvent();
            this.m_doorId = id;
            this.m_chipSum = 0;
            this.m_chipMain = 0;
        }
        Object.defineProperty(DoorData.prototype, "doorId", {
            get: function () {
                return this.m_doorId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "chipSum", {
            get: function () {
                return this.m_chipSum = null ? 0 : this.m_chipSum;
            },
            set: function (v) {
                v = v == null ? 0 : v;
                this.m_chipSum = v;
                this.chipsSumChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "chipMain", {
            get: function () {
                return this.m_chipMain == null ? 0 : this.m_chipMain;
            },
            set: function (v) {
                v = v == null ? 0 : v;
                this.m_chipMain = v;
                this.chipsMainChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "cardList", {
            get: function () {
                return this.m_cardList;
            },
            set: function (v) {
                if (!v || !(v instanceof Array))
                    return;
                this.m_cardList = v;
                this.cardChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "cardKey", {
            get: function () {
                return this.m_cardKey;
            },
            set: function (value) {
                if (!value || !(value instanceof Array)) {
                    this.m_cardKey = null;
                }
                this.m_cardKey = value;
                this.cardKeyChange.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "cardType", {
            get: function () {
                return this.m_cardType;
            },
            set: function (v) {
                this.m_cardType = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DoorData.prototype, "multiple", {
            get: function () {
                return this.m_multiple;
            },
            set: function (v) {
                this.m_multiple = v;
                this.multipleChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        return DoorData;
    }());
    game.DoorData = DoorData;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 牌型转换为字符串
     */
    function cardTypeToString(value) {
        if (value == Cmd.CardSetType.CardSetType_TexasHighCard) {
            return "高牌";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasOnePair) {
            return "一对";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasTwoPairs) {
            return "两对";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasThreeOfKind) {
            return "三条";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasStraight) {
            return "顺子";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasFlush) {
            return "同花";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasFullHouse) {
            return "葫芦";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasFourOfKind) {
            return "四条";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasStraightFlush) {
            return "同花顺";
        }
        else if (value == Cmd.CardSetType.CardSetType_TexasRoyalFlush) {
            return "皇家同花顺";
        }
        return "";
    }
    game.cardTypeToString = cardTypeToString;
    /**
    * 操作类型对应的资源名
    */
    function opetrateToString(opType) {
        if (opType == Cmd.Operation.Allin) {
            return "ALL";
        }
        else if (opType == Cmd.Operation.Raise) {
            return "R";
        }
        else if (opType == Cmd.Operation.Check) {
            return "C";
        }
        else if (opType == Cmd.Operation.Fold) {
            return "F";
        }
        else if (opType == Cmd.Operation.Call) {
            return "X";
        }
        else if (opType == Cmd.Operation.SmallBlind) {
            return "SB";
        }
        else if (opType == Cmd.Operation.BigBlind) {
            return "BB";
        }
    }
    game.opetrateToString = opetrateToString;
    /**
    * 游戏id
    */
    function GameId() {
        var gameid = game.DataCache && game.DataCache.gameInfo ? game.DataCache.gameInfo.gameId : null;
        if (gameid)
            return gameid;
        if (uniLib.Global.isH5) {
            var gameid_1 = uniLib.BrowersUtils.GetRequest("gameid");
            if (gameid_1 && gameid_1 != "")
                return Number(gameid_1);
        }
        var config = RES.getRes("config_json");
        gameid = config ? config.GameID : null;
        return gameid;
    }
    game.GameId = GameId;
    /**
     * 设置eui.BitmapLabel字体为公共字体，如找不到公共字体则设置为font字体
     */
    function SetPublicFont(label, font) {
        if (label == null)
            return;
        var publicGoldFont = game.Config.PublicGoldFont;
        if (publicGoldFont) {
            label.font = publicGoldFont;
        }
        else if (font) {
            label.font = font;
        }
    }
    game.SetPublicFont = SetPublicFont;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 玩法列表
     */
    var PlayList = (function () {
        function PlayList() {
        }
        Object.defineProperty(PlayList, "Instance", {
            get: function () {
                if (this.m_Instance == null) {
                    this.m_Instance = new PlayList();
                }
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        PlayList.clearInstance = function () {
            this.m_Instance = null;
        };
        Object.defineProperty(PlayList.prototype, "playList", {
            get: function () {
                return this.m_playList;
            },
            set: function (list) {
                this.m_playList = list && list instanceof Array ? list : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "smallblind", {
            get: function () {
                return PlayList.getSmallblind(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "seatNum", {
            get: function () {
                return PlayList.getSeatNum(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "ante", {
            get: function () {
                return PlayList.getAnte(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "blindLength", {
            get: function () {
                return PlayList.getBlindLength(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "startChips", {
            get: function () {
                return PlayList.getStartChips(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "speed", {
            get: function () {
                return PlayList.getSpeed(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "duration", {
            get: function () {
                return PlayList.getDuration(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "clubId", {
            get: function () {
                return PlayList.getClubId(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "entryFee", {
            get: function () {
                return PlayList.getEntryFee(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "regulation", {
            get: function () {
                return PlayList.getRegulation(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "insurance", {
            get: function () {
                return PlayList.getInsurance(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "controlEntry", {
            get: function () {
                return PlayList.getControlEntry(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "forceBlind", {
            get: function () {
                return PlayList.getForceBlind(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "GPS", {
            get: function () {
                return PlayList.getGPS(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "iPEnter", {
            get: function () {
                return PlayList.getIPEnter(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlayList.prototype, "controlSignUp", {
            get: function () {
                return PlayList.getControlSignUp(this.m_playList);
            },
            enumerable: true,
            configurable: true
        });
        PlayList.getSmallblind = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Smallblind; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getSeatNum = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.SeatNum; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getAnte = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Ante; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getBlindLength = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.BlindLength; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getStartChips = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.StartChips; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getSpeed = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Speed; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getDuration = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Duration; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getClubId = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.ClubId; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getEntryFee = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.EntryFee; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getRegulation = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Regulation; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getInsurance = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.Insurance; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getControlEntry = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.ControlEntry; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getForceBlind = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.ForceBlind; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getGPS = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.GPS; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getIPEnter = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.IPEnter; });
            if (item == null)
                return;
            return item.value;
        };
        PlayList.getControlSignUp = function (play) {
            if (play == null || !(play instanceof Array))
                return;
            var item = play.first(function (v) { return v.id == Cmd.Playing.PlayId.ControlSignUp; });
            if (item == null)
                return;
            return item.value;
        };
        return PlayList;
    }());
    game.PlayList = PlayList;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 房间主要数据
     */
    var RoomData = (function () {
        function RoomData() {
            /**
             * true 叫地主 false 抢地主
             */
            this.m_callOrRob = false;
            //#region 座位数据
            this.m_seatList = new Array();
            this.addSeatChanged = new GX.MulticastEvent();
            this.delectSeatChanged = new GX.MulticastEvent();
            /**
             * 删除的座位数据
             */
            this.delectedSeatData = [];
            this.roomIdChanged = new GX.MulticastEvent();
            this.roomTypeChange = new GX.MulticastEvent();
            // #region 是否开始游戏 
            this.m_startGame = false;
            this.startGameChanged = new GX.MulticastEvent();
            //#endregion
            this.m_isEnableRound = false;
            this.isEnableRoundChanged = new GX.MulticastEvent();
            this.ownerIdChanged = new GX.MulticastEvent();
            this.operateChanged = new GX.MulticastEvent();
            this.robLordOperateChanged = new GX.MulticastEvent();
            this.kickOperateChanged = new GX.MulticastEvent();
            this.landlordChanged = new GX.MulticastEvent();
            this.threeCardChanged = new GX.MulticastEvent();
            this.multipleChanged = new GX.MulticastEvent();
            this.seatMultipleUpdate = new GX.MulticastEvent();
            this.pointBaseChanged = new GX.MulticastEvent();
            this.inningsChanged = new GX.MulticastEvent();
            /**
             * 没有的座位的角色
             */
            this.m_audienceList = [];
            this.addAudienceEvent = new GX.MulticastEvent();
            this.removeAudienceEvent = new GX.MulticastEvent();
            /**
             * 主角座位数据改变
             * 第一个参数  game.USerSeatState
             */
            this.MainSeatChanged = new GX.MulticastEvent();
            /**
             * 等待的上庄列表
             */
            this.m_bankerWait = [];
            this.bankerWaitChanged = new GX.MulticastEvent();
            this.roundWinLoseChanged = new GX.MulticastEvent();
            this.betMaxChanged = new GX.MulticastEvent();
            this.roomLevelChanged = new GX.MulticastEvent();
            /**房间人数 */
            this.playerNumber = 3;
            this.matchidChanged = new GX.MulticastEvent();
            this.maxuserNbrChanged = new GX.MulticastEvent();
            /**
             * 不可三带对（斗地主玩法）
             */
            this.noThreeAttachDouble = false;
            this.cardNoteVisible = false;
            this.propsEvent = new GX.MulticastEvent();
            this.pointLimitChangeHandle = new GX.MulticastEvent();
            /**
             * 房间玩法属性
             */
            this.roomPlayProps = [];
            this.leftCardChangeHandel = new GX.MulticastEvent();
            /**喜分改变事件 */
            this.happyPointChange = new GX.MulticastEvent();
            /**锅底分改变事件 */
            this.tabPointChange = new GX.MulticastEvent();
            /**断线重连锅底分 */
            this.relogTabPointsEvent = new GX.MulticastEvent();
            /**房间喜分（房主抽底很红用） */
            this._happyPoint = 0;
            /**卓内所有筹码分总和 */
            this._tabPoints = 0;
            this.startGameOpIdChange = new GX.MulticastEvent();
            this.betDataChange = new GX.MulticastEvent();
            this.betMeDataChange = new GX.MulticastEvent();
            this.bottomPointChange = new GX.MulticastEvent();
            this.smallBlindChange = new GX.MulticastEvent();
            this.blindLeftSecChange = new GX.MulticastEvent();
            /**牌堆数量变化 */
            this.lastCardNumChanged = new GX.MulticastEvent();
            /**池底分改变事件*/
            this.chipPoolNumChanged = new GX.MulticastEvent();
            this.straddleIdChange = new GX.MulticastEvent();
            if (!game.PokerFunction.handCardSort) {
                game.PokerFunction.handCardSort = function (cardList) {
                    return cardList.sort(function (a, b) { return b - a; });
                };
            }
            /**
             * 兼容处理
             */
            game.GameFunction.listenerEnterRoom();
        }
        Object.defineProperty(RoomData, "Instance", {
            get: function () {
                if (this.m_Instance == null) {
                    this.m_Instance = new RoomData();
                }
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        RoomData.clearInstance = function () {
            this.m_Instance = null;
        };
        Object.defineProperty(RoomData.prototype, "callOrRob", {
            get: function () {
                return this.m_callOrRob;
            },
            set: function (b) {
                this.m_callOrRob = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "seatList", {
            get: function () {
                return this.m_seatList;
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.clearSeatList = function () {
            for (var _i = 0, _a = this.m_seatList; _i < _a.length; _i++) {
                var item = _a[_i];
                item.clearHandCard();
                item.isReady = false;
                this.delectSeatChanged.call(item.seatId);
            }
            this.m_seatList.clear();
        };
        RoomData.prototype.addSeat = function (seat) {
            this.m_seatList.push(seat);
            this.addSeatChanged.call(seat);
        };
        RoomData.prototype.delectSeat = function (seatId) {
            var seatdata = this.m_seatList.first(function (v) { return v.seatId == seatId; });
            if (!seatdata) {
                return;
            }
            seatdata.clearHandCard();
            seatdata.isReady = false;
            this.delectSeatChanged.call(seatId);
            this.m_seatList.deletefirst(function (v) { return v.seatId == seatId; });
        };
        Object.defineProperty(RoomData.prototype, "roomId", {
            get: function () {
                return this.m_roomId;
            },
            set: function (v) {
                this.m_roomId = v;
                this.roomIdChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "roomType", {
            get: function () {
                return this.m_roomType;
            },
            set: function (value) {
                this.m_roomType = value;
                this.roomTypeChange.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "startGame", {
            get: function () {
                return this.m_startGame;
            },
            /**
             * 用于开始游戏标志，没有关闭状态
             */
            set: function (v) {
                this.m_startGame = v;
                this.startGameChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "isEnableRound", {
            get: function () {
                return this.m_isEnableRound;
            },
            /**
             * 牌局是否启动  房主是否点击开始游戏
             */
            set: function (v) {
                this.m_isEnableRound = v;
                this.isEnableRoundChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "ownerId", {
            get: function () {
                return this.m_ownerId;
            },
            set: function (value) {
                this.m_ownerId = value;
                this.ownerIdChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "operate", {
            get: function () {
                return this.m_operate;
            },
            set: function (value) {
                this.m_operate = value;
                this.operateChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "operateSeatId", {
            /**
             * 当前操作 座位号
             */
            get: function () {
                if (this.operate == null)
                    return null;
                var seatData = game.PokerFunction.GetSeatDataByUid(this.operate.uid);
                return seatData == null ? null : seatData.seatId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "operateUid", {
            /**
             * 当前操作 uid
             */
            get: function () {
                return this.operate == null ? null : this.operate.uid;
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.setbottomCard = function (v, updataType, num) {
            if (updataType === void 0) { updataType = game.UpdataType.UPDATA; }
            v = v && v instanceof Array ? v : [];
            this.m_bottomCard = v;
            GX.PokerEvent.Instance.bottomCardUpdate.call(v, updataType, num);
        };
        Object.defineProperty(RoomData.prototype, "bottomCard", {
            get: function () {
                return this.m_bottomCard;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "robLordOperate", {
            get: function () {
                return this.m_robLordOperate;
            },
            set: function (value) {
                this.m_robLordOperate = value;
                this.robLordOperateChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "robLordOperateUid", {
            /**
             * 抢地主当前操作 uid
             */
            get: function () {
                return this.robLordOperate == null ? null : this.robLordOperate.uid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "robLordOperateSeatId", {
            /**
             * 抢地主当前操作 座位号
             */
            get: function () {
                if (this.robLordOperate == null)
                    return null;
                var seatData = game.PokerFunction.GetSeatDataByUid(this.robLordOperate.uid);
                return seatData == null ? null : seatData.seatId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "kickOperate", {
            get: function () {
                return this.m_kickOperate;
            },
            set: function (value) {
                this.m_kickOperate = value;
                this.kickOperateChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "landlordUid", {
            get: function () {
                return this.m_landlordUid;
            },
            set: function (uid) {
                this.m_landlordUid = uid;
                this.landlordChanged.call(uid);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "threeCard", {
            get: function () {
                return this.m_threeCard;
            },
            set: function (value) {
                this.m_threeCard = value;
                this.threeCardChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "multiple", {
            get: function () {
                return this.m_multiple;
            },
            set: function (value) {
                this.m_multiple = value;
                this.multipleChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "seatMultiple", {
            get: function () {
                return this.m_seatMultiple;
            },
            set: function (value) {
                if (!value || !(value instanceof Array)) {
                    this.m_seatMultiple = [];
                }
                this.m_seatMultiple = value;
                this.seatMultipleUpdate.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "pointBase", {
            get: function () {
                return this.m_pointBase;
            },
            set: function (value) {
                this.m_pointBase = value;
                this.pointBaseChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "roomTotalInnings", {
            get: function () {
                return this._roomTotalInnings;
            },
            set: function (value) {
                this._roomTotalInnings = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "roomCurrentInnings", {
            get: function () {
                return this._roomCurrentInnings;
            },
            set: function (value) {
                this._roomCurrentInnings = value;
                this.inningsChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.addAudience = function (user) {
            this.m_audienceList.push(user);
            this.addAudienceEvent.call(user);
        };
        RoomData.prototype.removeAudience = function (uid) {
            this.m_audienceList.removeFirst(function (v) { return v.uid == uid; });
            this.removeAudienceEvent.call(uid);
        };
        Object.defineProperty(RoomData.prototype, "audienceList", {
            get: function () {
                return this.m_audienceList;
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.clearAudienceList = function () {
            for (var _i = 0, _a = this.m_audienceList; _i < _a.length; _i++) {
                var item = _a[_i];
                this.removeAudienceEvent.call(item.uid);
            }
            this.m_audienceList.clear();
        };
        RoomData.prototype.initDoorDatas = function (door) {
            this.m_doorDatas = door;
        };
        Object.defineProperty(RoomData.prototype, "doorDatas", {
            get: function () {
                return this.m_doorDatas;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "bankerWait", {
            get: function () {
                return this.m_bankerWait;
            },
            set: function (v) {
                if (!v || !(v instanceof Array))
                    v = [];
                this.m_bankerWait = v;
                this.bankerWaitChanged.call(this.m_bankerWait);
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.addRoundWinLose = function (v) {
            if (this.m_roundWinLose == null) {
                this.m_roundWinLose = new Array();
            }
            this.m_roundWinLose.push(v);
            this.roundWinLoseChanged.call(this.m_roundWinLose);
        };
        Object.defineProperty(RoomData.prototype, "roundWinLose", {
            get: function () {
                return this.m_roundWinLose;
            },
            set: function (v) {
                if (!v || !(v instanceof Array))
                    return;
                this.m_roundWinLose = v;
                this.roundWinLoseChanged.call(this.m_roundWinLose);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "betMax", {
            get: function () {
                return this.m_betMax;
            },
            set: function (v) {
                this.m_betMax = v;
                this.betMaxChanged.call(this.m_roundWinLose);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "level", {
            get: function () {
                return this.m_level;
            },
            set: function (value) {
                this.m_level = value;
                this.roomLevelChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.setRoomProp = function (list) {
            if (!list || list.length <= 0)
                return;
            for (var i = 0; i < list.length; i++) {
                if (list[i].id == Cmd.RoomPro.RoomPro_3) {
                    this.playerNumber = list[i].value;
                }
            }
        };
        Object.defineProperty(RoomData.prototype, "matchid", {
            get: function () {
                return this.m_matchid;
            },
            set: function (id) {
                this.m_matchid = id;
                this.matchidChanged.call(id);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "maxuserNbr", {
            get: function () {
                return this.m_maxuserNbr;
            },
            set: function (value) {
                this.m_maxuserNbr = value;
                this.maxuserNbrChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.setRoomPlayProps = function (list) {
            if (!list || !(list instanceof Array) || list.length <= 0)
                return;
            this.roomPlayProps.clear();
            this.roomPlayProps = list;
            this.noThreeAttachDouble = list.seek(function (v) { return v == 10252; });
            this.propsEvent.call(this.roomPlayProps);
        };
        /**所有玩法id 转换desc */
        RoomData.prototype.getPlayTypeByList = function () {
            if (!RES.hasRes("TablePlayTypeList_json"))
                return [];
            var str = [];
            var desc = "";
            game.RoomInfo.getInstance().isTip = false;
            //
            if (!this.roomPlayProps || !this.roomPlayProps.length || this.roomPlayProps.length == 0) {
                this.roomPlayProps = [];
            }
            this.roomPlayProps.sort(function (a, b) {
                if (a > b)
                    return 1;
                else if (a == b)
                    return 0;
                return -1;
            });
            for (var i = 0; i < this.roomPlayProps.length; i++) {
                var name_1 = table.TablePlayTypeList.getPlayTypeDes(this.roomPlayProps[i]);
                desc = desc + name_1 + "   ";
                str.push(name_1);
            }
            game.RoomInfo.getInstance().roomDesc = desc;
            return str;
        };
        Object.defineProperty(RoomData.prototype, "pointLimit", {
            get: function () {
                return this._pointLimit;
            },
            set: function (v) {
                this._pointLimit = v;
                this.pointLimitChangeHandle.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "leftCardList", {
            get: function () {
                return this._leftCardList;
            },
            set: function (value) {
                value = value && value instanceof Array ? value : [];
                if (!this._leftCardList) {
                    this._leftCardList = new Array();
                }
                this._leftCardList = value;
                this.leftCardChangeHandel.call(value);
            },
            enumerable: true,
            configurable: true
        });
        RoomData.prototype.removeLeftCard = function (list) {
            if (!this.leftCardList)
                return;
            if (list.length == 0 || list == null)
                return;
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var item = list_1[_i];
                var record = this.leftCardList.first(function (v) { return v == item; });
                if (record != null) {
                    this.leftCardList.remove(record);
                }
            }
            this.leftCardChangeHandel.call(this.leftCardList);
        };
        Object.defineProperty(RoomData.prototype, "happyPoint", {
            /**
             *获取房间喜分
             */
            get: function () {
                return this._happyPoint;
            },
            /**设置喜分 */
            set: function (point) {
                if (point != null && point != NaN) {
                    this._happyPoint += point;
                    this.happyPointChange.call(point);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "tabPoints", {
            /** 获取卓内锅底分*/
            get: function () {
                return this._tabPoints;
            },
            // /**设置卓内锅底分 */
            set: function (point) {
                if (point != null && point != NaN) {
                    this._tabPoints = point;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "startGameOpId", {
            get: function () {
                return this._startGameOpId;
            },
            set: function (v) {
                this._startGameOpId = v;
                this.startGameOpIdChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "betData", {
            get: function () {
                return this._betData;
            },
            set: function (v) {
                this._betData = v;
                this.betDataChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "betMeData", {
            get: function () {
                return this._betMeData;
            },
            set: function (v) {
                if (!this._betMeData) {
                    this._betMeData = new Cmd.BetData();
                }
                this._betMeData = v;
                this.betMeDataChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "stateList", {
            get: function () {
                return this._stateList;
            },
            set: function (v) {
                this._stateList = v;
                this.isEnableRound = v.seek(function (v) { return v == Cmd.GameState.State_RoundEnable; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "bottomPoint", {
            get: function () {
                return this._bottomPoint;
            },
            set: function (value) {
                this._bottomPoint = value;
                this.bottomPointChange.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "smallBlind", {
            get: function () {
                return this.m_smallBlind;
            },
            set: function (v) {
                this.m_smallBlind = v;
                this.smallBlindChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "blindLeftSec", {
            get: function () {
                return this.m_blindLeftSec;
            },
            set: function (v) {
                this.m_blindLeftSec = v;
                this.blindLeftSecChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "lastCardNum", {
            /**获取当前牌堆剩余数量 */
            get: function () {
                if (!this._lastCardNum)
                    this._lastCardNum = 0;
                return this._lastCardNum;
            },
            set: function (num) {
                if (num != null) {
                    this._lastCardNum = num;
                    this.lastCardNumChanged.call();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "chipPoolNum", {
            /**获取池底总分 */
            get: function () {
                if (!this._chipPoolNum)
                    this._chipPoolNum = 0;
                return this._chipPoolNum;
            },
            /**设置池底分 */
            set: function (chip) {
                this._chipPoolNum = chip;
                this.chipPoolNumChanged.call(chip);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RoomData.prototype, "straddleId", {
            get: function () {
                return this.m_straddleId;
            },
            set: function (v) {
                this.m_straddleId = v;
                this.straddleIdChange.call(v);
            },
            enumerable: true,
            configurable: true
        });
        return RoomData;
    }());
    game.RoomData = RoomData;
    /**
     * 抢地主操作位数据
     */
    var RobLordOperateData = (function () {
        function RobLordOperateData() {
        }
        return RobLordOperateData;
    }());
    game.RobLordOperateData = RobLordOperateData;
    /**
     * 出牌操作位数据
     */
    var OperateData = (function () {
        function OperateData() {
        }
        return OperateData;
    }());
    game.OperateData = OperateData;
    /**
     * 踢操作数据
     */
    var KickOperateData = (function () {
        function KickOperateData() {
        }
        return KickOperateData;
    }());
    game.KickOperateData = KickOperateData;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 座位数据
     */
    var SeatData = (function () {
        function SeatData(seatId) {
            this.readyChanged = new GX.MulticastEvent();
            this.userChanged = new GX.MulticastEvent();
            /**玩家置牌列表 */
            this.userPlaceCardList = new Array();
            /**玩家置牌列表变化回调 */
            this.placeCardsChanged = new GX.MulticastEvent();
            /**
             *手牌
             */
            this.handCardList = new Array();
            this.addHandCardEvent = new GX.MulticastEvent();
            this.delectHandCardEvent = new GX.MulticastEvent();
            /**
             * 替换手牌事件
            */
            this.replaceHandCardEvent = new GX.MulticastEvent();
            /**
            * 展开手牌事件
           */
            this.showHandCardEvent = new GX.MulticastEvent();
            this.cardtypeChanged = new GX.MulticastEvent();
            this.cardKeyChanged = new GX.MulticastEvent();
            this.handCardCountChanged = new GX.MulticastEvent();
            this.catchCardNumChanged = new GX.MulticastEvent();
            this.kingNumChanged = new GX.MulticastEvent();
            /**
             * 上次出的牌
             */
            this.m_outCardList = new Array();
            this.outCardChanged = new GX.MulticastEvent();
            this.onlineChanged = new GX.MulticastEvent();
            this.seatMultipleChanged = new GX.MulticastEvent();
            /**
             * 是否在游戏中
             */
            this._isInGame = false;
            this.isInGameChanged = new GX.MulticastEvent();
            /**
             * 是否坐下
             */
            this._isSit = false;
            this.isSitChanged = new GX.MulticastEvent();
            /**点数变化事件 */
            this.seatKengPoinChanged = new GX.MulticastEvent();
            /**
             * 牌局总投注数
            */
            this.m_betCount = 0;
            this.betCountChanged = new GX.MulticastEvent();
            /**
             * 本轮投注数
            */
            this.m_curBetCount = 0;
            this.curBetCountChanged = new GX.MulticastEvent();
            this.seatOperationChanged = new GX.MulticastEvent();
            /**
             * 座位状态
             */
            this._seatStateList = new Array();
            /**座位状态更新*/
            this.seatStateListChanged = new GX.MulticastEvent();
            /**座位状态更新*/
            this.seatStateAdd = new GX.MulticastEvent();
            /**
             * 推荐出牌
             */
            this._recommendList = new Array();
            /**推荐出牌更新 */
            this.recommendListChanged = new GX.MulticastEvent();
            /**报听状态更新*/
            this.listenStatusChanged = new GX.MulticastEvent();
            /**已经报听 */
            this._listened = false;
            /**
             * 玩家弃牌
             */
            this._hasFord = false;
            this.batteryIndexChanged = new GX.MulticastEvent();
            this.lockChanged = new GX.MulticastEvent();
            this.m_seatId = seatId;
        }
        Object.defineProperty(SeatData.prototype, "seatId", {
            get: function () {
                return this.m_seatId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "isReady", {
            get: function () {
                return this.m_isReady;
            },
            set: function (b) {
                if (this.m_isReady == b) {
                    return;
                }
                this.m_isReady = b;
                this.readyChanged.call(b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "user", {
            get: function () {
                return this.m_user;
            },
            set: function (user) {
                var before = this.m_user;
                if (user == this.m_user) {
                    return;
                }
                this.m_user = user;
                this.userChanged.call(user);
                if (before && before.uid == uniLib.NetMgr.UID) {
                    game.RoomData.Instance.MainSeatChanged.call(game.USerSeatState.StandUp);
                }
                if ((user && user.uid == uniLib.NetMgr.UID)) {
                    game.RoomData.Instance.MainSeatChanged.call(game.USerSeatState.SitDown);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "placeCards", {
            /**获取玩家置牌列表 */
            get: function () {
                if (!this.userPlaceCardList)
                    this.userPlaceCardList = new Array();
                return this.userPlaceCardList;
            },
            /**设置玩家置牌列表 */
            set: function (list) {
                this.userPlaceCardList = list;
                this.placeCardsChanged.call(list);
            },
            enumerable: true,
            configurable: true
        });
        SeatData.prototype.clearHandCard = function () {
            for (var _i = 0, _a = this.handCardList; _i < _a.length; _i++) {
                var item = _a[_i];
                this.delectHandCardEvent.call(item);
            }
            this.handCardList.clear();
        };
        /**
         * 添加手牌
         */
        SeatData.prototype.addHandCard = function (cardId, type, dealCardType) {
            if (type === void 0) { type = game.CardActionType.INIT; }
            if (dealCardType === void 0) { dealCardType = null; }
            this.handCardList.push(cardId);
            this.addHandCardEvent.call(cardId, type, dealCardType);
        };
        SeatData.prototype.removedHandCard = function (cardId) {
            this.handCardList.removeFirst(function (v) { return v == cardId; });
            this.delectHandCardEvent.call(cardId);
        };
        Object.defineProperty(SeatData.prototype, "handCards", {
            get: function () {
                return this.handCardList;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 替换手牌
        */
        SeatData.prototype.replaceHandCard = function (index, cardId) {
            if (index != null && index < this.handCards.length) {
                this.handCards[index] = cardId;
                this.replaceHandCardEvent.call(index, cardId);
            }
        };
        SeatData.prototype.getCardtype = function () {
            return this.m_cardtype;
        };
        SeatData.prototype.setCardtype = function (v) {
            this.m_cardtype = v;
            this.cardtypeChanged.call();
        };
        SeatData.prototype.getCardKey = function () {
            return this.m_cardKey;
        };
        SeatData.prototype.setCardKey = function (v) {
            this.m_cardKey = v;
            this.cardKeyChanged.call();
        };
        Object.defineProperty(SeatData.prototype, "handCardSum", {
            get: function () {
                return this.m_handCardCount;
            },
            set: function (value) {
                this.m_handCardCount = value;
                this.handCardCountChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "catchCardNum", {
            get: function () {
                return this.m_catchCardNum;
            },
            set: function (value) {
                this.m_catchCardNum = value;
                this.m_handCardCount += value;
                this.catchCardNumChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "kingNum", {
            get: function () {
                return this.m_kingNum;
            },
            set: function (value) {
                this.m_kingNum = value;
                this.kingNumChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "outCardList", {
            get: function () {
                return this.m_outCardList;
            },
            set: function (outcard) {
                this.m_outCardList = outcard;
                this.outCardChanged.call(outcard);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "onlineState", {
            get: function () {
                return this.m_onlineState;
            },
            set: function (state) {
                this.m_onlineState = state;
                this.onlineChanged.call(state);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "seatMultiple", {
            get: function () {
                return this.m_multiple;
            },
            set: function (value) {
                this.m_multiple = value;
                this.seatMultipleChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "isInGame", {
            get: function () {
                return this._isInGame;
            },
            set: function (value) {
                this._isInGame = value;
                this.isInGameChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "isSit", {
            get: function () {
                return this._isSit;
            },
            set: function (value) {
                this._isSit = value;
                this.isSitChanged.call(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "KengPoint", {
            /**
             *获取当前点数（填坑）
             */
            get: function () {
                return this._kengPoints;
            },
            /**
             * 设置点数（填坑）
            */
            set: function (points) {
                if (points) {
                    this._kengPoints = points;
                    this.seatKengPoinChanged.call(points);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "betCount", {
            get: function () {
                return this.m_betCount;
            },
            set: function (bet) {
                if (bet == NaN)
                    return;
                this.m_betCount = bet;
                this.betCountChanged.call(this.m_betCount);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "curBetCount", {
            get: function () {
                return this.m_curBetCount;
            },
            set: function (count) {
                if (count == NaN)
                    return;
                this.m_curBetCount = count;
                this.curBetCountChanged.call(this.m_curBetCount);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "Operate", {
            get: function () {
                return this._operate;
            },
            set: function (v) {
                this._operate = v;
                this.seatOperationChanged.call(this._operate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "seatStateList", {
            get: function () {
                return this._seatStateList;
            },
            set: function (v) {
                v = v != null && v instanceof Array ? v : [];
                this._seatStateList = v;
                this.seatStateListChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "addSeatState", {
            get: function () {
                return this._addSeatState;
            },
            set: function (v) {
                this._addSeatState = v;
                this.seatStateAdd.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "recommendList", {
            get: function () {
                return this._recommendList;
            },
            set: function (v) {
                v = v != null && v instanceof Array ? v : [];
                this._recommendList = v;
                this.recommendListChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "listened", {
            /**获取报听状态 */
            get: function () {
                return this._listened;
            },
            set: function (bool) {
                this._listened = bool;
                this.listenStatusChanged.call(bool);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "hasFord", {
            get: function () {
                return this._hasFord;
            },
            set: function (boo) {
                this._hasFord = boo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "batteryIndex", {
            get: function () {
                return this.m_batteryIndex;
            },
            set: function (v) {
                v = v == null ? 1 : v;
                this.m_batteryIndex = v;
                this.batteryIndexChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SeatData.prototype, "lockFishId", {
            get: function () {
                return this.m_lockFishId;
            },
            enumerable: true,
            configurable: true
        });
        SeatData.prototype.setLock = function (isloCk, lockFishId) {
            this.m_lock = isloCk;
            this.m_lockFishId = lockFishId;
            this.lockChanged.call(this);
        };
        Object.defineProperty(SeatData.prototype, "lock", {
            get: function () {
                return this.m_lock;
            },
            enumerable: true,
            configurable: true
        });
        return SeatData;
    }());
    game.SeatData = SeatData;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 基础数据
     */
    var UserInfo = (function () {
        function UserInfo(uid) {
            this.headUrlChanged = new GX.MulticastEvent();
            this.nameChanged = new GX.MulticastEvent();
            this.genderChanged = new GX.MulticastEvent();
            this.pointChanged = new GX.MulticastEvent();
            this.repointChanged = new GX.MulticastEvent();
            this.diamondChanged = new GX.MulticastEvent();
            this.cutScoreChanged = new GX.MulticastEvent();
            this.cardScoreChanged = new GX.MulticastEvent();
            this.trustStateChanged = new GX.MulticastEvent();
            this.statisticsChanged = new GX.MulticastEvent();
            this.m_uid = uid;
        }
        Object.defineProperty(UserInfo.prototype, "headUrl", {
            get: function () {
                return this.m_headurl;
            },
            set: function (v) {
                this.m_headurl = v;
                this.headUrlChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "uid", {
            get: function () {
                return this.m_uid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "nickName", {
            get: function () {
                return this.m_nickName;
            },
            set: function (v) {
                this.m_nickName = game.Config.IsFormatName ? GX.Utils.GetByteString(v, 8) : v;
                this.nameChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "gender", {
            get: function () {
                return this.m_gender;
            },
            set: function (v) {
                this.m_gender = v;
                this.genderChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "point", {
            get: function () {
                return this.m_point == null ? 0 : this.m_point;
            },
            set: function (v) {
                v = v == null ? 0 : v;
                this.m_point = v;
                this.pointChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "repoint", {
            get: function () {
                return this.m_point == null ? 0 : this.m_point;
            },
            /**
            * 刷新点数
            */
            set: function (v) {
                v = v == null ? 0 : v;
                this.m_point = v;
                this.repointChanged.call(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "diamond", {
            get: function () {
                return this.m_diamond == null ? 0 : this.m_diamond;
            },
            set: function (v) {
                v = v == null ? 0 : v;
                this.m_diamond = v;
                this.diamondChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "cutScore", {
            get: function () {
                return this.m_cutScore;
            },
            set: function (v) {
                this.m_cutScore = v;
                this.cutScoreChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "cardScore", {
            get: function () {
                return this.m_cardScore;
            },
            set: function (v) {
                this.m_cardScore = v;
                this.cardScoreChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "isTrust", {
            get: function () {
                return this._isTrust;
            },
            set: function (value) {
                this._isTrust = value;
                this.trustStateChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "isInGame", {
            get: function () {
                return this.m_isInGame;
            },
            set: function (b) {
                this.m_isInGame = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "statistics", {
            get: function () {
                return this.m_statistics;
            },
            set: function (v) {
                this.m_statistics = v;
                this.statisticsChanged.call(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UserInfo.prototype, "isRobot", {
            get: function () {
                return this.m_isRobot;
            },
            set: function (b) {
                this.m_isRobot = b;
            },
            enumerable: true,
            configurable: true
        });
        UserInfo.prototype.updataInfo = function (info) {
            //this.ip = info.ip;
            this.nickName = info.name;
            this.point = info.point;
            this.gender = info.gender;
            this.diamond = info.diamond;
            this.headUrl = info.headurl;
            this.isRobot = info.isRobot;
        };
        return UserInfo;
    }());
    game.UserInfo = UserInfo;
})(game || (game = {}));

var game;
(function (game) {
    var Action = (function () {
        function Action() {
        }
        /**
         * 个人信息更新
         */
        Action.personalUpdate = new GX.MulticastEvent();
        /**
         * 排行榜
         */
        Action.rankingListEvent = new GX.MulticastEvent();
        /**
         * 开始游戏派发事件
         */
        Action.startGameCmdEvent = new GX.MulticastEvent();
        /**
         * 出鱼信息
         */
        Action.spawnFishEvent = new GX.MulticastEvent();
        /**
         * 发射子弹
         */
        Action.sendBulletEvent = new GX.MulticastEvent();
        /**
         * 打死鱼
         */
        Action.deadFishEvent = new GX.MulticastEvent();
        /**
         * 打中鱼
         */
        Action.hitFishEvent = new GX.MulticastEvent();
        /**
         * 改变场景
         */
        Action.changeSceneEvent = new GX.MulticastEvent();
        /**
         * 操作通知
         */
        Action.actionEvent = new GX.MulticastEvent();
        return Action;
    }());
    game.Action = Action;
})(game || (game = {}));
var GX;
(function (GX) {
    /**
     * 扑克不需要存储数据事件派发  替换为game.Action
     */
    var PokerEvent = (function () {
        function PokerEvent() {
            /**
             * 主角发送协议事件
             */
            this.tcpSendEvent = new GX.MulticastEvent();
            /**
             * 玩家抢地主结果通知
             */
            this.landlordRobResult = new GX.MulticastEvent();
            /**
            * 玩家叫地主结果 叫分
            */
            this.calllordRobResult = new GX.MulticastEvent();
            /**
             * 出牌通知
             */
            this.playCard = new GX.MulticastEvent();
            /**
             * 踢操作
             */
            this.kickPlay = new GX.MulticastEvent();
            /**
             * 解散房间数据更新
             */
            this.dissolveRoomUpdate = new GX.MulticastEvent();
            /**
             * 系统消息通知
             */
            this.systemMessage = new GX.MulticastEvent();
            /**
             * 离开房间
             */
            this.leaveRoom = new GX.MulticastEvent();
            /**
             * 离开房间
             */
            this.leaveRoom_Brd = new GX.MulticastEvent();
            /**
             * 单局结算
             */
            this.roundResult = new GX.MulticastEvent();
            /**
             * 发牌结束 牌初始化完成 赋值操作完成
             */
            this.dealCardEnd = new GX.MulticastEvent();
            /**
             * 发牌动画
             */
            this.dealCardAnimation = new GX.MulticastEvent();
            /**
             * 亮底牌牌动画
             */
            this.showBackCardsAnimation = new GX.MulticastEvent();
            /**
             * 三张底牌动画
             */
            this.threeCardAnimation = new GX.MulticastEvent();
            /**
             * 牌局结束通知
             */
            this.gameFinalSettle = new GX.MulticastEvent();
            /**
             * 游戏服务器逻辑时间
             */
            this.gameServerTime = new GX.MulticastEvent();
            /**
             * 换牌GM
             */
            this.gmAvailableCardUpdate = new GX.MulticastEvent();
            /**
             * 游戏状态更新
             */
            this.gameStateUpdate = new GX.MulticastEvent();
            /**
             * 庄家信息更新
             */
            this.bankerDataUpdate = new GX.MulticastEvent();
            /**
             * 显示等待下一局的提示
             */
            this.showSurrenderTipsHandle = new GX.MulticastEvent();
            /**
             * 底牌更新通知
             */
            this.bottomCardUpdate = new GX.MulticastEvent();
            /**
             * 彩票信息
             */
            this.lotteryMulticast = new GX.MulticastEvent();
            /**
             * 排名通知
             */
            this.rankUpdateMulticast = new GX.MulticastEvent();
            /**
             * 房间更新 排名数据
             */
            this.rankListMulticast = new GX.MulticastEvent();
            /**
             * 历史记录跟新
             */
            this.historyUpdate = new GX.MulticastEvent();
            /**
             * 送礼事件
             */
            this.SendGiftEvent = new GX.MulticastEvent();
            /**
             * 叫地主牌
             */
            this.callCardEvent = new GX.MulticastEvent();
            /**
             *  压住通知
             */
            this.betRoomEvent = new GX.MulticastEvent();
            /**
             * GM User列表更新
             */
            this.GmUidListUpdateEvent = new GX.MulticastEvent();
            /**
             * GM 库存数据更新
             */
            this.GmStockUpdateEvent = new GX.MulticastEvent();
            /**
             *玩家下注通知
             */
            this.userBetEvent = new GX.MulticastEvent();
            /**
             *玩家入座
             */
            this.userSeatdown = new GX.MulticastEvent();
            /**
             *通知客户端显示具体的牌
             */
            this.showCardsEvent = new GX.MulticastEvent();
            /**
             * 组成牛牛提示
             */
            this.NiuNiuTipsEvent = new GX.MulticastEvent();
            /**
             * 请求展示牌（比鸡用）填坑用来更新kengpoint
             */
            this.DisplayCardEvent = new GX.MulticastEvent();
            /**
            * 进入下一轮押注圈
            */
            this.circleEndEvent = new GX.MulticastEvent();
            /**
             * 断线重连
             */
            this.reconnecEvent = new GX.MulticastEvent();
            /**
             * 保险可购买通知
             */
            this.InsuranceNewOpEvent = new GX.MulticastEvent();
            /**
             * 保险可购买通知
             */
            this.insuranceBuyEvent = new GX.MulticastEvent();
            /**
             * 保险开始
             */
            this.insuranceStartEvent = new GX.MulticastEvent();
            /**
             * 观战更新
             */
            this.audienceUpdataEvent = new GX.MulticastEvent();
            /**
             * 房间信息更新
             */
            this.roomDataUpdateEvent = new GX.MulticastEvent();
            /**
             * 房间信息更新
             */
            this.buyBringEvent = new GX.MulticastEvent();
            /**
             * 解散房间数据更新
             */
            this.moneyUpdate = new GX.MulticastEvent();
            /**
             * 投票数据更新
             */
            this.VoteUpdate = new GX.MulticastEvent();
            /**
             * 可进行动作更新,暂用作押注筹码数值更新
             */
            this.ActionUpdate = new GX.MulticastEvent();
            /**
             * 比牌结果通知
             */
            this.compareResultEvent = new GX.MulticastEvent();
            /**
             * 德州扑克配置改变
             */
            this.texasConfigChange = new GX.MulticastEvent();
            /**
             * 德州扑克数据改变
             */
            this.texasRoundChanged = new GX.MulticastEvent();
            /**
             * 收藏牌谱验证回复
             */
            this.collectResultEvent = new GX.MulticastEvent();
            /**
             * 强制盲注跟新
             */
            this.straddleChange = new GX.MulticastEvent();
            /**
             * 玩法选项更新
             */
            this.PlayingUpdateEvent = new GX.MulticastEvent();
            /**
             * 围观人员更新
             */
            this.AudienceUpdate = new GX.MulticastEvent();
        }
        Object.defineProperty(PokerEvent, "Instance", {
            get: function () {
                if (this.m_Instance == null) {
                    this.m_Instance = new PokerEvent();
                }
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        return PokerEvent;
    }());
    GX.PokerEvent = PokerEvent;
})(GX || (GX = {}));

var uniLib;
(function (uniLib) {
    /**
     * 自定义事件类
     */
    var CustomEvent;
    (function (CustomEvent) {
        /**
         * 显示菜单栏
         */
        CustomEvent.Show_MenuPanel = "Show_MenuPanel";
        /**
         * 移除菜单栏
         */
        CustomEvent.Remove_MenuPanel = "Remove_MenuPanel";
        /**
         * 显示商城
         */
        CustomEvent.Show_MallPanel = "Show_MallPanel";
        /**
         * 菜单栏金币自动改变  参数类型{type:number,value:number} type 1.金币  2.钻石
         */
        CustomEvent.Menu_ChipsChanged = "Menu_ChipsChanged";
        /**
         * 菜单栏自动更新开关  参数类型{type:number,open:boolean} type 1.金币  2.钻石
         */
        CustomEvent.Menu_SwitchChipsAutoUpdate = "Menu_SwitchChipsAutoUpdate";
        /**
         * 自动购买金币  参数类型{type:number,value:number} type 1.金币  2.钻石
         */
        CustomEvent.Auto_BuyGold = "Auto_BuyGold";
        /**
         * 客户端结算完成  参数类型{awardPoint:number} awardPoint 获得奖励货币数量
         */
        CustomEvent.ClientSettleFinish = "ClientSettleFinish";
    })(CustomEvent = uniLib.CustomEvent || (uniLib.CustomEvent = {}));
})(uniLib || (uniLib = {}));

// TypeScript file
var game;
(function (game) {
    /**
     * 玩家站起坐下
     */
    (function (USerSeatState) {
        /**
         * 站起
         */
        USerSeatState[USerSeatState["StandUp"] = 1] = "StandUp";
        /**
         * 坐下
         */
        USerSeatState[USerSeatState["SitDown"] = 2] = "SitDown";
    })(game.USerSeatState || (game.USerSeatState = {}));
    var USerSeatState = game.USerSeatState;
})(game || (game = {}));
var game;
(function (game) {
    var PokerData = (function () {
        function PokerData() {
        }
        PokerData.clearData = function () {
            this.isStandAlone = false;
        };
        /**
         * 是否是单机模式
         */
        PokerData.isStandAlone = false;
        return PokerData;
    }());
    game.PokerData = PokerData;
    /**
     * 更新类型
     */
    (function (UpdataType) {
        /**
         * 断线重连
         */
        UpdataType[UpdataType["RECONNEC"] = 1] = "RECONNEC";
        /**
         * 更新无动画
         */
        UpdataType[UpdataType["UPDATA"] = 4] = "UPDATA";
    })(game.UpdataType || (game.UpdataType = {}));
    var UpdataType = game.UpdataType;
    /**
     * 手牌更新类型
     */
    (function (CardActionType) {
        /**
         * 初始化手牌
         */
        CardActionType[CardActionType["INIT"] = 1] = "INIT";
        /**
         * 追加
         */
        CardActionType[CardActionType["ADD"] = 2] = "ADD";
        /**
         * 断线重连
         */
        CardActionType[CardActionType["RECONNEC"] = 3] = "RECONNEC";
    })(game.CardActionType || (game.CardActionType = {}));
    var CardActionType = game.CardActionType;
    /**
     * 操作类型
     */
    (function (OperationType) {
        /**
         * 第一手牌
         */
        OperationType[OperationType["FirstHand"] = 0] = "FirstHand";
        /**
         * 要不起
         */
        OperationType[OperationType["PassOnly"] = 1] = "PassOnly";
        /**
         * 要的起
         */
        OperationType[OperationType["Play"] = 2] = "Play";
    })(game.OperationType || (game.OperationType = {}));
    var OperationType = game.OperationType;
    /**
     * 牌型
     */
    (function (CardType) {
        /**
         * 无出牌
         */
        CardType[CardType["Error_Card"] = 100] = "Error_Card";
        /**
         * 单牌
         */
        CardType[CardType["Single_Card"] = 1] = "Single_Card";
        /**
         * 对子
         */
        CardType[CardType["Double_Card"] = 2] = "Double_Card";
        /**
         * 三张
         */
        CardType[CardType["Three_Card"] = 3] = "Three_Card";
        /**
         * 炸弹
         */
        CardType[CardType["Bomb_Card"] = 4] = "Bomb_Card";
        /**
         * 王炸
         */
        CardType[CardType["KingBomb_Card"] = 5] = "KingBomb_Card";
        /**
         * 三带一
         */
        CardType[CardType["ThreeOne_Card"] = 6] = "ThreeOne_Card";
        /**
         * 三代二
         */
        CardType[CardType["ThreeTwo_Card"] = 7] = "ThreeTwo_Card";
        /**
         * 四带俩单
         */
        CardType[CardType["Four_TwoSingle_Card"] = 8] = "Four_TwoSingle_Card";
        /**
         * 四带两对
         */
        CardType[CardType["Four_TwoDouble_Card"] = 9] = "Four_TwoDouble_Card";
        /**
         * 单顺
         */
        CardType[CardType["Lian_Card"] = 10] = "Lian_Card";
        /**
         * 连对
         */
        CardType[CardType["Double_Lian_Card"] = 11] = "Double_Lian_Card";
        /**
         * 飞机（两个三张连）
         */
        CardType[CardType["Feiji_Card"] = 12] = "Feiji_Card";
        /**
         * 飞机带俩单
         */
        CardType[CardType["Feiji_TwoSingle_Card"] = 13] = "Feiji_TwoSingle_Card";
        /**
         * 飞机带两对
         */
        CardType[CardType["Feiji_TwoDouble_Card"] = 14] = "Feiji_TwoDouble_Card";
    })(game.CardType || (game.CardType = {}));
    var CardType = game.CardType;
})(game || (game = {}));

var game;
(function (game) {
    var GameFunction = (function () {
        function GameFunction() {
        }
        /**
         * 启动游戏
         */
        GameFunction.startUp = function () {
            this.listenerEnterRoom();
        };
        /**
         * 监听进入游戏事件
         */
        GameFunction.listenerEnterRoom = function () {
            MJLobby.MJLobbyEventListener.getInstance().addEventListener(MJLobby.MahJongLobbyFacadeConsts.JOIN_ROOM, this.onEnterRoom, this);
            if (MJLobby.MJLobbyEventListener.getInstance().hasEventListener(MJLobby.MahJongLobbyFacadeConsts.UserChipChaned) == false)
                MJLobby.MJLobbyEventListener.getInstance().addEventListener(MJLobby.MahJongLobbyFacadeConsts.UserChipChaned, this.onUserChipChaned, this);
        };
        /**
         * 进入房间
         */
        GameFunction.onEnterRoom = function () {
            game.PokerData.LobbyScaleMode = egret.MainContext.instance.stage.scaleMode;
            game.PokerFunction.exitGame();
            game.PanelManage.destroyPanel();
        };
        GameFunction.onUserChipChaned = function (evt) {
            var rev = evt.data;
            if (rev && rev.uid) {
                var seatData = game.PokerFunction.GetSeatDataByUid(rev.uid);
                if (seatData) {
                    seatData.user.point = rev.point;
                }
            }
        };
        /**
         * 退出游戏
         */
        GameFunction.exitGame = function () {
            game.Config.GameSeatNumber = null;
            game.Config.BetTimeout = 0;
            game.Config.SeatGame = true;
            if (game.PokerData.LobbyScaleMode)
                egret.MainContext.instance.stage.scaleMode = game.PokerData.LobbyScaleMode;
            var factory = dragonBones.EgretFactory.factory;
            factory.clear();
            factory.dispose();
            if (dragonBones.EgretFactory["clock"])
                dragonBones.EgretFactory["clock"].clear();
            game.FastSitDown.destroy();
            uniLib.SoundMgr.instance.stopBgMusic();
            uniLib.SoundMgr.instance.stopSounds();
            GX.MulticastEvent.EventList.removeAllEvent();
            game.RoomData.clearInstance();
            game.GameLayer.clearInstance();
            game.PokerData.clearData();
            game.BankerData.clearInstance();
            game.PokerFunction.handCardSort = null;
            game.Timer.clearAllTimer();
            egret.Tween.removeAllTweens();
            table.deleteCache();
            game.PanelManage.destroyPanel();
        };
        return GameFunction;
    }());
    game.GameFunction = GameFunction;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 废弃  移动至GX.GameLayerManager
     */
    var GameLayer = (function () {
        function GameLayer() {
        }
        Object.defineProperty(GameLayer, "Instance", {
            get: function () {
                if (this.m_Instance == null)
                    this.m_Instance = new GameLayer();
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.clearInstance = function () {
            this.m_Instance = null;
        };
        Object.defineProperty(GameLayer.prototype, "uiLayer", {
            set: function (ui) {
                this.m_uiLayer = ui;
                this.m_uiLayer.name = "uiLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addUI = function (ui) {
            if (!this.m_uiLayer)
                return;
            this.m_uiLayer.addChild(ui);
        };
        GameLayer.prototype.removeUI = function (ui) {
            for (var i = 0; i < this.m_uiLayer.numChildren; i++) {
                if (this.m_uiLayer.getChildAt(i) == ui) {
                    this.m_uiLayer.removeChild(ui);
                    break;
                }
            }
        };
        Object.defineProperty(GameLayer.prototype, "topLayer", {
            set: function (ui) {
                this.m_topLayer = ui;
                this.m_topLayer.name = "topLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addTop = function (ui) {
            if (!this.m_topLayer)
                return;
            this.m_topLayer.addChild(ui);
        };
        GameLayer.prototype.removeTop = function (ui) {
            for (var i = 0; i < this.m_topLayer.numChildren; i++) {
                if (this.m_topLayer.getChildAt(i) == ui) {
                    this.m_topLayer.removeChild(ui);
                    break;
                }
            }
        };
        Object.defineProperty(GameLayer.prototype, "effectLayer", {
            set: function (ui) {
                this.m_effectLayer = ui;
                this.m_effectLayer.name = "effectLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addEffect = function (ui) {
            if (!this.m_effectLayer)
                return;
            this.m_effectLayer.addChild(ui);
        };
        GameLayer.prototype.removeEffect = function (ui) {
            for (var i = 0; i < this.m_effectLayer.numChildren; i++) {
                if (this.m_effectLayer.getChildAt(i) == ui) {
                    this.m_effectLayer.removeChild(ui);
                    break;
                }
            }
        };
        Object.defineProperty(GameLayer.prototype, "mainUILayer", {
            set: function (ui) {
                this.m_mainUILayer = ui;
                this.m_mainUILayer.name = "mainUILayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addMainUI = function (ui) {
            if (!this.m_mainUILayer)
                return;
            this.m_mainUILayer.addChild(ui);
        };
        GameLayer.prototype.removeMainUI = function (ui) {
            for (var i = 0; i < this.m_mainUILayer.numChildren; i++) {
                if (this.m_mainUILayer.getChildAt(i) == ui) {
                    this.m_mainUILayer.removeChild(ui);
                    break;
                }
            }
        };
        Object.defineProperty(GameLayer.prototype, "maskLayer", {
            set: function (ui) {
                this.m_maskLayer = ui;
                this.m_maskLayer.name = "maskLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addMask = function (ui) {
            if (!this.m_maskLayer)
                return;
            this.m_maskLayer.addChild(ui);
        };
        GameLayer.prototype.removeMask = function (ui) {
            for (var i = 0; i < this.m_maskLayer.numChildren; i++) {
                if (this.m_maskLayer.getChildAt(i) == ui) {
                    this.m_maskLayer.removeChild(ui);
                    break;
                }
            }
        };
        Object.defineProperty(GameLayer.prototype, "tipsLayer", {
            set: function (ui) {
                this.m_tipsLayer = ui;
                this.m_tipsLayer.name = "tipsLayer";
            },
            enumerable: true,
            configurable: true
        });
        GameLayer.prototype.addTip = function (ui) {
            if (!this.m_tipsLayer)
                return;
            this.m_tipsLayer.addChild(ui);
        };
        GameLayer.prototype.removeTip = function (ui) {
            for (var i = 0; i < this.m_tipsLayer.numChildren; i++) {
                if (this.m_tipsLayer.getChildAt(i) == ui) {
                    this.m_tipsLayer.removeChild(ui);
                    break;
                }
            }
        };
        GameLayer.prototype.destory = function () {
        };
        return GameLayer;
    }());
    game.GameLayer = GameLayer;
})(game || (game = {}));

var game;
(function (game) {
    var GameTime = (function () {
        function GameTime() {
        }
        /**
         * 游戏服务器时间
         */
        GameTime.serverNow = function () {
            return Date.now() - this.offset;
        };
        GameTime.serverUnixStamp = function () {
            return Math.floor(this.serverNow());
        };
        /**
         * 游戏本地时间
         */
        GameTime.localNow = function () {
            return Date.now();
        };
        GameTime.localUnixStamp = function () {
            return Math.floor(this.localNow());
        };
        GameTime.responseSync = function (stamp) {
            this.offset = Date.now() - stamp;
        };
        /**
         * 刷新时间补偿
         */
        GameTime.rquestSync = function () {
            var cmd = new Cmd.GameTimeSyncCmd_CS();
            uniLib.NetMgr.tcpSend(cmd);
        };
        /**
         * 返回距离服务器时间戳stamp的剩余毫秒
         */
        GameTime.leftTimeByServerStamp = function (stamp) {
            return (stamp - this.serverNow());
        };
        GameTime.offset = 0;
        return GameTime;
    }());
    game.GameTime = GameTime;
})(game || (game = {}));

var game;
(function (game) {
    (function (LanguageType) {
        /**
         * 中文
         */
        LanguageType[LanguageType["Chinese"] = 1] = "Chinese";
        /**
         * 英文
         */
        LanguageType[LanguageType["English"] = 2] = "English";
        /**
         * 繁体
         */
        LanguageType[LanguageType["ChineseTraditional"] = 3] = "ChineseTraditional";
    })(game.LanguageType || (game.LanguageType = {}));
    var LanguageType = game.LanguageType;
    var Language = (function () {
        function Language() {
        }
        Object.defineProperty(Language, "Type", {
            get: function () {
                if (this.m_Type == null) {
                    var localLanguage = storage.language.getValue();
                    this.m_Type = localLanguage ? localLanguage : LanguageType.Chinese;
                }
                return this.m_Type;
            },
            set: function (value) {
                this.m_Type = value;
                storage.language.setValue(value);
                this.TypeChanged.call();
            },
            enumerable: true,
            configurable: true
        });
        Language.Translate = function (chinese) {
            if (chinese == null)
                return;
            if (Language.Type == LanguageType.Chinese)
                return chinese;
            var translate = table.TableLanguage.chineseMap();
            if (translate == null)
                return chinese;
            var languageItem = translate[chinese];
            if (languageItem == null)
                return chinese;
            if (Language.Type == LanguageType.English)
                return languageItem.english;
            else if (Language.Type == LanguageType.ChineseTraditional)
                return languageItem.chineseTraditional;
        };
        Language.TranslateByCode = function (code) {
            if (code == null)
                return;
            var translate = table.TableLanguage.codeMap();
            if (translate == null)
                return code + "";
            var languageItem = translate[code];
            if (languageItem == null)
                return code + "";
            if (Language.Type == LanguageType.Chinese)
                return languageItem.chinese;
            else if (Language.Type == LanguageType.English)
                return languageItem.english;
            else if (Language.Type == LanguageType.ChineseTraditional)
                return languageItem.chineseTraditional;
        };
        Language.TranslateFormat = function () {
            var replacements = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                replacements[_i - 0] = arguments[_i];
            }
            var args = arguments;
            var translate = args[0];
            if (translate == null)
                return translate;
            translate = Language.Translate(translate);
            return translate == null ? translate : translate.replace(/{(\d+)}/g, function (match, number) {
                return typeof args[number] !== 'undefined' ? Language.Translate(args[number]) : match;
            });
        };
        ;
        Language.TranslateImage = function (chinese) {
            if (Language.Type == LanguageType.Chinese) {
                return chinese;
            }
            return "english_" + chinese;
        };
        /**
         * 多语言切换是否开启
         */
        Language.open = false;
        Language.TypeChanged = new GX.MulticastEvent();
        return Language;
    }());
    game.Language = Language;
})(game || (game = {}));

var game;
(function (game) {
    /**
    * 单机模式
    */
    var LocalConnection = (function () {
        function LocalConnection() {
        }
        Object.defineProperty(LocalConnection, "Instance", {
            get: function () {
                if (this.m_Instance == null) {
                    this.m_Instance = new LocalConnection();
                }
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        LocalConnection.clearInstance = function () {
            this.m_Instance = null;
        };
        LocalConnection.prototype.ConnectionGame = function (gameId, zoneId) {
            var joinVo = new MJLobby.JoinRoomVo();
            joinVo.gameId = gameId;
            joinVo.globalRoomId = -1;
            joinVo.zoneId = zoneId;
            joinVo.roomId = -1;
            //MJLobby.MJLobbyData.getInstance().isCreate = true;
            MJLobby.MJLobbyData.getInstance().everyFirstLogin = false;
            MJLobby.MJLobbyMatchData.getInstance().isEnroll = false;
            MJLobby.MJLobbyData.getInstance().video = 0;
            var joinVo = joinVo;
            var lobbyConfig = MJLobby.MJLobbyData.getInstance().getLobbyConfig();
            if (lobbyConfig.hasOwnProperty("lobbyDiamond")) {
                joinVo.minLeaveRoomDiamond = lobbyConfig["lobbyDiamond"];
            }
            else {
                joinVo.minLeaveRoomDiamond = 100;
            }
            var gameData = MJLobby.MJLobbyData.getConfigByGameId(joinVo.gameId);
            gameData.showBack = true;
            gameData.extData = joinVo;
            gameData.destroyResOnExit = false;
            gameData.defaultOrientation = egret.OrientationMode.LANDSCAPE;
            var zoneInfo = new Pmd.ZoneInfo();
            zoneInfo.zoneid = joinVo.zoneId;
            zoneInfo.gameid = joinVo.gameId;
            MJLobby.MJLobbyData.getInstance().continueObj = null;
            if (joinVo.shareInfo) {
                if (uniLib.ZQGameSdk.defaultWXShareVo.webpageUrl == "" && MJLobby.LobbyDataCache.bundleInfo && MJLobby.LobbyDataCache.bundleInfo.weixin.wbappid) {
                    var nick = MJLobby.MJLobbyData.getInstance().myBaseInfo.nickName;
                    if (nick.length > 8) {
                        nick = nick.slice(0, 8);
                    }
                    joinVo.shareInfo.webPageUrl = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=" + MJLobby.LobbyDataCache.bundleInfo.weixin.wbappid + "&redirect_uri=http://wx.zqgame.com/addons/zqgame/gameshare.php?appid=" + MJLobby.LobbyDataCache.bundleInfo.weixin.wbappid + "&response_type=code&scope=snsapi_base&state=" + uniLib.CompressUtil.base64encode(MJLobby.MJLobbyData.getInstance().myBaseInfo.uid + "|" + joinVo.roomId + "|" + nick) + "&connect_redirect=1#wechat_redirect";
                }
                else {
                    joinVo.shareInfo.webPageUrl = uniLib.ZQGameSdk.defaultWXShareVo.webpageUrl + "?uid=" + MJLobby.MJLobbyData.getInstance().myBaseInfo.uid + "&nickName=" + MJLobby.MJLobbyData.getInstance().myBaseInfo.nickName;
                }
            }
            gameData.zoneInfo = zoneInfo;
            if (gameData) {
                uniLib.GameModuleUtils.ExitGame(false);
                // if(MJLobbyData.getInstance().lobbyId==LobbyIdConsts.GUIZHOU_MAHJONG){
                //     uniLib.UIMgr.instance.showProcessBar(null, 97, 100, "加载游戏，请稍后...", "", true);
                // }else{
                uniLib.UIMgr.instance.showProcessBar(null, 1, 100, "加载游戏，请稍后...", "", true);
                // }
                uniLib.GameModuleUtils.LoadGame(gameData.gameCodeUrl, gameData.gameDoc, gameData, null, function () { });
                MJLobby.MahJongLobbyFacade.getLobbyInstance().sendNotification(MJLobby.MahJongLobbyFacadeConsts.DESTORY);
            }
        };
        return LocalConnection;
    }());
    game.LocalConnection = LocalConnection;
})(game || (game = {}));

var storage;
(function (storage) {
    /**
     * 语言类型
     */
    var language;
    (function (language) {
        var key = "language";
        function setValue(value) {
            egret.localStorage.setItem(key, value + "");
        }
        language.setValue = setValue;
        function getValue() {
            var value = egret.localStorage.getItem(key);
            if (value == null || Number(value) == NaN)
                return game.LanguageType.Chinese;
            return Number(value);
        }
        language.getValue = getValue;
    })(language = storage.language || (storage.language = {}));
})(storage || (storage = {}));

var game;
(function (game) {
    /**
     * 封装egret官方提供的定时器
     */
    var Timer = (function () {
        function Timer() {
        }
        /**
         * @language zh_CN
         * 在指定的延迟（以毫秒为单位）后运行指定的函数。
         * @param listener {Function} 侦听函数
         * @param thisObject {any} this对象
         * @param delay {number} 延迟时间，以毫秒为单位
         * @param ...args {any} 参数列表
         * @returns {number} 返回索引，可以用于 clearTimeout
         * @version Egret 2.4
         * @platform Web,Native
         * @includeExample extension/game/utils/setTimeout.ts
         */
        Timer.setTimeout = function (listener, thisObject, delay) {
            var args = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args[_i - 3] = arguments[_i];
            }
            var timer = egret.setTimeout.apply(egret, [listener, thisObject, delay].concat(args));
            this.timeOuts.push(timer);
            return timer;
        };
        /**
         * @language zh_CN
         * 清除指定延迟后运行的函数。
         * @param key {number} egret.setTimeout所返回的索引
         * @version Egret 2.4
         * @platform Web,Native
         */
        Timer.clearTimeout = function (key) {
            egret.clearTimeout(key);
            this.timeOuts.remove(key);
        };
        /**
         * @language zh_CN
         * 以指定的延迟（以毫秒为单位）间隔循环调用指定的函数。
         * @param listener {Function} 侦听函数
         * @param thisObject {any} this对象
         * @param delay {number} 延迟时间，以毫秒为单位
         * @param ...args {any} 参数列表
         * @returns {number} 返回索引，可以用于 clearInterval
         * @version Egret 2.4
         * @platform Web,Native
         * @includeExample extension/game/utils/setInterval.ts
         */
        Timer.setInterval = function (listener, thisObject, delay) {
            var args = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args[_i - 3] = arguments[_i];
            }
            var timer = egret.setInterval.apply(egret, [listener, thisObject, delay].concat(args));
            this.intervals.push(timer);
            return timer;
        };
        /**
         * @language zh_CN
         * 清除指定延迟后运行的函数。
         * @param key {number} egret.setInterval所返回的索引
         * @version Egret 2.4
         * @platform Web,Native
         * @includeExample egret/utils/setInterval.ts
         */
        Timer.clearInterval = function (key) {
            egret.clearInterval(key);
            this.intervals.remove(key);
        };
        /**
         * 清除所有setTimeout的定时器
         */
        Timer.clearTimerTnterval = function () {
            for (var _i = 0, _a = this.intervals; _i < _a.length; _i++) {
                var item = _a[_i];
                egret.clearInterval(item);
            }
            this.intervals.clear();
        };
        /**
         * 清除所有setInterval的定时器
         */
        Timer.clearTimerOut = function () {
            for (var _i = 0, _a = this.timeOuts; _i < _a.length; _i++) {
                var item = _a[_i];
                egret.clearTimeout(item);
            }
            this.timeOuts.clear();
        };
        /**
         * 清除所有的定时器
         */
        Timer.clearAllTimer = function () {
            this.clearTimerOut();
            this.clearTimerTnterval();
        };
        /**
         * 非循环定时器集合
         * 在指定的延迟（以毫秒为单位）后运行指定的函数。
         */
        Timer.timeOuts = [];
        /**
         * 循环定时器集合
         * 在指定的延迟（以毫秒为单位）后运行指定的函数。
         */
        Timer.intervals = [];
        return Timer;
    }());
    game.Timer = Timer;
})(game || (game = {}));

var Cmd;
(function (Cmd) {
    /**
     * 房间数据更新
     */
    function OnRoomDataUpdateCmd_S(rev) {
        uniLib.UIMgr.instance.hideLoading();
        if (rev.roomData.timestamp)
            game.GameTime.responseSync(rev.roomData.timestamp);
        var roomdata = game.RoomData.Instance;
        var seatList = rev.roomData.seatList;
        seatList = seatList && seatList instanceof Array ? seatList : [];
        if (seatList && seatList instanceof Array) {
            rev.roomData.seatList = seatList.sort(function (a, b) {
                if (a.role && a.role.uid == uniLib.NetMgr.UID)
                    return -1;
                return 1;
            });
        }
        var seatNumber = rev.roomData.seatNumber ? rev.roomData.seatNumber : game.Config.GameSeatNumber;
        if (seatNumber) {
            var _loop_1 = function(i) {
                var seatid = i + 1;
                if (seatList.seek(function (v) { return v.seatId == seatid; }))
                    return "continue";
                var seatData = new Cmd.SeatData();
                seatData.seatId = seatid;
                seatList.push(seatData);
            };
            for (var i = 0; i < seatNumber; i++) {
                var state_1 = _loop_1(i);
                if (state_1 === "continue") continue;
            }
        }
        var maxUserNum = rev.roomData.maxUserNum;
        roomdata.maxuserNbr = maxUserNum == null ? seatList.length : maxUserNum;
        if (rev.roomData.roomState && rev.roomData.roomState.roomProps) {
            game.RoomData.Instance.setRoomProp(rev.roomData.roomState.roomProps);
        }
        if (rev.roomData.roomState && rev.roomData.roomState.props) {
            game.RoomData.Instance.setRoomPlayProps(rev.roomData.roomState.props);
        }
        if (rev.roomData.bottomPoint) {
            game.RoomData.Instance.bottomPoint = rev.roomData.bottomPoint;
        }
        if (rev.roomData.happyPoint) {
            game.RoomData.Instance.happyPoint = rev.roomData.happyPoint;
        }
        if (rev.leftCardList) {
            game.RoomData.Instance.leftCardList = rev.leftCardList;
        }
        if (rev.roomData.actList) {
            GX.PokerEvent.Instance.ActionUpdate.call(rev.roomData.actList);
        }
        if (rev.roomData.gameNumList) {
            for (var _i = 0, _a = rev.roomData.gameNumList; _i < _a.length; _i++) {
                var point = _a[_i];
                switch (point.typ) {
                    case Cmd.GameNumber.Type.PointBase:
                        //底分
                        roomdata.pointBase = point.value;
                        break;
                    case Cmd.GameNumber.Type.PointBottom:
                        //底注
                        game.RoomData.Instance.bottomPoint = point.value;
                        break;
                    case Cmd.GameNumber.Type.Pan:
                        //锅底分
                        game.RoomData.Instance.tabPoints = point.value;
                        game.RoomData.Instance.tabPointChange.call(game.RoomData.Instance.tabPoints);
                        game.RoomData.Instance.relogTabPointsEvent.call(game.RoomData.Instance.tabPoints); //断线重连
                        break;
                }
            }
        }
        roomdata.level = rev.roomData.level;
        game.MessageHandle.ReplaceSeatData(seatList);
        game.MessageHandle.ReplaceAudienceList(rev.roomData.audienceList);
        game.MessageHandle.updataTexasConfig(rev.roomData.texas);
        roomdata.callOrRob = rev.roomData.callOrRob;
        roomdata.roomId = rev.roomData.roomId;
        roomdata.ownerId = rev.roomData.ownerId;
        roomdata.pointBase = rev.roomData.pointBase;
        roomdata.pointLimit = rev.roomData.pointLimit;
        roomdata.startGameOpId = rev.roomData.startGameOpId;
        roomdata.roomType = rev.roomData.roomType;
        roomdata.roomTotalInnings = rev.roomData.gameNbr;
        roomdata.roomCurrentInnings = rev.roomData.gameNbrCur;
        roomdata.bankerWait = rev.roomData.bankerWait;
        roomdata.blindLeftSec = rev.roomData.leftSecBlind;
        var roomState = rev.roomData.roomState;
        roomdata.matchid = roomState ? roomState.matchId : null;
        rev.roomData.stateList = rev != null && rev.roomData != null && rev.roomData.stateList != null && rev.roomData.stateList instanceof Array ? rev.roomData.stateList : [];
        roomdata.stateList = rev.roomData.stateList;
        game.MessageHandle.ReplaceRoundData(rev.roomData);
        game.MessageHandle.HBRoomDataUpdate(rev);
        if (rev.roomData.voteData) {
            var cmd = new Cmd.VoteUpdateCmd_S();
            cmd.data = rev.roomData.voteData;
            GX.PokerEvent.Instance.VoteUpdate.call(cmd);
        }
        if (rev.roomData.statusInfo != null) {
            GX.PokerEvent.Instance.gameStateUpdate.call(rev.roomData.statusInfo);
        }
        game.MessageHandle.showTipsEvent(rev);
        GX.PokerEvent.Instance.lotteryMulticast.call(rev.roomData.lottery);
        if (rev.roomData && rev.roomData.dissolve) {
            GX.PokerEvent.Instance.dissolveRoomUpdate.call(rev.roomData.dissolve);
        }
        game.Timer.clearInterval(Cmd.EchoTimer);
        Cmd.EchoTimer = game.Timer.setInterval(function () {
            if (uniLib.NetMgr.checkMsgTimeout(5000) && uniLib.NetMgr.setMsgTimeout(5, "ClientEchoRoomCmd_SC")) {
                game.PokerFunction.tcpSend(new Cmd.ClientEchoRoomCmd_SC);
            }
        }, this, 2000);
        GX.PokerEvent.Instance.roomDataUpdateEvent.call(rev);
        GX.PokerEvent.Instance.reconnecEvent.call();
        if (egret.localStorage.getItem("show_SSC") == "1") {
            uniLib.Global.dispatchEvent(uniLib.ZqEvent.EVENT_G2L, "show_SSC");
        }
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
    }
    Cmd.OnRoomDataUpdateCmd_S = OnRoomDataUpdateCmd_S;
    /**
    * 房间玩家更新
    */
    function OnRoomSeatUpdateCmd_S(rev) {
        if (!rev || !rev.seatData || !(rev.seatData instanceof Array)) {
            return;
        }
        rev.op = rev.op == Cmd.UpdateOperator.Delete && !game.Config.SeatGame ? Cmd.UpdateOperator.StandUp : rev.op;
        rev.seatData.sort(function (a, b) { return Math.abs(a.role.uid - uniLib.NetMgr.UID) - Math.abs(b.role.uid - uniLib.NetMgr.UID); });
        if (rev.op == Cmd.UpdateOperator.Replace) {
            game.MessageHandle.ReplaceSeatData(rev.seatData);
        }
        else if (rev.op == Cmd.UpdateOperator.Update) {
            var seatList = game.RoomData.Instance.seatList;
            var _loop_2 = function(item) {
                var seatData = seatList.first(function (v) { return (v.seatId == item.seatId); });
                if (!seatData) {
                    seatData = new game.SeatData(item.seatId);
                    game.RoomData.Instance.addSeat(seatData);
                }
                if (!seatData.user) {
                    seatData.user = new game.UserInfo(item.role.uid);
                }
                seatData.user.cardScore = item.cardScore;
                seatData.user.cutScore = item.cutScore;
                seatData.user.point = item.role.point;
                seatData.user.updataInfo(item.role);
                seatData.isReady = item.isReady;
                seatData.isInGame = item.isInGame;
                seatData.isSit = item.isSit;
                seatData.outCardList = item.outCardList;
                seatData.batteryIndex = item.batteryId;
                seatData.setLock(item.lockFishId ? true : false, item.lockFishId);
                game.RoomData.Instance.removeAudience(item.role.uid);
            };
            for (var _i = 0, _a = rev.seatData; _i < _a.length; _i++) {
                var item = _a[_i];
                _loop_2(item);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.Delete) {
            for (var _b = 0, _c = rev.seatData; _b < _c.length; _b++) {
                var item = _c[_b];
                game.RoomData.Instance.delectSeat(item.seatId);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.StandUp) {
            var seatList = game.RoomData.Instance.seatList;
            var _loop_3 = function(item) {
                var seatData = seatList.first(function (v) { return (v.seatId == item.seatId); });
                if (seatData == null)
                    return "continue";
                game.RoomData.Instance.addAudience(seatData.user);
                seatData.user = null;
                seatData.clearHandCard();
            };
            for (var _d = 0, _e = rev.seatData; _d < _e.length; _d++) {
                var item = _e[_d];
                var state_3 = _loop_3(item);
                if (state_3 === "continue") continue;
            }
        }
    }
    Cmd.OnRoomSeatUpdateCmd_S = OnRoomSeatUpdateCmd_S;
    /**
    * 座位数据更新
    */
    function OnSeatDataUpdateCmd_S(rev) {
        if (!rev || !rev.seatData || !(rev.seatData instanceof Array)) {
            return;
        }
        game.RoomData.Instance.delectedSeatData = [];
        rev.seatData.sort(function (a, b) { return Math.abs(a.role.uid - uniLib.NetMgr.UID) - Math.abs(b.role.uid - uniLib.NetMgr.UID); });
        if (rev.op == Cmd.UpdateOperator.Replace) {
            game.MessageHandle.ReplaceSeatData(rev.seatData);
        }
        else if (rev.op == Cmd.UpdateOperator.Update) {
            var seatList = game.RoomData.Instance.seatList;
            var _loop_4 = function(item) {
                var seatData = seatList.first(function (v) { return (v.seatId == item.seatId); });
                if (!seatData) {
                    seatData = new game.SeatData(item.seatId);
                    game.RoomData.Instance.addSeat(seatData);
                }
                if (!seatData.user) {
                    seatData.user = new game.UserInfo(item.role.uid);
                }
                seatData.user.cardScore = item.cardScore;
                seatData.user.cutScore = item.cutScore;
                seatData.user.point = item.role.point;
                seatData.user.updataInfo(item.role);
                seatData.isReady = item.isReady;
                seatData.isInGame = item.isInGame;
                seatData.isSit = item.isSit;
                seatData.batteryIndex = item.batteryId;
                seatData.setLock(item.lockFishId ? true : false, item.lockFishId);
                seatData.outCardList = item.outCardList;
            };
            for (var _i = 0, _a = rev.seatData; _i < _a.length; _i++) {
                var item = _a[_i];
                _loop_4(item);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.Delete) {
            game.RoomData.Instance.delectedSeatData = rev.seatData;
            var seatList = game.RoomData.Instance.seatList;
            var _loop_5 = function(item) {
                var seatData = seatList.first(function (v) { return (v.seatId == item.seatId); });
                if (seatData == null)
                    return "continue";
                seatData.user = null;
                seatData.clearHandCard();
            };
            for (var _b = 0, _c = rev.seatData; _b < _c.length; _b++) {
                var item = _c[_b];
                var state_5 = _loop_5(item);
                if (state_5 === "continue") continue;
            }
        }
    }
    Cmd.OnSeatDataUpdateCmd_S = OnSeatDataUpdateCmd_S;
    /**
     * 请求换坐给对方客户端
     */
    function OnRequestChangeSeatRoom_S(rev) {
        if (game.RoomInfo.getInstance().video == 1) {
            return;
        }
        var user = game.PokerFunction.GetUserInfoByUid(rev.fromuid);
        if (!user)
            return;
        var msg = user.nickName + "请求和你更换座位?";
        var confirmFun = function () {
            var cmd = new Cmd.ReturnChangeSeatRoom_C();
            cmd.fromuid = rev.fromuid;
            cmd.isAgree = 1;
            game.PokerFunction.tcpSend(cmd);
        };
        var cancelFun = function () {
            var cmd = new Cmd.ReturnChangeSeatRoom_C();
            cmd.fromuid = rev.fromuid;
            cmd.isAgree = 0;
            game.PokerFunction.tcpSend(cmd);
        };
        var msgBox = new MJLobby.LobbyMsgBox(false);
        msgBox.setData("", msg, ["确定", "取消"], [confirmFun, cancelFun], this);
        msgBox.x = Math.round((MJLobby.LobbyDataCache.defaultWidth - msgBox.width) / 2);
        msgBox.y = Math.round((MJLobby.LobbyDataCache.defaultHeight - msgBox.height) / 2);
        msgBox.msgColor = 0xFFFFFF;
        uniLib.PopUpMgr.addPopUp(msgBox, null, true, false);
    }
    Cmd.OnRequestChangeSeatRoom_S = OnRequestChangeSeatRoom_S;
    /**
     * 货币更新通知
     */
    function OnMoneyUpdateCmd_S(rev) {
        var update = rev.update;
        update = update && update instanceof Array ? update : [];
        for (var _i = 0, update_1 = update; _i < update_1.length; _i++) {
            var item = update_1[_i];
            var user = game.PokerFunction.GetUserInfoByUid(item.uid);
            game.MessageHandle.updataMoney(user, item);
            var banker = game.BankerData.Instance.banker;
            if (banker && banker.uid == item.uid)
                game.MessageHandle.updataMoney(banker, item);
        }
        var moneyData = rev.moneyData;
        moneyData = moneyData && moneyData instanceof Array ? moneyData : [];
        for (var _a = 0, moneyData_1 = moneyData; _a < moneyData_1.length; _a++) {
            var item = moneyData_1[_a];
            var user = game.PokerFunction.GetUserInfoByUid(item.uid);
            if (user == null)
                continue;
            user.point = item.chips != null ? item.chips : 0;
        }
        GX.PokerEvent.Instance.moneyUpdate.call(rev);
    }
    Cmd.OnMoneyUpdateCmd_S = OnMoneyUpdateCmd_S;
    /**
     *  C-&gt;S 压注请求
     *  S-&gt;C 压注通知
     */
    function OnBetRoomCmd_CS(rev) {
        if (rev.betDigit) {
            game.RoomData.Instance.betData = game.MessageHandle.refrenshBetData(rev.betDigit, game.RoomData.Instance.betData);
            game.RoomData.Instance.betMeData = game.MessageHandle.refrenshBetData(rev.betDigit, game.RoomData.Instance.betMeData);
        }
        else if (rev.betSum) {
            game.RoomData.Instance.betData = game.MessageHandle.refrenshDoorData(rev.betSum, game.RoomData.Instance.betData);
            game.RoomData.Instance.betMeData = game.MessageHandle.refrenshDoorData(rev.betSum, game.RoomData.Instance.betMeData);
        }
        else if (rev.betNumber) {
            //兼容老项目 不发uid默认是自己
            if (!rev.betNumber.uid || (rev.betNumber.uid == uniLib.NetMgr.UID))
                game.RoomData.Instance.betMeData = game.MessageHandle.refrenshFourDoorData(rev.betNumber, game.RoomData.Instance.betMeData);
            game.RoomData.Instance.betData = game.MessageHandle.refrenshFourDoorData(rev.betNumber, game.RoomData.Instance.betData);
        }
        if (rev.bet) {
            var gameid = game.GameId();
            var isBashi = (gameid > 8500 && gameid < 10000);
            var doorDatas = game.RoomData.Instance.doorDatas;
            if (doorDatas && doorDatas.length > 0) {
                var door = doorDatas.first(function (v) { return v.doorId == rev.bet.doorId; });
                if (!door)
                    return;
                if (!door.chipSum) {
                    door.chipSum = 0;
                }
                door.chipSum = (door.chipSum * 10 + rev.bet.chips * 10) / 10;
                //兼容老项目 不发uid默认是自己
                if (!rev.bet.uid || (rev.bet.uid == uniLib.NetMgr.UID)) {
                    door.chipMain = (door.chipMain * 10 + rev.bet.chips * 10) / 10;
                    door.playMainAnimation.call(rev.bet.chips);
                    if (isBashi) {
                        if (rev.opType == Cmd.Operation.Cancel) {
                            door.chipSum -= door.chipMain;
                            door.chipMain = 0;
                        }
                    }
                }
                GX.PokerEvent.Instance.betRoomEvent.call(rev);
            }
            //bashi游戏bet字段也需要更新game.RoomData.Instance.betData数据
            if (isBashi) {
                //兼容老项目 不发uid默认是自己
                if (!rev.bet.uid || (rev.bet.uid == uniLib.NetMgr.UID))
                    game.RoomData.Instance.betMeData = game.MessageHandle.refrenshFourDoorData(rev.bet, game.RoomData.Instance.betMeData);
                game.RoomData.Instance.betData = game.MessageHandle.refrenshFourDoorData(rev.bet, game.RoomData.Instance.betData);
            }
        }
        var act = rev.act;
        var uid = rev.uid == null ? (act ? act.id : null) : rev.uid;
        var seatData = game.PokerFunction.GetSeatDataByUid(uid);
        if (seatData) {
            if (rev.chip) {
                game.RoomData.Instance.tabPoints += rev.chip;
                seatData.curBetCount += rev.chip;
                seatData.betCount += rev.chip;
                game.RoomData.Instance.tabPointChange.call(game.RoomData.Instance.tabPoints);
            }
            if (act) {
                if (act.chipsBet != null)
                    seatData.curBetCount = act.chipsBet;
                if (act.chipsAdd != null)
                    seatData.betCount += act.chipsAdd;
                if (act.chipsLeft != null)
                    seatData.user.point = act.chipsLeft;
                if (act.sumPot != null)
                    game.RoomData.Instance.bottomPoint = act.sumPot;
                seatData.hasFord = act.op != null && act.op == Cmd.Operation.Fold ? true : false;
            }
        }
        if (rev.bulletinfo) {
            var serverNow = game.GameTime.serverNow();
            var user = game.PokerFunction.GetUserByUid(rev.bulletinfo.uid);
            if (user) {
                user.point -= rev.bulletinfo.cost;
            }
            if (serverNow - rev.bulletinfo.fireTime < 1000) {
                rev.bulletinfo.fireTime = serverNow;
                game.Action.sendBulletEvent.call(rev.bulletinfo);
            }
        }
        GX.PokerEvent.Instance.userBetEvent.call(rev);
    }
    Cmd.OnBetRoomCmd_CS = OnBetRoomCmd_CS;
    /**
     * 底分更新通知
     */
    function OnPointBaseUpdateCmd_S(rev) {
        game.RoomData.Instance.pointBase = rev.pointBase;
    }
    Cmd.OnPointBaseUpdateCmd_S = OnPointBaseUpdateCmd_S;
    /**
     *  C-&gt;S 准备/取消准备请求
     *  S-&gt;C 更新准备状态
     */
    function OnReadyUpdateRoomCmd_CS(rev) {
        var seat = game.PokerFunction.GetSeatDataByUid(rev.uid);
        if (seat)
            seat.isReady = rev.yesOrNo;
    }
    Cmd.OnReadyUpdateRoomCmd_CS = OnReadyUpdateRoomCmd_CS;
    /**
     * 启动牌局
     */
    function OnEnableRoundCmd_CS(rev) {
        game.RoomData.Instance.isEnableRound = true;
    }
    Cmd.OnEnableRoundCmd_CS = OnEnableRoundCmd_CS;
    /**
     *游戏开始
     */
    function OnStartGameCmd_S(rev) {
        game.RoomData.Instance.betMax = rev.betChipsMax;
        if (rev.gameNbrCur != null) {
            game.RoomData.Instance.roomCurrentInnings = rev.gameNbrCur;
        }
        else {
            game.RoomData.Instance.roomCurrentInnings += 1;
        }
        for (var _i = 0, _a = game.RoomData.Instance.seatList; _i < _a.length; _i++) {
            var item = _a[_i];
            item.catchCardNum = 0;
            item.curBetCount = 0;
            item.betCount = 0;
        }
        game.MessageHandle.updataTexas(rev.texas);
        game.RoomData.Instance.startGame = true;
        game.Action.startGameCmdEvent.call(rev);
    }
    Cmd.OnStartGameCmd_S = OnStartGameCmd_S;
    /**
     *倍数更新
     */
    function OnMultipleUpdateCmd_S(rev) {
        if (rev.update && rev.update instanceof Array) {
            for (var _i = 0, _a = rev.update; _i < _a.length; _i++) {
                var item = _a[_i];
                var seatInfo = game.PokerFunction.GetSeatDataBySeatId(item.seatId);
                if (seatInfo == null)
                    continue;
                seatInfo.seatMultiple = item.multiple;
                if (seatInfo.user.uid == uniLib.NetMgr.UID) {
                    game.RoomData.Instance.multiple = item.multiple;
                }
            }
        }
        else if (rev.multiple) {
            game.RoomData.Instance.multiple = rev.multiple;
        }
    }
    Cmd.OnMultipleUpdateCmd_S = OnMultipleUpdateCmd_S;
    /**
     *发牌
     */
    function OnDealCardCmd_S(rev) {
        if (!rev)
            return;
        if (!game.RoomData.Instance.startGame) {
            game.RoomData.Instance.startGame = true;
        }
        if (rev.lastCardNum != null) {
            game.RoomData.Instance.lastCardNum = rev.lastCardNum;
        }
        /**发牌类型（发牌动画用）：1.表示追加发牌 其他表示正常发牌*/
        var addCardAnimaType = 0;
        rev.seatCardList = rev.seatCardList && rev.seatCardList instanceof Array ? rev.seatCardList : [];
        for (var _i = 0, _a = rev.seatCardList; _i < _a.length; _i++) {
            var item = _a[_i];
            var cardList = item.handCardList;
            var catchCardList = item.catchCards; //追加牌
            var seatdata = game.PokerFunction.GetSeatDataBySeatId(item.seatId);
            if (seatdata == null)
                continue;
            if (seatdata.user) {
                seatdata.user.isInGame = true;
            }
            seatdata.kingNum = item.kingNum;
            seatdata.betCount = seatdata.betCount;
            if (item.kengPoint) {
                seatdata.KengPoint = item.kengPoint;
            }
            if (item.recommend) {
                seatdata.recommendList = item.recommend;
            }
            if (item.catchNum) {
                seatdata.catchCardNum = item.catchNum;
            }
            else {
                seatdata.handCardSum = item.handCardNum == null ? ((cardList && cardList instanceof Array) ? cardList.length : 0) : item.handCardNum;
            }
            if (catchCardList) {
                addCardAnimaType = 1;
                for (var j = 0; j < catchCardList.length; j++) {
                    seatdata.addHandCard(catchCardList[j], game.CardActionType.ADD, rev.dealCardType);
                }
                continue;
            }
            if (!cardList || !cardList.length)
                continue;
            var sortFunction = game.PokerFunction.handCardSort;
            if (sortFunction)
                cardList = sortFunction(cardList);
            if (!rev.dealCardType) {
                seatdata.clearHandCard();
                for (var i = 0; i < cardList.length; i++) {
                    seatdata.addHandCard(cardList[i]);
                }
            }
            else if (rev.dealCardType == Cmd.UpdateOperator.Update) {
                for (var i = 0; i < cardList.length; i++) {
                    seatdata.replaceHandCard(i, cardList[i]);
                }
                GX.PokerEvent.Instance.showBackCardsAnimation.call(seatdata.user.uid);
                return;
            }
        }
        if (rev.door && rev.door instanceof Array) {
            var doorDatas = game.RoomData.Instance.doorDatas;
            if (doorDatas && doorDatas.length > 0) {
                var _loop_6 = function(item) {
                    var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                    if (door == null)
                        return "continue";
                    door.multiple = item.multiple;
                    door.cardType = item.cardType;
                    door.cardList = item.cardList;
                    door.cardKey = item.keyCard;
                };
                for (var _b = 0, _c = rev.door; _b < _c.length; _b++) {
                    var item = _c[_b];
                    var state_6 = _loop_6(item);
                    if (state_6 === "continue") continue;
                }
            }
        }
        if (rev.banker) {
            game.BankerData.Instance.multiple = rev.banker.multiple;
            game.BankerData.Instance.cardType = rev.banker.cardType;
            game.BankerData.Instance.cardList = rev.banker.cardList;
            game.BankerData.Instance.cardKey = rev.banker.keyCard;
        }
        if (rev.leftCardList) {
            game.RoomData.Instance.cardNoteVisible = true;
            game.RoomData.Instance.leftCardList = rev.leftCardList;
        }
        GX.PokerEvent.Instance.dealCardEnd.call(rev);
        GX.PokerEvent.Instance.dealCardAnimation.call(addCardAnimaType);
        if (rev.callCard && rev.callUid) {
            GX.PokerEvent.Instance.callCardEvent.call(rev);
        }
    }
    Cmd.OnDealCardCmd_S = OnDealCardCmd_S;
    /**
     * 更新手牌
     */
    function OnHandCardUpdateCmd_S(rev) {
        var seatList = rev.update;
        seatList = seatList && seatList instanceof Array ? seatList : [];
        if (rev.op == Cmd.UpdateOperator.Update) {
            for (var _i = 0, seatList_1 = seatList; _i < seatList_1.length; _i++) {
                var item = seatList_1[_i];
                if (item.user == null)
                    continue;
                var seatData = game.PokerFunction.GetSeatDataByUid(item.user.uid);
                if (seatData == null)
                    continue;
                var cardSet = item.cardSet;
                if (cardSet == null)
                    continue;
                var cardList = cardSet.cardSet;
                cardList = cardList && cardList instanceof Array ? cardList : [];
                for (var _a = 0, cardList_1 = cardList; _a < cardList_1.length; _a++) {
                    var cardid = cardList_1[_a];
                    seatData.addHandCard(cardid);
                }
                seatData.setCardtype(cardSet.typ);
                seatData.setCardKey(cardSet.key);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.Replace) {
            for (var _b = 0, seatList_2 = seatList; _b < seatList_2.length; _b++) {
                var item = seatList_2[_b];
                if (item.user == null)
                    continue;
                var seatData = game.PokerFunction.GetSeatDataByUid(item.user.uid);
                if (seatData == null)
                    continue;
                seatData.clearHandCard();
                var cardSet = item.cardSet;
                if (cardSet == null)
                    continue;
                var cardList = cardSet.cardSet;
                cardList = cardList && cardList instanceof Array ? cardList : [];
                for (var _c = 0, cardList_2 = cardList; _c < cardList_2.length; _c++) {
                    var cardid = cardList_2[_c];
                    seatData.addHandCard(cardid);
                }
                seatData.setCardtype(cardSet.typ);
                seatData.setCardKey(cardSet.key);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.Delete) {
            for (var _d = 0, seatList_3 = seatList; _d < seatList_3.length; _d++) {
                var item = seatList_3[_d];
                if (item.user == null)
                    continue;
                var seatData = game.PokerFunction.GetSeatDataByUid(item.user.uid);
                if (seatData == null)
                    continue;
                seatData.clearHandCard();
                var cardSet = item.cardSet;
                if (cardSet == null)
                    continue;
                var cardList = cardSet.cardSet;
                cardList = cardList && cardList instanceof Array ? cardList : [];
                for (var _e = 0, cardList_3 = cardList; _e < cardList_3.length; _e++) {
                    var cardid = cardList_3[_e];
                    seatData.removedHandCard(cardid);
                }
                seatData.setCardtype(cardSet.typ);
                seatData.setCardKey(cardSet.key);
            }
        }
    }
    Cmd.OnHandCardUpdateCmd_S = OnHandCardUpdateCmd_S;
    /**
     *  C-&gt;S 出牌请求
     *  S-&gt;C 出牌通知
     */
    function OnPlayCardCmd_CS(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        if (!rev.list) {
            if (!rev.uid)
                return;
            rev.cardList = (rev.cardList == null || !(rev.cardList instanceof Array)) ? [] : rev.cardList;
            var seatData = game.PokerFunction.GetSeatDataByUid(rev.uid);
            if (seatData == null)
                return;
            if (rev.handcardNum != null) {
                seatData.handCardSum = rev.handcardNum;
            }
            else {
                seatData.handCardSum -= rev.cardList.length;
            }
            for (var _i = 0, _a = rev.cardList; _i < _a.length; _i++) {
                var item = _a[_i];
                seatData.removedHandCard(item);
            }
            game.RoomData.Instance.removeLeftCard(rev.cardList);
            GX.PokerEvent.Instance.playCard.call(rev);
        }
        else {
            for (var _b = 0, _c = rev.list; _b < _c.length; _b++) {
                var info = _c[_b];
                if (!info.uid)
                    return;
                info.cardList = (info.cardList == null || !(info.cardList instanceof Array)) ? [] : info.cardList;
                var seatData = game.PokerFunction.GetSeatDataByUid(info.uid);
                if (seatData == null)
                    return;
                if (info.handcardNum != null) {
                    seatData.handCardSum = info.handcardNum;
                }
                else {
                    seatData.handCardSum -= info.cardList.length;
                }
                for (var _d = 0, _e = info.cardList; _d < _e.length; _d++) {
                    var item = _e[_d];
                    seatData.removedHandCard(item);
                }
                game.RoomData.Instance.removeLeftCard(info.cardList);
            }
            GX.PokerEvent.Instance.playCard.call(rev);
        }
    }
    Cmd.OnPlayCardCmd_CS = OnPlayCardCmd_CS;
    /**
     *操作位轮转 广播
     */
    function OnNewOperateSeatCmd_S(rev) {
        var userInfo = game.PokerFunction.GetUserInfoBySeatId(rev.seatId);
        if (!userInfo) {
            return;
        }
        var operate = new game.OperateData();
        operate.uid = userInfo.uid;
        operate.endTime = rev.endTime;
        operate.leftSec = rev.leftSec;
        if (rev.cardSetList && rev.cardSetList instanceof Array && (operate.cardSetList == null || !operate.cardSetList.length)) {
            operate.cardSetList = new Array();
            for (var _i = 0, _a = rev.cardSetList; _i < _a.length; _i++) {
                var item = _a[_i];
                operate.cardSetList.push(item.cardSet);
            }
            if (!operate.cardList) {
                operate.cardList = new Array();
            }
            operate.cardList = rev.cardSetList;
        }
        rev.opList = rev.opList && rev.opList instanceof Array ? rev.opList : [];
        operate.operateList = rev.opList;
        operate.opBit = rev.opBit;
        operate.cardListType = rev.cardListType;
        operate.raiseLine = rev.raiseLine;
        operate.continueCompare = rev.continueCompare;
        operate.actList = rev.actList;
        if (rev.isFirstOp == 1) {
            operate.isFirstOp = true;
        }
        else {
            operate.isFirstOp = false;
        }
        operate.delay = rev.delay != null && rev.delay instanceof Array ? rev.delay : [];
        game.RoomData.Instance.operate = operate;
    }
    Cmd.OnNewOperateSeatCmd_S = OnNewOperateSeatCmd_S;
    /**
    * 押注圈结束
    */
    function OnCircleEndCmd_S(rev) {
        game.RoomData.Instance.setbottomCard(rev.bottomCard, game.UpdataType.UPDATA);
        GX.PokerEvent.Instance.circleEndEvent.call(rev);
    }
    Cmd.OnCircleEndCmd_S = OnCircleEndCmd_S;
    /**解散房间数据跟新 */
    function OnDissolveRoomUpdateCmd_S(rev) {
        GX.PokerEvent.Instance.dissolveRoomUpdate.call(rev);
        Cmd.dispatch(MJLobby.MahJongLobbyFacadeConsts.DISSOLVE_UPDATA, rev);
    }
    Cmd.OnDissolveRoomUpdateCmd_S = OnDissolveRoomUpdateCmd_S;
    /**
     * 轮到玩家抢\叫地主通知
     */
    function OnLandlordOptionCmd_S(rev) {
        var operate = new game.RobLordOperateData();
        operate.uid = rev.uid;
        operate.endTime = rev.endTime;
        operate.leftSec = rev.leftSec;
        operate.operateList = rev.opList;
        game.RoomData.Instance.robLordOperate = operate;
    }
    Cmd.OnLandlordOptionCmd_S = OnLandlordOptionCmd_S;
    /**
     *  C-&gt;S 抢地主请求
     *  S-&gt;C 玩家抢地主通知
     */
    function OnLandlordRobCmd_CS(rev) {
        GX.PokerEvent.Instance.landlordRobResult.call(rev);
    }
    Cmd.OnLandlordRobCmd_CS = OnLandlordRobCmd_CS;
    /**
     *  C-&gt;S 叫地主请求
     *  S-&gt;C 玩家叫地主通知
     */
    function OnLandlordCallCmd_CS(rev) {
        GX.PokerEvent.Instance.calllordRobResult.call(rev);
    }
    Cmd.OnLandlordCallCmd_CS = OnLandlordCallCmd_CS;
    /**
     *  C->S 踢 操作请求
     *  S->C 踢 操作通知
     */
    function OnKickPlayCmd_CS(rev) {
        GX.PokerEvent.Instance.kickPlay.call(rev);
    }
    Cmd.OnKickPlayCmd_CS = OnKickPlayCmd_CS;
    /**
     * 轮到玩家踢操作
     */
    function OnKickPlayOptionalCmd_S(rev) {
        if (!rev.uid)
            return;
        var operate = new game.KickOperateData();
        operate.uid = rev.uid;
        operate.endTime = rev.endTime;
        operate.leftSec = rev.leftSec;
        game.RoomData.Instance.kickOperate = operate;
    }
    Cmd.OnKickPlayOptionalCmd_S = OnKickPlayOptionalCmd_S;
    /**
     * 产生地主通知
     */
    function OnLandlordUpdateCmd_S(rev) {
        game.RoomData.Instance.landlordUid = rev.uid;
        if (rev.threeCard) {
            game.RoomData.Instance.threeCard = rev.threeCard;
            var seatdata = game.PokerFunction.GetSeatDataByUid(rev.uid);
            if (seatdata == null)
                return;
            seatdata.handCardSum += rev.threeCard.length;
            if (rev.uid == uniLib.NetMgr.UID || game.RoomInfo.getInstance().video == 1) {
                var handcards = seatdata.handCards.deepcopy();
                seatdata.clearHandCard();
                for (var _i = 0, _a = rev.threeCard; _i < _a.length; _i++) {
                    var item = _a[_i];
                    handcards.push(item);
                }
                var sortFunction = game.PokerFunction.handCardSort;
                if (sortFunction)
                    handcards = sortFunction(handcards);
                for (var _b = 0, handcards_1 = handcards; _b < handcards_1.length; _b++) {
                    var item = handcards_1[_b];
                    seatdata.addHandCard(item);
                }
                game.RoomData.Instance.removeLeftCard(rev.threeCard);
            }
            GX.PokerEvent.Instance.threeCardAnimation.call();
        }
    }
    Cmd.OnLandlordUpdateCmd_S = OnLandlordUpdateCmd_S;
    /**
     * 系统通知
     */
    function OnSysMessageCmd_S(rev) {
        if (rev.code != null) {
            if (rev.msgType == Cmd.SysMessageCmd_S.MsgType.Bounce) {
                GX.Tips.showPopup(game.Language.TranslateByCode(rev.code));
            }
            else if (rev.msgType == Cmd.SysMessageCmd_S.MsgType.Text) {
                GX.Tips.showTips(game.Language.TranslateByCode(rev.code));
            }
            return;
        }
        var systemMessage = GX.PokerEvent.Instance.systemMessage;
        if (systemMessage.length <= 0) {
            switch (rev.msgType) {
                case Cmd.SysMessageCmd_S.MsgType.Text:
                    GX.Tips.showTips(rev.msg);
                    break;
                case Cmd.SysMessageCmd_S.MsgType.Bounce:
                    GX.Tips.showPopup(rev.msg);
                    break;
            }
            return;
        }
        systemMessage.call(rev);
    }
    Cmd.OnSysMessageCmd_S = OnSysMessageCmd_S;
    /**
     * 离开房间
     */
    function OnLeaveRoomCmd_CS(rev) {
        var uid = rev.uid ? rev.uid : uniLib.NetMgr.UID;
        var seatData = game.PokerFunction.GetSeatDataByUid(uid);
        if (seatData) {
            seatData.user = null;
            seatData.clearHandCard();
        }
        if (uid == uniLib.NetMgr.UID) {
            if (uniLib.Global.lastPingUpTimestamp != null) {
                uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
                uniLib.Global.lastPingUpTimestamp = null;
            }
            GX.PokerEvent.Instance.leaveRoom.call(rev);
        }
    }
    Cmd.OnLeaveRoomCmd_CS = OnLeaveRoomCmd_CS;
    /**
    * 离开房间  暂时用于车行争霸，百家乐
    */
    function OnLeaveRoomCmd_S(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        GX.PokerEvent.Instance.leaveRoom.call(rev);
    }
    Cmd.OnLeaveRoomCmd_S = OnLeaveRoomCmd_S;
    /**
     * 离开房间  暂时用于车行争霸，百家乐
     */
    function OnLeaveRoomCmd_Brd(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        GX.PokerEvent.Instance.leaveRoom_Brd.call(rev);
    }
    Cmd.OnLeaveRoomCmd_Brd = OnLeaveRoomCmd_Brd;
    /**
     * 单局结算通知
     */
    function OnRoundResultCmd_S(rev) {
        if (!rev.isReplenish) {
            for (var _i = 0, _a = game.RoomData.Instance.seatList; _i < _a.length; _i++) {
                var item = _a[_i];
                item.isReady = false;
                item.betCount = 0;
                item.curBetCount = 0;
            }
        }
        if (rev.resultList && rev.resultList instanceof Array) {
            for (var _b = 0, _c = rev.resultList; _b < _c.length; _b++) {
                var item = _c[_b];
                if (!item.user)
                    continue;
                var userData = game.PokerFunction.GetUserInfoByUid(item.user.uid);
                if (userData == null)
                    continue;
                item.user.gender = userData.gender;
                item.user.name = userData.nickName;
                item.user.headurl = userData.headUrl;
            }
        }
        GX.PokerEvent.Instance.roundResult.call(rev);
        var histroy = new Cmd.History.HistoryInfo();
        histroy.roundWinLose = rev.winLose;
        histroy.lottery = rev.lottery;
        if (rev.myData) {
            histroy.profit = rev.myData.profit;
        }
        if (rev.happyPoint) {
            game.RoomData.Instance.happyPoint = rev.happyPoint;
        }
        game.RoomData.Instance.addRoundWinLose(histroy);
        var resultList = rev.resultList;
        if (resultList) {
            for (var _d = 0, resultList_1 = resultList; _d < resultList_1.length; _d++) {
                var item = resultList_1[_d];
                if (item.user == null)
                    continue;
                var user = game.PokerFunction.GetUserInfoByUid(item.user.uid);
                if (!user)
                    continue;
                if (item.user.point != null) {
                    user.point = item.user.point;
                }
            }
        }
        for (var _e = 0, _f = game.RoomData.Instance.seatList; _e < _f.length; _e++) {
            var item = _f[_e];
            if (item.user) {
                item.user.isInGame = false;
            }
        }
    }
    Cmd.OnRoundResultCmd_S = OnRoundResultCmd_S;
    /**
     * 游戏托管
     */
    function OnHostUpdateRoomCmd_CS(rev) {
        var user = game.PokerFunction.GetUserInfoByUid(rev.uid);
        if (user) {
            user.isTrust = rev.yesOrNo;
        }
        var seat = game.PokerFunction.GetSeatDataByUid(rev.uid);
        if (seat != null) {
            if (rev.hostType != null && (rev.hostType == 1 || rev.hostType == 2)) {
                seat.onlineState = Cmd.OnlineState.OnlineState_Hosting;
            }
            else if (rev.hostType != null && rev.hostType == 0) {
                seat.onlineState = Cmd.OnlineState.OnlineState_Online;
            }
        }
    }
    Cmd.OnHostUpdateRoomCmd_CS = OnHostUpdateRoomCmd_CS;
    /**
     * 牌局结束
     */
    function OnFinalResult_S(rev) {
        if (rev.recordList && rev.recordList instanceof Array) {
            for (var _i = 0, _a = rev.recordList; _i < _a.length; _i++) {
                var item = _a[_i];
                var user = item.user;
                if (!user)
                    continue;
                var userData = game.PokerFunction.GetUserInfoByUid(user.uid);
                if (!userData) {
                    continue;
                }
                user.gender = user.gender ? user.gender : userData.gender;
                user.name = user.name ? user.name : userData.nickName;
                user.headurl = user.headurl ? user.headurl : userData.headUrl;
            }
        }
        if (!rev.isNew) {
            GX.PokerEvent.Instance.gameFinalSettle.call(rev);
        }
        else {
            game.RoomData.Instance.fianlData = null;
            game.RoomData.Instance.fianlData = rev; //保存总结算数据
        }
    }
    Cmd.OnFinalResult_S = OnFinalResult_S;
    /**
     * 服务器逻辑时间
     */
    function OnGameTimeSyncCmd_CS(rev) {
        game.GameTime.responseSync(rev.stamp);
    }
    Cmd.OnGameTimeSyncCmd_CS = OnGameTimeSyncCmd_CS;
    /**
     * 换牌GM
     */
    function OnGmAvailableCardUpdateCmd_CS(rev) {
        GX.PokerEvent.Instance.gmAvailableCardUpdate.call(rev);
    }
    Cmd.OnGmAvailableCardUpdateCmd_CS = OnGmAvailableCardUpdateCmd_CS;
    /**
     * 门筹码更新
     */
    function OnDoorUpdataCmd_S(rev) {
        if (rev.DoorChips == null || !(rev.DoorChips instanceof Array))
            return;
        var doorDatas = game.RoomData.Instance.doorDatas;
        if (doorDatas && doorDatas.length > 0) {
            var _loop_7 = function(item) {
                var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                var dif = 0;
                if (door.chipSum) {
                    dif = (item.chips * 10 - door.chipSum * 10) / 10;
                }
                else {
                    dif = item.chips;
                }
                door.chipSum = item.chips;
                door.playAllAnimation.call(dif);
            };
            for (var _i = 0, _a = rev.DoorChips; _i < _a.length; _i++) {
                var item = _a[_i];
                _loop_7(item);
            }
        }
        //bashi游戏bet字段也需要更新game.RoomData.Instance.betData数据
        var gameid = game.GameId();
        if (gameid > 8500 && gameid < 10000) {
            var betData = game.RoomData.Instance.betData;
            var _loop_8 = function(item) {
                if (betData) {
                    var betSum = betData.betNumber.first(function (v) { return v.doorId == item.doorId; });
                    if (betSum != null)
                        betSum.chips = item.chips;
                }
            };
            for (var _b = 0, _c = rev.DoorChips; _b < _c.length; _b++) {
                var item = _c[_b];
                _loop_8(item);
            }
            game.RoomData.Instance.betData = betData;
        }
    }
    Cmd.OnDoorUpdataCmd_S = OnDoorUpdataCmd_S;
    /**
     * 押注数更新
     */
    function OnBetUpdateCmd_S(rev) {
        if (rev == null || (rev != null && rev.betData == null))
            return;
        game.MessageHandle.refrenshAllBetData(rev.betData);
    }
    Cmd.OnBetUpdateCmd_S = OnBetUpdateCmd_S;
    Cmd.settleTimer = 0;
    /**
     * 游戏状态新
     */
    function OnGameStatusUpdateCmd_S(rev) {
        GX.PokerEvent.Instance.gameStateUpdate.call(rev.statusInfo, rev);
        if (rev.statusInfo == null)
            return;
        var statusInfo = rev.statusInfo;
        game.Timer.clearTimeout(Cmd.settleTimer);
        if (statusInfo.status == Cmd.GameStatus.GameStatus_Settle) {
            var main_1 = game.PokerFunction.MainUser;
            if (main_1 == null)
                return;
            var gameid = game.GameId();
            var point_1 = main_1.point;
            var now = game.GameTime.serverNow();
            var leftTime = statusInfo.endTime - now;
            leftTime -= (gameid == 8507 ? 6000 : 3000);
            leftTime = leftTime > 0 ? leftTime : 0;
            Cmd.settleTimer = game.Timer.setTimeout(function () {
                if (main_1 == null)
                    return;
                var awardPoint = main_1.point - point_1;
                if (awardPoint > 0) {
                    uniLib.Global.dispatchEvent(uniLib.CustomEvent.ClientSettleFinish, { awardPoint: awardPoint });
                }
            }, this, leftTime);
        }
    }
    Cmd.OnGameStatusUpdateCmd_S = OnGameStatusUpdateCmd_S;
    /**
     * 等待上庄列表更新
    */
    function OnBankerWaitListUpdateCmd_S(rev) {
        rev.waitList = (rev.waitList && rev.waitList instanceof Array) ? rev.waitList : [];
        if (rev.op == Cmd.UpdateOperator.Replace) {
            game.RoomData.Instance.bankerWait = rev.waitList;
        }
        else if (rev.op == Cmd.UpdateOperator.Update) {
            var waitBankerList = game.RoomData.Instance.bankerWait;
            var _loop_9 = function(item) {
                var banker = waitBankerList.first(function (v) { return v.uid == item.uid; });
                if (!banker) {
                    waitBankerList.push(item);
                    return "continue";
                }
                banker.gender = banker.gender;
                banker.point = banker.point;
                banker.headurl = banker.headurl;
                banker.name = banker.name;
            };
            for (var _i = 0, _a = rev.waitList; _i < _a.length; _i++) {
                var item = _a[_i];
                var state_9 = _loop_9(item);
                if (state_9 === "continue") continue;
            }
            game.RoomData.Instance.bankerWait = waitBankerList;
            game.RoomData.Instance.bankerWaitChanged.call(waitBankerList);
        }
        else if (rev.op == Cmd.UpdateOperator.Delete) {
            var waitBankerList = game.RoomData.Instance.bankerWait;
            waitBankerList.removeAll(function (v) { return rev.waitList.seek(function (i) { return i.uid == v.uid; }); });
            game.RoomData.Instance.bankerWaitChanged.call(waitBankerList);
        }
    }
    Cmd.OnBankerWaitListUpdateCmd_S = OnBankerWaitListUpdateCmd_S;
    /**
     * 更新庄家信息
     */
    function OnBankerUpdateCmd_S(rev) {
        if (rev.banker) {
            var banker = game.BankerData.Instance.banker;
            if (!banker || banker.uid != rev.banker.uid) {
                var user = new game.UserInfo(rev.banker.uid);
                game.BankerData.Instance.banker = user;
            }
            banker = game.BankerData.Instance.banker;
            banker.updataInfo(rev.banker);
        }
        GX.PokerEvent.Instance.bankerDataUpdate.call(rev);
    }
    Cmd.OnBankerUpdateCmd_S = OnBankerUpdateCmd_S;
    /**
     * 底牌更新通知
     */
    function OnBottomCardUpdateCmd_S(rev) {
        game.RoomData.Instance.setbottomCard(rev.bottomCard, game.UpdataType.UPDATA, rev.num);
    }
    Cmd.OnBottomCardUpdateCmd_S = OnBottomCardUpdateCmd_S;
    /**
     * 排名通知
     */
    function OnRankUpdateCmd_S(rev) {
        GX.PokerEvent.Instance.rankUpdateMulticast.call(rev);
    }
    Cmd.OnRankUpdateCmd_S = OnRankUpdateCmd_S;
    /**
     * 历史记录
     */
    function OnHistoryUpdateCmd_CS(rev) {
        GX.PokerEvent.Instance.historyUpdate.call(rev);
    }
    Cmd.OnHistoryUpdateCmd_CS = OnHistoryUpdateCmd_CS;
    /**
     * 在线状态更新
     */
    function OnOnlineStateRoomCmd_S(rev) {
        var seat = game.PokerFunction.GetSeatDataByUid(rev.uid);
        if (seat) {
            seat.onlineState = rev.state;
        }
    }
    Cmd.OnOnlineStateRoomCmd_S = OnOnlineStateRoomCmd_S;
    /**
    * 送礼
    */
    function OnSendGiftRoomCmd_Brd(rev) {
        GX.PokerEvent.Instance.SendGiftEvent.call(rev);
    }
    Cmd.OnSendGiftRoomCmd_Brd = OnSendGiftRoomCmd_Brd;
    /**
     *  C-&gt;S 下注请求
     *  S-&gt;C 下注通知
     */
    function OnSitDownCmd_CS(rev) {
        if (!rev)
            return;
        GX.PokerEvent.Instance.userSeatdown.call(rev);
    }
    Cmd.OnSitDownCmd_CS = OnSitDownCmd_CS;
    /**
     *  通知客户端显示具体的牌
     */
    function OnShowCards_S(rev) {
        GX.PokerEvent.Instance.showCardsEvent.call(rev);
    }
    Cmd.OnShowCards_S = OnShowCards_S;
    /**
     *  开始游戏操作位更新
     */
    function OnStartGameOpIdUpdate_S(rev) {
        game.RoomData.Instance.startGameOpId = rev.startGameOpId;
    }
    Cmd.OnStartGameOpIdUpdate_S = OnStartGameOpIdUpdate_S;
    /**
     * 座位状态更新
     */
    function OnSeatStateUpdate_S(rev) {
        if (rev == null)
            return;
        var seat = game.PokerFunction.GetSeatDataByUid(rev.uid);
        if (seat == null)
            return;
        var list = seat.seatStateList;
        rev.stateList = rev.stateList != null && rev.stateList instanceof Array ? rev.stateList : [];
        if (rev.op == Cmd.UpdateOperator.Delete) {
            list.removeAll(function (v) { return rev.stateList.seek(function (i) { return i == v; }); });
        }
        else if (rev.op == Cmd.UpdateOperator.Update) {
            var _loop_10 = function(item) {
                var state = list.first(function (v) { return v == item; });
                seat.addSeatState = item;
                if (!state) {
                    list.push(item);
                    return "continue";
                }
            };
            for (var _i = 0, _a = rev.stateList; _i < _a.length; _i++) {
                var item = _a[_i];
                var state_10 = _loop_10(item);
                if (state_10 === "continue") continue;
            }
        }
        else if (rev.op = Cmd.UpdateOperator.Replace) {
            list = rev.stateList;
        }
        seat.seatStateList = list;
    }
    Cmd.OnSeatStateUpdate_S = OnSeatStateUpdate_S;
    /**
     * 组成牛牛牌型提示
     */
    function OnNeedNiuNiuCard_S(rev) {
        GX.PokerEvent.Instance.NiuNiuTipsEvent.call(rev);
    }
    Cmd.OnNeedNiuNiuCard_S = OnNeedNiuNiuCard_S;
    /**
    * 展示牌提示
    */
    function OnDisplayCardCmd_CS(rev) {
        GX.PokerEvent.Instance.DisplayCardEvent.call(rev);
        if (rev.each) {
            var list = rev.each;
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                if (item.kengPoint) {
                    var seatData = game.PokerFunction.GetSeatDataByUid(item.user.uid);
                    seatData.KengPoint = item.kengPoint;
                }
            }
        }
    }
    Cmd.OnDisplayCardCmd_CS = OnDisplayCardCmd_CS;
    /**
    * 保险阶段开始
    */
    function OnInsuranceStartCmd_S(rev) {
        if (rev.seatCardList && rev.seatCardList.length) {
            for (var _i = 0, _a = rev.seatCardList; _i < _a.length; _i++) {
                var card = _a[_i];
                var seatdata = game.PokerFunction.GetSeatDataBySeatId(card.seatId);
                seatdata.showHandCardEvent.call(card.handCardList, seatdata.user.uid);
            }
        }
        if (rev.circleEnd) {
            game.RoomData.Instance.setbottomCard(rev.circleEnd.bottomCard, game.UpdataType.UPDATA);
            GX.PokerEvent.Instance.circleEndEvent.call(rev.circleEnd);
        }
        GX.PokerEvent.Instance.insuranceStartEvent.call(rev);
    }
    Cmd.OnInsuranceStartCmd_S = OnInsuranceStartCmd_S;
    /**
    * 保险可购买通知
    */
    function OnInsuranceNewOpCmd_S(rev) {
        GX.PokerEvent.Instance.InsuranceNewOpEvent.call(rev);
    }
    Cmd.OnInsuranceNewOpCmd_S = OnInsuranceNewOpCmd_S;
    /**
     *  C-&gt;S 买入保险请求
     *  S-&gt;C 买入保险通知
     */
    function OnInsuranceBuyCmd_CS(rev) {
        GX.PokerEvent.Instance.insuranceBuyEvent.call(rev);
    }
    Cmd.OnInsuranceBuyCmd_CS = OnInsuranceBuyCmd_CS;
    /**
     * 购买保险结束
     */
    function OnInsuranceBuyEndCmd_S(rev) {
        GX.PokerEvent.Instance.insuranceBuyEvent.call(rev);
    }
    Cmd.OnInsuranceBuyEndCmd_S = OnInsuranceBuyEndCmd_S;
    /**
     * 购买记分牌
     */
    function OnRoomBuyBringCmd_CS(rev) {
        GX.PokerEvent.Instance.buyBringEvent.call(rev, true);
    }
    Cmd.OnRoomBuyBringCmd_CS = OnRoomBuyBringCmd_CS;
    /**
     * 房间数字更新
     */
    function OnGameNumberUpdateCmd_S(rev) {
        for (var i = 0; i < rev.number.length; i++) {
            switch (rev.number[i].typ) {
                case Cmd.GameNumber.Type.PointBase:
                    game.RoomData.Instance.pointBase = rev.number[i].value;
                    break;
                case Cmd.GameNumber.Type.PointBottom:
                    game.RoomData.Instance.bottomPoint = rev.number[i].value;
                    break;
                case Cmd.GameNumber.Type.Pan:
                    game.RoomData.Instance.tabPoints = rev.number[i].value;
                    game.RoomData.Instance.tabPointChange.call(game.RoomData.Instance.tabPoints);
                    break;
                case Cmd.GameNumber.Type.Pool:
                    game.RoomData.Instance.chipPoolNum = rev.number[i].value;
                    break;
            }
        }
    }
    Cmd.OnGameNumberUpdateCmd_S = OnGameNumberUpdateCmd_S;
    /**
     * 投票数据更新
     */
    function OnVoteUpdateCmd_S(rev) {
        GX.PokerEvent.Instance.VoteUpdate.call(rev);
    }
    Cmd.OnVoteUpdateCmd_S = OnVoteUpdateCmd_S;
    /**
     * 更新可以进行的动作
     */
    function OnUpdateActionCmd_S(rev) {
        if (rev.actList)
            GX.PokerEvent.Instance.ActionUpdate.call(rev.actList);
    }
    Cmd.OnUpdateActionCmd_S = OnUpdateActionCmd_S;
    /**
     * 比牌结果通知
     */
    function OnCompareCardCmd_CS(rev) {
        GX.PokerEvent.Instance.compareResultEvent.call(rev);
    }
    Cmd.OnCompareCardCmd_CS = OnCompareCardCmd_CS;
    /**
     * 比牌结果通知
     */
    function OnRiseBlindCmd_S(rev) {
        game.RoomData.Instance.smallBlind = rev.smallBlind;
        game.RoomData.Instance.blindLeftSec = rev.leftSec;
    }
    Cmd.OnRiseBlindCmd_S = OnRiseBlindCmd_S;
    /**
     * 更新玩家个人信息
     */
    // export function OnPersonalUpdate_CS(rev: Cmd.PersonalUpdate_CS) {
    //     game.Action.personalUpdate.call(rev);
    // }
    /**
     * 收藏牌谱更新(只有德州扑克游戏端用，放在poker处理)
     */
    function OnRoundRecordIdUpdateCmd_CS(rev) {
        var collect = rev.collect;
        if (collect == null || !(collect instanceof Array))
            return;
        if (rev.op == Cmd.UpdateOperator.Replace) {
            game.CustomData.collectionList = collect;
        }
        else if (rev.op == Cmd.UpdateOperator.Delete) {
            var _loop_11 = function(id) {
                game.CustomData.collectionList.deletefirst(function (v) { return v == id; });
            };
            for (var _i = 0, collect_1 = collect; _i < collect_1.length; _i++) {
                var id = collect_1[_i];
                _loop_11(id);
            }
        }
        else if (rev.op == Cmd.UpdateOperator.Update) {
            var _loop_12 = function(id) {
                if (!game.CustomData.collectionList.seek(function (v) { return v == id; })) {
                    game.CustomData.collectionList.push(id);
                }
            };
            for (var _a = 0, collect_2 = collect; _a < collect_2.length; _a++) {
                var id = collect_2[_a];
                _loop_12(id);
            }
        }
        else {
            game.CustomData.collectionList = collect;
        }
    }
    Cmd.OnRoundRecordIdUpdateCmd_CS = OnRoundRecordIdUpdateCmd_CS;
    /**
     * 收藏牌谱回复
     */
    function OnRoundRecordCollectCmd_CS(rev) {
        GX.PokerEvent.Instance.collectResultEvent.call(rev);
    }
    Cmd.OnRoundRecordCollectCmd_CS = OnRoundRecordCollectCmd_CS;
    /**
     * 强制盲注更新通知
     * @param  {Cmd.StraddleIdUpdateCmd_S} rev
     */
    function OnStraddleIdUpdateCmd_S(rev) {
        GX.PokerEvent.Instance.straddleChange.call(rev);
    }
    Cmd.OnStraddleIdUpdateCmd_S = OnStraddleIdUpdateCmd_S;
    /**
     * 排行榜
     */
    function OnRankingListCmd_CS(rev) {
        game.Action.rankingListEvent.call(rev);
    }
    Cmd.OnRankingListCmd_CS = OnRankingListCmd_CS;
    function OnPlayingUpdateCmd_CS(rev) {
        GX.PokerEvent.Instance.PlayingUpdateEvent.call(rev);
    }
    Cmd.OnPlayingUpdateCmd_CS = OnPlayingUpdateCmd_CS;
    /**
     * 观众信息更新
     */
    function OnAudienceUpdateCmd_CS(rev) {
        GX.PokerEvent.Instance.AudienceUpdate.call(rev);
    }
    Cmd.OnAudienceUpdateCmd_CS = OnAudienceUpdateCmd_CS;
    /**
     * 出鱼信息
     */
    function OnSpawnFishCmd_S(rev) {
        var serverNow = game.GameTime.serverNow();
        for (var _i = 0, _a = rev.fishlist; _i < _a.length; _i++) {
            var item = _a[_i];
            if (serverNow - item.spawnTime > 1000) {
                return;
            }
            item.spawnTime = serverNow;
        }
        game.Action.spawnFishEvent.call(rev);
    }
    Cmd.OnSpawnFishCmd_S = OnSpawnFishCmd_S;
    /**
     * 打中鱼列表
     */
    function OnHitFishCmd_CS(rev) {
        game.Action.hitFishEvent.call(rev);
    }
    Cmd.OnHitFishCmd_CS = OnHitFishCmd_CS;
    /**
     * 打死列表
     */
    function OnDeadFishCmd_S(rev) {
        for (var _i = 0, _a = rev.list; _i < _a.length; _i++) {
            var item = _a[_i];
            var user = game.PokerFunction.GetUserByUid(item.uid);
            if (user) {
                for (var _b = 0, _c = item.list; _b < _c.length; _b++) {
                    var fish = _c[_b];
                    user.point += fish.score;
                }
            }
        }
        game.Action.deadFishEvent.call(rev);
    }
    Cmd.OnDeadFishCmd_S = OnDeadFishCmd_S;
    /**
     * 改变场景
     */
    function OnChangeSceneCmd_S(rev) {
        game.Action.changeSceneEvent.call(rev);
    }
    Cmd.OnChangeSceneCmd_S = OnChangeSceneCmd_S;
    /**
     * 操作通知
     */
    function OnActionCmd_CS(rev) {
        var action = rev.act;
        var user = game.PokerFunction.GetSeatDataByUid(action.uid);
        if (user) {
            if (action.op == Cmd.Operation.ChangeBattery) {
                user.batteryIndex = action.value;
            }
            else if (action.op == Cmd.Operation.Lock) {
                user.setLock(true, action.value);
            }
            else if (action.op == Cmd.Operation.Unlock) {
                user.setLock(false, null);
            }
        }
        game.Action.actionEvent.call(rev);
    }
    Cmd.OnActionCmd_CS = OnActionCmd_CS;
    /**
     * 操作超时
     */
    function OnBetTimeoutRoomCmd_S(rev) {
        if (Cmd.betTimeoutTipsPanel && Cmd.betTimeoutTipsPanel.parent) {
            return;
        }
        var time = game.Config.BetTimeout;
        if (!time || time == 0) {
            var cmd = new Cmd.LeaveRoomCmd_CS();
            game.PokerFunction.tcpSend(cmd);
            return;
        }
        var optype = rev.optype;
        var str = optype == 1 ? ("金币不足，" + time + "秒后退出！") : (time + "").padLeft(2, "0");
        var tips = new game.BetTimeoutTipsPanel();
        Cmd.betTimeoutTipsPanel = tips;
        tips.touchEnabled = false;
        tips.touchChildren = false;
        tips.x = (uniLib.Global.screenWidth - tips.width) / 2;
        tips.y = (uniLib.Global.screenHeight - tips.height) / 2;
        optype == 1 ? tips.setLabel(str) : tips.setBitmapLabel(str);
        GX.GameLayerManager.addUIToPop(tips);
        tips.timer = game.Timer.setInterval(function () {
            time--;
            time = time < 0 ? 0 : time;
            var str = optype == 1 ? ("金币不足，" + time + "秒后退出！") : (time + "").padLeft(2, "0");
            optype == 1 ? tips.setLabel(str) : tips.setBitmapLabel(str);
            if (time == 0) {
                var cmd = new Cmd.LeaveRoomCmd_CS();
                game.PokerFunction.tcpSend(cmd);
                tips.close();
            }
        }, this, 1000);
    }
    Cmd.OnBetTimeoutRoomCmd_S = OnBetTimeoutRoomCmd_S;
})(Cmd || (Cmd = {}));

var game;
(function (game) {
    /**
     * 消息处理方法
     */
    var MessageHandle = (function () {
        function MessageHandle() {
        }
        /**
         * 更新所有座位数据
         */
        MessageHandle.ReplaceSeatData = function (seatList) {
            if (seatList == null || !(seatList instanceof Array))
                return;
            for (var _i = 0, _a = game.RoomData.Instance.seatList; _i < _a.length; _i++) {
                var item = _a[_i];
                item.user = null;
                item.clearHandCard();
                item.setCardtype(Cmd.CardSetType.CardSetType_None);
                item.curBetCount = 0;
            }
            game.RoomData.Instance.clearSeatList();
            var _loop_1 = function(item) {
                var seatData = game.RoomData.Instance.seatList.first(function (v) { return v.seatId == item.seatId; });
                if (!seatData) {
                    seatData = new game.SeatData(item.seatId);
                    if (item.role) {
                        seatData.user = new game.UserInfo(item.role.uid);
                    }
                    game.RoomData.Instance.addSeat(seatData);
                }
                if (item.role == null)
                    return "continue";
                seatData.user = new game.UserInfo(item.role.uid);
                seatData.user.updataInfo(item.role);
                seatData.user.isTrust = item.isHost;
                seatData.isReady = false;
                seatData.isReady = item.isReady;
                seatData.isInGame = item.isInGame;
                seatData.outCardList = item.outCardList;
                seatData.placeCards = item.placeCardList;
                seatData.isSit = item.isSit;
                seatData.seatStateList = item.stateList;
                seatData.recommendList = item.recommend;
                seatData.batteryIndex = item.batteryId;
                seatData.setLock(item.lockFishId ? true : false, item.lockFishId);
                if (item.onlineState == null)
                    item.onlineState = Cmd.OnlineState.OnlineState_Online;
                seatData.onlineState = item.onlineState;
            };
            for (var _b = 0, seatList_1 = seatList; _b < seatList_1.length; _b++) {
                var item = seatList_1[_b];
                var state_1 = _loop_1(item);
                if (state_1 === "continue") continue;
            }
            // 客户端通过手牌判断是否游戏开始
            var startGame = false;
            for (var _c = 0, seatList_2 = seatList; _c < seatList_2.length; _c++) {
                var item = seatList_2[_c];
                startGame = (item.handCardList && item.handCardList.length) ? true : false;
                if (startGame)
                    break;
            }
            game.RoomData.Instance.startGame = startGame;
            //服务器下发所有玩家牌
            var _loop_2 = function(item) {
                var seatData = game.RoomData.Instance.seatList.first(function (v) { return v.seatId == item.seatId; });
                var cardList = item.handCardList;
                if (seatData && seatData.user && seatData.user.uid == uniLib.NetMgr.UID) {
                    game.RoomData.Instance.multiple = item.multiple;
                }
                seatData.handCardSum = item.handCardNum == null ? 0 : item.handCardNum;
                seatData.kingNum = item.kingNum;
                if (!cardList || !cardList.length)
                    return "continue";
                seatData.clearHandCard();
                var sortFunction = game.PokerFunction.handCardSort;
                if (sortFunction)
                    cardList = sortFunction(cardList);
                for (var _d = 0, cardList_1 = cardList; _d < cardList_1.length; _d++) {
                    var cardId = cardList_1[_d];
                    seatData.addHandCard(cardId, game.CardActionType.RECONNEC);
                }
                seatData.KengPoint = item.kengPoint;
            };
            for (var _e = 0, seatList_3 = seatList; _e < seatList_3.length; _e++) {
                var item = seatList_3[_e];
                var state_2 = _loop_2(item);
                if (state_2 === "continue") continue;
            }
            GX.PokerEvent.Instance.dealCardEnd.call();
            //需要在确定是否开始游戏后才能下发的值
            var _loop_3 = function(item) {
                var seatData = game.RoomData.Instance.seatList.first(function (v) { return v.seatId == item.seatId; });
                if (!seatData.user) {
                    return "continue";
                }
                seatData.user.cutScore = item.cutScore;
                seatData.user.cardScore = item.cardScore;
                seatData.listened = item.listened == 1 ? true : false;
                //总投注数
                if (item.betCount) {
                    seatData.curBetCount = (Number)((item.betCount + "").split(".")[1]);
                    seatData.betCount = Math.floor(item.betCount);
                }
            };
            for (var _f = 0, seatList_4 = seatList; _f < seatList_4.length; _f++) {
                var item = seatList_4[_f];
                var state_3 = _loop_3(item);
                if (state_3 === "continue") continue;
            }
        };
        /**
         * 更新未坐下玩家数据
         */
        MessageHandle.ReplaceAudienceList = function (audienceList) {
            audienceList = audienceList && audienceList instanceof Array ? audienceList : [];
            game.RoomData.Instance.clearAudienceList();
            var _loop_4 = function(item) {
                if (!item.user)
                    return "continue";
                var audience = game.RoomData.Instance.audienceList.first(function (v) { return v.uid == item.user.uid; });
                if (!audience) {
                    audience = new game.UserInfo(item.user.uid);
                    game.RoomData.Instance.addAudience(audience);
                }
                audience.updataInfo(item.user);
                audience.statistics = item.statistics;
            };
            for (var _i = 0, audienceList_1 = audienceList; _i < audienceList_1.length; _i++) {
                var item = audienceList_1[_i];
                var state_4 = _loop_4(item);
                if (state_4 === "continue") continue;
            }
            GX.PokerEvent.Instance.audienceUpdataEvent.call(audienceList);
        };
        /**
         * 更新当前牌局操作
         */
        MessageHandle.ReplaceRoundData = function (room) {
            if (room == null || room.roundData == null) {
                return;
            }
            var roundData = room.roundData;
            game.MessageHandle.updataTexas(roundData.texas);
            var roomdata = game.RoomData.Instance;
            if (roundData.status != null) {
                var info = new Cmd.GameStatusInfo();
                info.status = roundData.status;
                info.leftSec = roundData.leftSec;
                info.endTime = roundData.opEndTime;
                GX.PokerEvent.Instance.gameStateUpdate.call(info);
            }
            roomdata.threeCard = roundData.threeCard;
            if (roundData.tabPoints) {
                game.RoomData.Instance.tabPoints = roundData.tabPoints;
                game.RoomData.Instance.relogTabPointsEvent.call(roomdata.tabPoints);
            }
            if (roundData.betDoor) {
                MessageHandle.refrenshAllBetData(roundData.betDoor);
            }
            if (roundData.betMe) {
                MessageHandle.refrenshMeBetData(roundData.betMe);
                var betNumber = roundData.betMe ? roundData.betMe.betNumber : [];
                betNumber = betNumber && betNumber instanceof Array ? betNumber : [];
                var doorDatas = game.RoomData.Instance.doorDatas;
                if (doorDatas && doorDatas.length > 0) {
                    var _loop_5 = function(item) {
                        var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                        if (!door)
                            return { value: void 0 };
                        door.chipMain = item.chips;
                    };
                    for (var _i = 0, betNumber_1 = betNumber; _i < betNumber_1.length; _i++) {
                        var item = betNumber_1[_i];
                        var state_5 = _loop_5(item);
                        if (typeof state_5 === "object") return state_5.value;
                    }
                }
            }
            if (roundData.bottomCard) {
                //短线后的底牌
                game.RoomData.Instance.setbottomCard(roundData.bottomCard, game.UpdataType.RECONNEC);
            }
            if (roundData.lastCardNum != null) {
                game.RoomData.Instance.lastCardNum = roundData.lastCardNum;
            }
            if (roundData.multiple != null) {
                game.RoomData.Instance.multiple = roundData.multiple;
            }
            if (roundData.straddleId != null) {
                game.RoomData.Instance.straddleId = roundData.straddleId;
            }
            GX.PokerEvent.Instance.rankListMulticast.call(roundData.rankList);
            var landlordSeat = game.PokerFunction.GetSeatDataBySeatId(roundData.lordSeatId);
            if (landlordSeat)
                roomdata.landlordUid = landlordSeat.user.uid;
            if (roundData.pointBase != null) {
                game.RoomData.Instance.pointBase = roundData.pointBase;
            }
            //有控制权阶段
            var userInfo = game.PokerFunction.GetUserInfoBySeatId(roundData.opSeatId);
            if (!userInfo) {
                return;
            }
            //抢地主阶段
            if (roundData.callLordData) {
                var operate_1 = new game.RobLordOperateData();
                operate_1.uid = userInfo.uid;
                operate_1.endTime = roundData.opEndTime;
                operate_1.leftSec = roundData.leftSec;
                if (roundData.opList && (roundData.opList instanceof Array)) {
                    operate_1.operateList = roundData.opList;
                }
                roomdata.robLordOperate = operate_1;
                var callLordData = roundData.callLordData;
                if (callLordData.call0 && callLordData.call0.length > 0) {
                    for (var _a = 0, _b = callLordData.call0; _a < _b.length; _a++) {
                        var item = _b[_a];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 0;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                if (callLordData.call1 && callLordData.call1.length > 0) {
                    for (var _c = 0, _d = callLordData.call1; _c < _d.length; _c++) {
                        var item = _d[_c];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 1;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                if (callLordData.call2 && callLordData.call2.length > 0) {
                    for (var _e = 0, _f = callLordData.call2; _e < _f.length; _e++) {
                        var item = _f[_e];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 2;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                if (callLordData.call3 && callLordData.call3.length > 0) {
                    for (var _g = 0, _h = callLordData.call3; _g < _h.length; _g++) {
                        var item = _h[_g];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 3;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                if (callLordData.call4 && callLordData.call4.length > 0) {
                    for (var _j = 0, _k = callLordData.call4; _j < _k.length; _j++) {
                        var item = _k[_j];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 4;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                if (callLordData.call5 && callLordData.call5.length > 0) {
                    for (var _l = 0, _m = callLordData.call5; _l < _m.length; _l++) {
                        var item = _m[_l];
                        var cmd = new Cmd.LandlordCallCmd_CS();
                        cmd.uid = game.PokerFunction.GetUserInfoBySeatId(item).uid;
                        cmd.point = 5;
                        GX.PokerEvent.Instance.calllordRobResult.call(cmd);
                    }
                }
                return;
            }
            if (roundData.robLordData) {
                var sayno = roundData.robLordData.sayNo;
                if (sayno) {
                    for (var _o = 0, sayno_1 = sayno; _o < sayno_1.length; _o++) {
                        var item = sayno_1[_o];
                        var userInfo_1 = game.PokerFunction.GetUserInfoBySeatId(item);
                        if (userInfo_1 == null)
                            continue;
                        var result = new Cmd.LandlordRobCmd_CS();
                        result.uid = userInfo_1.uid;
                        result.yesOrNo = false;
                        GX.PokerEvent.Instance.landlordRobResult.call(result);
                    }
                }
                var sayYes = roundData.robLordData.sayYes;
                if (sayYes) {
                    for (var _p = 0, sayYes_1 = sayYes; _p < sayYes_1.length; _p++) {
                        var item = sayYes_1[_p];
                        var userInfo_2 = game.PokerFunction.GetUserInfoBySeatId(item);
                        if (userInfo_2 == null)
                            continue;
                        var result = new Cmd.LandlordRobCmd_CS();
                        result.uid = userInfo_2.uid;
                        result.yesOrNo = true;
                        GX.PokerEvent.Instance.landlordRobResult.call(result);
                    }
                }
                var operate_2 = new game.RobLordOperateData();
                operate_2.uid = userInfo.uid;
                operate_2.endTime = roundData.opEndTime;
                operate_2.leftSec = roundData.leftSec;
                if (roundData.opList && (roundData.opList instanceof Array)) {
                    operate_2.operateList = roundData.opList;
                }
                roomdata.robLordOperate = operate_2;
                return;
            }
            //踢操作
            if (roundData.kickData) {
                var sayno = roundData.kickData.sayNo;
                if (sayno) {
                    for (var _q = 0, sayno_2 = sayno; _q < sayno_2.length; _q++) {
                        var item = sayno_2[_q];
                        var userInfo_3 = game.PokerFunction.GetUserInfoBySeatId(item);
                        if (userInfo_3 == null)
                            continue;
                        var kick = new Cmd.KickPlayCmd_CS();
                        kick.uid = userInfo_3.uid;
                        kick.yesOrNo = false;
                        GX.PokerEvent.Instance.kickPlay.call(kick);
                    }
                }
                var sayYes = roundData.kickData.sayYes;
                if (sayYes) {
                    for (var _r = 0, sayYes_2 = sayYes; _r < sayYes_2.length; _r++) {
                        var item = sayYes_2[_r];
                        var userInfo_4 = game.PokerFunction.GetUserInfoBySeatId(item);
                        if (userInfo_4 == null)
                            continue;
                        var kick = new Cmd.KickPlayCmd_CS();
                        kick.uid = userInfo_4.uid;
                        kick.yesOrNo = true;
                        GX.PokerEvent.Instance.kickPlay.call(kick);
                    }
                }
                var operate_3 = new game.KickOperateData();
                operate_3.uid = userInfo.uid;
                operate_3.endTime = roundData.opEndTime;
                roomdata.kickOperate = operate_3;
                return;
            }
            //出牌阶段
            var seatList = room.seatList;
            var isFirstOp = true;
            for (var _s = 0, seatList_5 = seatList; _s < seatList_5.length; _s++) {
                var item = seatList_5[_s];
                isFirstOp = true;
                if (item.role == null)
                    continue;
                var play = new Cmd.PlayCardCmd_CS();
                play.uid = item.role.uid;
                if (!item.outCardList && item.handCardNum >= 17)
                    continue;
                play.cardList = item.outCardList;
                if (item.role.uid != uniLib.NetMgr.UID && item.outCardList instanceof Array) {
                    isFirstOp = false;
                }
                GX.PokerEvent.Instance.playCard.call(play, false);
            }
            var operate = new game.OperateData();
            operate.uid = userInfo.uid;
            operate.endTime = roundData.opEndTime;
            operate.leftSec = roundData.leftSec;
            operate.raiseLine = roundData.raiseLine;
            operate.actList = roundData.actList;
            // operate.delay=
            if (isFirstOp)
                operate.isFirstOp = true;
            if (roundData.opList && (roundData.opList instanceof Array)) {
                operate.operateList = roundData.opList;
            }
            if (roundData.recommend && roundData.recommend instanceof Array && (operate.cardSetList == null || !operate.cardSetList.length)) {
                operate.cardSetList = new Array();
                for (var _t = 0, _u = roundData.recommend; _t < _u.length; _t++) {
                    var item = _u[_t];
                    operate.cardSetList.push(item.cardSet);
                }
                operate.cardList = roundData.recommend;
            }
            roomdata.operate = operate;
        };
        /**
         * 房间数据更新
         */
        MessageHandle.HBRoomDataUpdate = function (rev) {
            game.BankerData.Instance.banker = null;
            var bankerdata = rev.roomData.banker;
            if (bankerdata) {
                var banker = new game.UserInfo(bankerdata.uid);
                banker.headUrl = bankerdata.headurl;
                banker.nickName = bankerdata.name;
                banker.point = bankerdata.point;
                game.BankerData.Instance.banker = banker;
            }
            game.RoomData.Instance.bankerWait = rev.roomData.bankerWait;
            if (rev.roomData.history) {
                game.RoomData.Instance.roundWinLose = rev.roomData.history.data;
            }
            var roundData = rev.roomData.roundData;
            if (roundData == null) {
                return;
            }
            game.RoomData.Instance.betMax = roundData.betChipsMax;
            if (roundData.doorChipsSum && roundData.doorChipsSum instanceof Array) {
                var _loop_6 = function(item) {
                    var doorDatas = game.RoomData.Instance.doorDatas;
                    if (doorDatas && doorDatas.length > 0) {
                        var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                        door.chipSum = item.chips;
                        door.playAllAnimation.call(door.chipSum, item.potId, item.doorId);
                        if (item.actList && item.actList.length > 0) {
                            var info = new Cmd.BetRoomCmd_CS;
                            info.actList = item.actList;
                            info.betNumber = item;
                            info.act = new Cmd.Action;
                            if (item.actList && item.actList.length > 0) {
                                info.act.timestamp = item.actList[0].timestamp;
                            }
                            GX.PokerEvent.Instance.userBetEvent.call(info);
                        }
                    }
                    var gameid = game.GameId();
                    if (gameid > 8500 && gameid < 10000) {
                        game.RoomData.Instance.betData = game.MessageHandle.refrenshFourDoorData(item, game.RoomData.Instance.betData);
                    }
                };
                for (var _i = 0, _a = roundData.doorChipsSum; _i < _a.length; _i++) {
                    var item = _a[_i];
                    _loop_6(item);
                }
            }
            if (roundData.doorChipsMe && roundData.doorChipsMe instanceof Array) {
                var doorDatas = game.RoomData.Instance.doorDatas;
                if (doorDatas && doorDatas.length > 0) {
                    var _loop_7 = function(item) {
                        var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                        door.chipMain = item.chips;
                    };
                    for (var _b = 0, _c = roundData.doorChipsMe; _b < _c.length; _b++) {
                        var item = _c[_b];
                        _loop_7(item);
                    }
                }
            }
            if (roundData.doorCard && roundData.doorCard instanceof Array) {
                var doorDatas = game.RoomData.Instance.doorDatas;
                if (doorDatas && doorDatas.length > 0) {
                    var _loop_8 = function(item) {
                        var door = doorDatas.first(function (v) { return v.doorId == item.doorId; });
                        door.cardList = item.cardList;
                        door.cardType = item.cardType;
                        door.multiple = item.multiple;
                    };
                    for (var _d = 0, _e = roundData.doorCard; _d < _e.length; _d++) {
                        var item = _e[_d];
                        _loop_8(item);
                    }
                }
            }
            if (roundData.bankerCard) {
                game.BankerData.Instance.cardList = roundData.bankerCard.cardList;
                game.BankerData.Instance.cardType = roundData.bankerCard.cardType;
                game.BankerData.Instance.multiple = roundData.bankerCard.multiple;
            }
            if (rev.roomData.pointLimit) {
                game.RoomData.Instance.pointLimit = rev.roomData.pointLimit;
            }
        };
        MessageHandle.showTipsEvent = function (data) {
            var bool1 = false;
            var bool2 = false;
            if (data.roomData && data.roomData.statusInfo) {
                var state = data.roomData.statusInfo.status;
                if (state == Cmd.GameStatus.GameStatus_Lottery || state == Cmd.GameStatus.GameStatus_Settle) {
                    bool1 = true;
                }
                else {
                    bool1 = false;
                }
            }
            if (data.roomData.roundData && data.roomData.roundData.doorChipsMe) {
                var total = 0;
                for (var _i = 0, _a = data.roomData.roundData.doorChipsMe; _i < _a.length; _i++) {
                    var item = _a[_i];
                    total += item.chips;
                }
                if (total == 0) {
                    bool2 = true;
                }
                else {
                    bool2 = false;
                }
            }
            if (bool1 && bool2) {
                GX.PokerEvent.Instance.showSurrenderTipsHandle.call(data);
            }
        };
        /**
         * 更新德扑数据
         */
        MessageHandle.updataTexas = function (texas) {
            if (texas == null)
                return;
            game.BankerData.Instance.banker = game.PokerFunction.GetUserInfoBySeatId(texas.dealer);
            game.RoomData.Instance.smallBlind = texas.smallBlind;
            var playerList = texas.playerList;
            playerList = playerList && playerList instanceof Array ? playerList : [];
            for (var _i = 0, playerList_1 = playerList; _i < playerList_1.length; _i++) {
                var item = playerList_1[_i];
                var seatData = game.PokerFunction.GetSeatDataBySeatId(item.seatId);
                if (seatData == null)
                    continue;
                if (seatData.user == null)
                    continue;
                seatData.user.point = item.point;
                var act = item.act;
                if (act && act.chipsBet)
                    seatData.curBetCount = item.act.chipsBet;
                if (act && act.op) {
                    seatData.Operate = act.op;
                }
                seatData.hasFord = act != null && act.op != null && act.op == Cmd.Operation.Fold ? true : false;
                var typ = item.cardSet != null && item.cardSet.typ != null ? item.cardSet.typ : Cmd.CardSetType.CardSetType_None;
                seatData.setCardtype(typ);
            }
            if (texas.sumPot)
                game.RoomData.Instance.bottomPoint = texas.sumPot;
            GX.PokerEvent.Instance.texasRoundChanged.call(texas);
        };
        /**
         * 德扑数据
         */
        MessageHandle.updataTexasConfig = function (texas) {
            if (texas == null)
                return;
            game.PlayList.Instance.playList = texas.playList;
            game.RoomData.Instance.smallBlind = game.PlayList.Instance.smallblind;
            GX.PokerEvent.Instance.texasConfigChange.call(texas);
        };
        /**
         * 更新角色金币
         */
        MessageHandle.updataMoney = function (user, money) {
            if (!user || !money)
                return;
            if (money.money == Cmd.MoneyType.Point) {
                user.point = money.num;
            }
            else if (money.money == Cmd.MoneyType.CardScore) {
                user.cardScore = money.num;
            }
            else if (money.money == Cmd.MoneyType.CutScore) {
                user.cutScore = money.num;
            }
            else if (money.money == Cmd.MoneyType.Diamond) {
                user.diamond = money.num;
            }
        };
        /**
         * 数位压注跟新
         */
        MessageHandle.refrenshBetData = function (value, betData) {
            if (value == null)
                return;
            if (betData == null)
                return;
            var betAll = betData;
            if (value.digit == Cmd.DigitChips.Digit.One) {
                betAll.betDigit.one = MessageHandle.refrenshList(value, betAll.betDigit.one);
            }
            else if (value.digit == Cmd.DigitChips.Digit.Ten) {
                betAll.betDigit.ten = MessageHandle.refrenshList(value, betAll.betDigit.ten);
            }
            else if (value.digit == Cmd.DigitChips.Digit.Hundred) {
                betAll.betDigit.hundred = MessageHandle.refrenshList(value, betAll.betDigit.hundred);
            }
            else if (value.digit == Cmd.DigitChips.Digit.Thousand) {
                betAll.betDigit.thousand = MessageHandle.refrenshList(value, betAll.betDigit.thousand);
            }
            return betAll;
        };
        /**
         * 门下注更新（大小单双）
         */
        MessageHandle.refrenshDoorData = function (value, betData) {
            if (value == null)
                return;
            if (betData == null)
                return;
            var door = betData;
            var item;
            if (value.place == null) {
                item = door.betSum.first(function (v) { return v.doorId == value.doorId; });
            }
            else {
                item = door.betSum.first(function (v) { return v.doorId == value.doorId && v.place == value.place; });
            }
            if (item != null)
                item.chips = (item.chips * 10 + value.chips * 10) / 10;
            return door;
        };
        /**
         * 余数下注
         */
        MessageHandle.refrenshFourDoorData = function (value, betData) {
            if (betData == null)
                return;
            if (value == null)
                return;
            var door = betData;
            var item = door.betNumber.first(function (v) { return v.doorId == value.doorId; });
            if (item != null)
                item.chips = (item.chips * 10 + value.chips * 10) / 10;
            return door;
        };
        MessageHandle.refrenshList = function (value, list) {
            list = list != null && list instanceof Array ? list : [];
            var item = list.first(function (v) { return v.number == value.number; });
            if (item != null) {
                item.chips = item.chips + value.chips;
            }
            return list;
        };
        /**
         * 所有人下注更新
         */
        MessageHandle.refrenshAllBetData = function (rev) {
            var data = game.RoomData.Instance.betData;
            if (!game.RoomData.Instance.betData) {
                game.RoomData.Instance.betData = rev;
                return;
            }
            else {
                data = game.RoomData.Instance.betData;
            }
            if (rev == null)
                return;
            if (rev.betDigit) {
                data.betDigit.one = MessageHandle.assignmentList(rev.betDigit.one, data.betDigit.one);
                data.betDigit.ten = MessageHandle.assignmentList(rev.betDigit.ten, data.betDigit.ten);
                data.betDigit.hundred = MessageHandle.assignmentList(rev.betDigit.hundred, data.betDigit.hundred);
                data.betDigit.thousand = MessageHandle.assignmentList(rev.betDigit.thousand, data.betDigit.thousand);
            }
            if (rev.betSum) {
                data.betSum = MessageHandle.assignmentDoorList(rev.betSum, data.betSum);
            }
            if (rev.betNumber) {
                data.betNumber = MessageHandle.assignmentDoorList(rev.betNumber, data.betNumber);
            }
            game.RoomData.Instance.betData = data;
        };
        /**
         * 自己下注更新
         */
        MessageHandle.refrenshMeBetData = function (rev) {
            var data = game.RoomData.Instance.betMeData;
            if (rev == null)
                return;
            if (data == null)
                return;
            if (rev.betDigit) {
                data.betDigit.one = MessageHandle.assignmentList(rev.betDigit.one, data.betDigit.one);
                data.betDigit.ten = MessageHandle.assignmentList(rev.betDigit.ten, data.betDigit.ten);
                data.betDigit.hundred = MessageHandle.assignmentList(rev.betDigit.hundred, data.betDigit.hundred);
                data.betDigit.thousand = MessageHandle.assignmentList(rev.betDigit.thousand, data.betDigit.thousand);
            }
            if (rev.betSum) {
                data.betSum = MessageHandle.assignmentDoorList(rev.betSum, data.betSum);
            }
            if (rev.betNumber) {
                data.betNumber = MessageHandle.assignmentDoorList(rev.betNumber, data.betNumber);
            }
            game.RoomData.Instance.betMeData = data;
        };
        MessageHandle.assignmentList = function (list1, list2) {
            list1 = list1 != null && list1 instanceof Array ? list1 : [];
            for (var _i = 0, list1_1 = list1; _i < list1_1.length; _i++) {
                var one = list1_1[_i];
                var item1 = list2.first(function (v) { return v.number == one.number; });
                if (!item1) {
                    continue;
                }
                item1.chips = one.chips;
            }
            return list2;
        };
        MessageHandle.assignmentDoorList = function (door1, door2) {
            door1 = door1 != null && door1 instanceof Array ? door1 : [];
            for (var _i = 0, door1_1 = door1; _i < door1_1.length; _i++) {
                var item = door1_1[_i];
                var door = void 0;
                if (item.place == null) {
                    door = door2.first(function (v) { return v.doorId == item.doorId; });
                }
                else {
                    door = door2.first(function (v) { return v.doorId == item.doorId && v.place == item.place; });
                }
                if (!door)
                    continue;
                door.chips = item.chips;
            }
            return door2;
        };
        return MessageHandle;
    }());
    game.MessageHandle = MessageHandle;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     * ui界面的父类 继承子eui.Component
     */
    var BaseUI = (function (_super) {
        __extends(BaseUI, _super);
        function BaseUI() {
            _super.call(this);
            game.PanelManage.addPanel(this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        }
        BaseUI.prototype.onAddToStage = function () {
            if (this.addUIListener)
                this.addUIListener();
            if (game.Language.open)
                this.registerLanguage();
        };
        BaseUI.prototype.onRemoveFromStage = function () {
            this.removeUIListener();
        };
        /**
         * 销毁 子类重写次方法时需要调用次方法，以销毁父类事件
         */
        BaseUI.prototype.destroy = function () {
            if (this.removeUIListener)
                this.removeUIListener();
            this.removeActionListener();
            this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        };
        /**
         * 监听数据更新事件 需手动调用
         */
        BaseUI.prototype.addActionListener = function () {
        };
        /**
         * 移除数据更新事件 切换场景是自动卸载
         */
        BaseUI.prototype.removeActionListener = function () {
        };
        /**
        * 面板宽度适配至舞台宽度
        */
        BaseUI.prototype.adaptationWidth = function () {
            this.width = uniLib.Global.screenWidth;
        };
        /**
        * 面板高度适配至舞台高度
        */
        BaseUI.prototype.adaptationHeight = function () {
            this.height = uniLib.Global.screenHeight;
        };
        /**
         * 注入多语言
         */
        BaseUI.prototype.registerLanguage = function () {
            game.Language.TypeChanged.add(this.updataLanguage, this);
            if (game.Language.Type != game.LanguageType.Chinese) {
                this.updataLanguage();
            }
        };
        /**
         * 子类在registerLanguage之后 语音切换之后会自动调用此方法
         */
        BaseUI.prototype.updataLanguage = function () {
        };
        return BaseUI;
    }(eui.Component));
    game.BaseUI = BaseUI;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     */
    var BetTimeoutTipsPanel = (function (_super) {
        __extends(BetTimeoutTipsPanel, _super);
        function BetTimeoutTipsPanel() {
            var _this = this;
            _super.call(this);
            this.exml = "\n\t\t<?xml version='1.0' encoding='utf-8'?>\n\t\t<e:Skin class=\"LibTipsSkin\" xmlns:e=\"http://ns.egret.com/eui\" xmlns:w=\"http://ns.egret.com/wing\" xmlns:game=\"game.*\">\n\t\t\t<e:Group x=\"0\" y=\"0\">\n\t\t\t\t<e:Image id=\"bgImage\" scaleX=\"1\" scaleY=\"1\" top=\"0\" bottom=\"0\" left=\"0\" right=\"0\"/>\n\t\t\t\t<e:Image id=\"wordImage\" horizontalCenter=\"0\" verticalCenter=\"0\"/>\n\t\t\t\t<e:BitmapLabel id=\"bitmapLabel\" horizontalCenter=\"125.5\" verticalCenter=\"0.5\" font=\"libNumberFort_fnt\" text=\"\"/>\n\t\t\t\t<e:Label id=\"msgLabel\" size=\"25\" textAlign=\"center\" fontFamily=\"Microsoft YaHei\" text=\"\" textColor=\"0xffff99\" verticalCenter=\"0\"  horizontalCenter=\"0\"/>\n\t\t\t</e:Group>\n\t\t</e:Skin>\n\t\t";
            this.skinName = this.exml;
            this.width = 770;
            this.height = 66;
            GX.ResManager.readCommon("common/LibTimeout.png", function (data) {
                _this.bgImage.texture = data;
            }, this);
        }
        BetTimeoutTipsPanel.prototype.setBitmapLabel = function (msg) {
            var _this = this;
            this.bitmapLabel.text = msg;
            GX.ResManager.readCommon("common/libWordImage.png", function (data) {
                _this.wordImage.texture = data;
            }, this);
        };
        BetTimeoutTipsPanel.prototype.setLabel = function (msg) {
            this.msgLabel.text = msg;
        };
        BetTimeoutTipsPanel.prototype.close = function () {
            if (this.parent) {
                this.parent.removeChild(this);
            }
            game.Timer.clearInterval(this.timer);
        };
        return BetTimeoutTipsPanel;
    }(eui.Component));
    game.BetTimeoutTipsPanel = BetTimeoutTipsPanel;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// // TypeScript file
var game;
(function (game) {
    /**
     * ui交互模式选择
     */
    var UIInteractive;
    (function (UIInteractive) {
        /**
        *   按钮点击后高亮反馈
         */
        UIInteractive.Bright = "bright";
        /**
        *   按钮点击后缩放反馈
         */
        UIInteractive.Scale = "scale";
    })(UIInteractive = game.UIInteractive || (game.UIInteractive = {}));
})(game || (game = {}));
var game;
(function (game) {
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button() {
            _super.call(this);
            game.PanelManage.addPanel(this);
        }
        Button.prototype.destroy = function () {
            this.interactive_destroy();
        };
        Object.defineProperty(Button.prototype, "interactive", {
            /**
             * ui交互模式选择 game.UIInteractive
             */
            set: function (type) {
                this.$interactive = type;
                if (type == game.UIInteractive.Bright) {
                }
                else if (type == game.UIInteractive.Scale) {
                    if (this.stage) {
                        if (this.anchorOffsetX == 0) {
                            this.anchorOffsetX = this.width / 2;
                            this.x += this.width / 2;
                        }
                        if (this.anchorOffsetY == 0) {
                            this.anchorOffsetY = this.height / 2;
                            this.y += this.height / 2;
                        }
                    }
                }
                this.customUIInteractive();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "enabled", {
            get: function () {
                return this.$Component[3 /* enabled */];
            },
            /**
            * 组件是否可以接受用户交互。
            * 将 enabled 属性设置为 false 后，
            * 组件会自动禁用触摸事件(将 touchEnabled 和 touchChildren 同时设置为 false)，
            * 部分组件可能还会将皮肤的视图状态设置为"disabled",使其所有子项的颜色变暗。
            *
            * @default true
            *
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            * @language zh_CN
            */
            set: function (value) {
                value = !!value;
                this.$setEnabled(value);
                if (value == false)
                    this.interactive_changeStatus(new egret.TouchEvent("enabled"));
                else
                    this.interactive_changeStatus(new egret.TouchEvent("disable"));
            },
            enumerable: true,
            configurable: true
        });
        return Button;
    }(eui.Button));
    game.Button = Button;
})(game || (game = {}));

// TypeScript file
if (!eui.Component.prototype.customUIInteractive) {
    eui.Component.prototype.customUIInteractive = function () {
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.interactive_onAddToStage, this);
        this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.interactive_onRemoveFromStage, this);
    };
}
if (!eui.Component.prototype.interactive_onAddToStage) {
    eui.Component.prototype.interactive_onAddToStage = function () {
        this.interactive_addUIListener();
        if (this.$interactive == game.UIInteractive.Scale) {
            if (this.anchorOffsetX == 0) {
                this.anchorOffsetX = this.width / 2;
                this.x += this.width / 2;
            }
            if (this.anchorOffsetY == 0) {
                this.anchorOffsetY = this.height / 2;
                this.y += this.height / 2;
            }
        }
    };
}
if (!eui.Component.prototype.interactive_onRemoveFromStage) {
    eui.Component.prototype.interactive_onRemoveFromStage = function () {
        this.interactive_removeUIListener();
    };
}
if (!eui.Component.prototype.interactive_destroy) {
    eui.Component.prototype.interactive_destroy = function () {
        this.interactive_removeUIListener();
        this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.interactive_onAddToStage, this);
        this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.interactive_onRemoveFromStage, this);
    };
}
if (!eui.Component.prototype.interactive_addUIListener) {
    eui.Component.prototype.interactive_addUIListener = function () {
        this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.interactive_changeStatus, this);
        this.addEventListener(egret.TouchEvent.TOUCH_END, this.interactive_changeStatus, this);
        this.addEventListener(egret.TouchEvent.TOUCH_CANCEL, this.interactive_changeStatus, this);
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.interactive_changeStatus, this);
        this.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.interactive_changeStatus, this);
    };
}
if (!eui.Component.prototype.interactive_removeUIListener) {
    eui.Component.prototype.interactive_removeUIListener = function () {
        this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.interactive_changeStatus, this);
        this.removeEventListener(egret.TouchEvent.TOUCH_END, this.interactive_changeStatus, this);
        this.removeEventListener(egret.TouchEvent.TOUCH_CANCEL, this.interactive_changeStatus, this);
        this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.interactive_changeStatus, this);
        this.removeEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.interactive_changeStatus, this);
    };
}
if (!eui.Component.prototype.interactive_changeStatus) {
    eui.Component.prototype.interactive_changeStatus = function (e) {
        var type = e.type;
        if (type == "enabled") {
            var matrix_1 = [0.3086, 0.6094, 0.0820, 0, 0,
                0.3086, 0.6094, 0.0820, 0, 0,
                0.3086, 0.6094, 0.0820, 0, 0,
                0, 0, 0, 1, 0]; // alpha
            this["filters"] = [new egret.ColorMatrixFilter(matrix_1)];
            return;
        }
        if (type == "disable") {
            this["filters"] = [];
            return;
        }
        if (this.$interactive == game.UIInteractive.Scale) {
            switch (type) {
                case egret.TouchEvent.TOUCH_END:
                case egret.TouchEvent.TOUCH_RELEASE_OUTSIDE:
                case egret.TouchEvent.TOUCH_TAP:
                case egret.TouchEvent.TOUCH_CANCEL:
                    this.scaleX = 1;
                    this.scaleY = 1;
                    break;
                case egret.TouchEvent.TOUCH_BEGIN:
                    var soundName = game.Config.InteractiveSoundName;
                    if (soundName && soundName != "") {
                        uniLib.SoundMgr.instance.playSound(soundName);
                    }
                    this.scaleX = 0.9;
                    this.scaleY = 0.9;
                    break;
            }
            return;
        }
        var matrix;
        var stateFilter;
        switch (type) {
            case egret.TouchEvent.TOUCH_END:
            case egret.TouchEvent.TOUCH_RELEASE_OUTSIDE:
            case egret.TouchEvent.TOUCH_TAP:
            case egret.TouchEvent.TOUCH_CANCEL:
                stateFilter = null;
                break;
            case egret.TouchEvent.TOUCH_BEGIN:
                matrix =
                    [1, 0, 0, 0, 0xff * 0.2,
                        0, 1, 0, 0, 0xe0 * 0.2,
                        0, 0, 1, 0, 0x8d * 0.2,
                        0, 0, 0, 1, 0]; // alpha
                stateFilter = new egret.ColorMatrixFilter(matrix);
                var soundName = game.Config.InteractiveSoundName;
                if (soundName && soundName != "") {
                    uniLib.SoundMgr.instance.playSound(soundName);
                }
                break;
        }
        if (null == stateFilter) {
            this["filters"] = [];
        }
        else {
            this["filters"] = [stateFilter];
        }
    };
}

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     * 适合skinName游戏面板 并有UI点击事件或有行为特效的面板
     */
    var EuiPanel = (function (_super) {
        __extends(EuiPanel, _super);
        function EuiPanel() {
            _super.call(this);
            game.PanelManage.addPanel(this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        }
        EuiPanel.prototype.onAddToStage = function () {
            this.addUIListener();
            this.adaptationWidth();
            if (game.Language.open)
                this.registerLanguage();
        };
        EuiPanel.prototype.onRemoveFromStage = function () {
            this.removeUIListener();
        };
        EuiPanel.prototype.destroy = function () {
            this.removeUIListener();
            this.removeActionListener();
            this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        };
        /**
        * 面板宽度适配至舞台宽度
        */
        EuiPanel.prototype.adaptationWidth = function () {
            this.width = uniLib.Global.screenWidth;
        };
        /**
         * 注入多语言
         */
        EuiPanel.prototype.registerLanguage = function () {
            game.Language.TypeChanged.add(this.updataLanguage, this);
            if (game.Language.Type != game.LanguageType.Chinese) {
                this.updataLanguage();
            }
        };
        /**
         * 子类在registerLanguage之后 语音切换之后会自动调用此方法
         */
        EuiPanel.prototype.updataLanguage = function () {
        };
        EuiPanel.prototype.addActionListener = function () {
        };
        EuiPanel.prototype.removeActionListener = function () {
        };
        return EuiPanel;
    }(eui.Component));
    game.EuiPanel = EuiPanel;
})(game || (game = {}));

var game;
(function (game) {
    /**
     * 快速坐下
     * registerSkin 可自定义快速坐下皮肤 游戏层注册此方发后 此组件显示隐藏根据玩家坐下站起状态切换
     */
    var FastSitDown = (function () {
        // public static 
        function FastSitDown() {
            this.m_buttonSkin = "\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <e:Skin class=\"LibFastSitDownSkin\" xmlns:e=\"http://ns.egret.com/eui\">\n            <e:Image  id=\"icon\" x=\"0\" y=\"0\" source=\"\"/>\n        </e:Skin>\n        ";
            this.m_tipsSkin = "\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <e:Skin class=\"LibFastSitDownTipsSkin\" xmlns:e=\"http://ns.egret.com/eui\"  width=\"885\" height=\"124\">\n            <e:Image  id=\"bg\" x=\"0\" y=\"0\" source=\"\" />\n            <e:Image  id=\"tips\" source=\"\" x=\"351\" y=\"31\"/>\n        </e:Skin>\n        ";
            game.RoomData.Instance.MainSeatChanged.add(this.mainSeatChanged, this);
        }
        /**
         * 注册 快速坐下
         * @param exml  皮肤名
         * @param x  组件坐标
         * @param y  组件坐标
         */
        FastSitDown.registerSkin = function (exml, x, y) {
            if (!this.quicklySitDown)
                this.quicklySitDown = new FastSitDown();
            this.quicklySitDown.buttonSkin(exml, x, y);
            return this.quicklySitDown.button;
        };
        /**
         * 请入座提示
         * @param exml  皮肤名
         * @param x  组件坐标
         * @param y  组件坐标
         */
        FastSitDown.registerTipSkin = function (exml, x, y) {
            if (!this.quicklySitDown)
                this.quicklySitDown = new FastSitDown();
            this.quicklySitDown.tipsSkin(exml, x, y);
            return this.quicklySitDown.tips;
        };
        FastSitDown.destroy = function () {
            if (this.quicklySitDown) {
                this.quicklySitDown.destroy();
                this.quicklySitDown = null;
            }
        };
        FastSitDown.prototype.buttonSkin = function (exml, x, y) {
            if (!this.button)
                this.button = new eui.Component();
            this.button.skinName = exml ? exml : this.m_buttonSkin;
            this.button.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickTap, this);
            this.button.x = x ? x : (uniLib.Global.screenWidth / 2 + 230);
            this.button.y = y ? y : 517;
            if (!exml) {
                var icon_1 = this.button.skin["icon"];
                GX.ResManager.readCommon("common/Lib_fastsitdown.png", function (data) {
                    icon_1.texture = data;
                }, this);
            }
            this.mainSeatChanged(game.PokerFunction.IsSitDownMain ? game.USerSeatState.SitDown : game.USerSeatState.StandUp);
        };
        FastSitDown.prototype.tipsSkin = function (exml, x, y) {
            if (!this.button)
                this.tips = new eui.Component();
            this.tips.skinName = exml ? exml : this.m_tipsSkin;
            this.tips.x = x ? x : ((uniLib.Global.screenWidth - this.tips.width) / 2);
            this.tips.y = y ? y : 487;
            if (!exml) {
                var bg_1 = this.tips.skin["bg"];
                var tips_1 = this.tips.skin["tips"];
                GX.ResManager.readCommon("common/LibPleaseSitTipsBg.png", function (data) {
                    bg_1.texture = data;
                }, this);
                GX.ResManager.readCommon("common/LibPleaseSit.png", function (data) {
                    tips_1.texture = data;
                }, this);
            }
            this.mainSeatChanged(game.PokerFunction.IsSitDownMain ? game.USerSeatState.SitDown : game.USerSeatState.StandUp);
        };
        FastSitDown.prototype.destroy = function () {
            game.RoomData.Instance.MainSeatChanged.remove(this.mainSeatChanged, this);
            if (this.button) {
                if (this.button.parent) {
                    this.button.parent.removeChild(this.button);
                }
                this.button.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickTap, this);
            }
            if (this.tips) {
                if (this.tips.parent) {
                    this.tips.parent.removeChild(this.tips);
                }
            }
        };
        Object.defineProperty(FastSitDown.prototype, "buttonX", {
            set: function (x) {
                this.button.x = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastSitDown.prototype, "buttonY", {
            set: function (y) {
                this.button.y = y;
            },
            enumerable: true,
            configurable: true
        });
        FastSitDown.prototype.mainSeatChanged = function (value) {
            if (this.tips) {
                this.tips.visible = (value == game.USerSeatState.StandUp);
                GX.GameLayerManager.addUIToEffect(this.tips);
            }
            if (this.button) {
                this.button.visible = (value == game.USerSeatState.StandUp);
                GX.GameLayerManager.addUIToEffect(this.button);
            }
        };
        FastSitDown.prototype.onClickTap = function () {
            var cmd = new Cmd.SitDownCmd_CS();
            uniLib.NetMgr.tcpSend(cmd);
        };
        return FastSitDown;
    }());
    game.FastSitDown = FastSitDown;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     * 适合非skinName游戏面板 并有UI点击事件或有行为特效的面板
     */
    var GuiPanel = (function (_super) {
        __extends(GuiPanel, _super);
        function GuiPanel() {
            _super.call(this);
            game.PanelManage.addPanel(this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        }
        GuiPanel.prototype.onAddToStage = function () {
            this.addUIListener();
            if (game.Language.open)
                this.registerLanguage();
        };
        GuiPanel.prototype.onRemoveFromStage = function () {
            this.removeUIListener();
        };
        GuiPanel.prototype.destroy = function () {
            this.removeUIListener();
            this.removeActionListener();
            this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        };
        /**
        * 面板宽度适配至舞台宽度
        */
        GuiPanel.prototype.adaptationWidth = function () {
            this.width = uniLib.Global.screenWidth;
        };
        /**
         * 注入多语言
         */
        GuiPanel.prototype.registerLanguage = function () {
            game.Language.TypeChanged.add(this.updataLanguage, this);
            if (game.Language.Type != game.LanguageType.Chinese) {
                this.updataLanguage();
            }
        };
        /**
         * 子类在registerLanguage之后 语音切换之后会自动调用此方法
         */
        GuiPanel.prototype.updataLanguage = function () {
        };
        GuiPanel.prototype.addActionListener = function () {
        };
        GuiPanel.prototype.removeActionListener = function () {
        };
        return GuiPanel;
    }(egret.Sprite));
    game.GuiPanel = GuiPanel;
})(game || (game = {}));


var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var ItemRenderer = (function (_super) {
        __extends(ItemRenderer, _super);
        function ItemRenderer() {
            _super.call(this);
            game.PanelManage.addPanel(this);
        }
        ItemRenderer.prototype.destroy = function () {
            this.interactive_destroy();
        };
        Object.defineProperty(ItemRenderer.prototype, "interactive", {
            /**
             * ui交互模式选择 game.UIInteractive
             */
            set: function (type) {
                this.$interactive = type;
                if (type == game.UIInteractive.Bright) {
                }
                else if (type == game.UIInteractive.Scale) {
                    if (this.stage) {
                        if (this.anchorOffsetX == 0) {
                            this.anchorOffsetX = this.width / 2;
                            this.x += this.width / 2;
                        }
                        if (this.anchorOffsetY == 0) {
                            this.anchorOffsetY = this.height / 2;
                            this.y += this.height / 2;
                        }
                    }
                }
                this.customUIInteractive();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemRenderer.prototype, "enabled", {
            get: function () {
                return this.$Component[3 /* enabled */];
            },
            /**
            * 组件是否可以接受用户交互。
            * 将 enabled 属性设置为 false 后，
            * 组件会自动禁用触摸事件(将 touchEnabled 和 touchChildren 同时设置为 false)，
            * 部分组件可能还会将皮肤的视图状态设置为"disabled",使其所有子项的颜色变暗。
            *
            * @default true
            *
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            * @language zh_CN
            */
            set: function (value) {
                value = !!value;
                this.$setEnabled(value);
                if (value == false)
                    this.interactive_changeStatus(new egret.TouchEvent("enabled"));
                else
                    this.interactive_changeStatus(new egret.TouchEvent("disable"));
            },
            enumerable: true,
            configurable: true
        });
        return ItemRenderer;
    }(eui.ItemRenderer));
    game.ItemRenderer = ItemRenderer;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     * 播放获取金币的动画，根据金币的数量播放不同的特效,有bigwin, megawin, hugewin, superwin四种
     * 具体播放什么特效，需要调用SetWinTypeGolds来设定
     * 使用方法:
     *   :初始化: 将ObtainGoldEffect.Instance添加到GX.GameLayerManager.effectLayer或者其他特效层
     *       GX.GameLayerManager.effectLayer.addChild(ObtainGoldEffect.Instance);
     *
     *       ObtainGoldEffect.Instance.SetWinTypeGolds([200,500,1000,2000]);
     *       ObtainGoldEffect.Instance.SetGoldChangeSound("goldchange_mp3");
     *       ObtainGoldEffect.Instance.PlayGoldEffect(3000, this.onFinishGoldAnim, this);
     */
    var ObtainGoldEffect = (function (_super) {
        __extends(ObtainGoldEffect, _super);
        function ObtainGoldEffect() {
            _super.call(this);
            //滚动的最短时间;
            this.mMinTime = 2000;
            //滚动数字的最长时间;
            this.mMaxTime = 20000;
            //滚动的最短时间的金币数量;
            this.mMinTimeGold = 200;
            //滚动数字的最长时间的金币数量;
            this.mMaxTimeGold = 3000;
            //不同等级动画的金币临界点数值;
            this.mGoldTypeNumbers = [200, 500, 1000, 2000];
            //动画对象;
            this.mGoldAnim = null;
            //动画资源加载后的回调;
            this.mEndLoadResourceCB = null;
            //金币变换切换的声音;
            this.mGoldChangeAnim = null;
            this.mBreakPlayFlyAnim = false;
            /**
             * 播放金币动画实现，调用该函数时，this.mGoldAnim必定一定加载完成;
             */
            this.playGoldWinTypeAnimCB = null;
            this.playGoldWinTypeAnimTarget = null;
            this.mBigWinNumScaleChangeInterval = 0;
            this.initUI();
            this.LoadResource();
        }
        Object.defineProperty(ObtainGoldEffect, "Instance", {
            get: function () {
                if (this.m_Instance == null)
                    this.m_Instance = new ObtainGoldEffect();
                return this.m_Instance;
            },
            enumerable: true,
            configurable: true
        });
        ObtainGoldEffect.clearInstance = function () {
            this.m_Instance = null;
        };
        ObtainGoldEffect.prototype.addUIListener = function () {
            this.mClickCloseRect.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onEffectPanelCloseRect, this);
        };
        ObtainGoldEffect.prototype.removeUIListener = function () {
            this.mClickCloseRect.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onEffectPanelCloseRect, this);
        };
        /**
         * 加载动画资源
         */
        ObtainGoldEffect.prototype.LoadResource = function () {
            //加载需要的动画资源;
            this.LoadDragonBoneAnimation();
        };
        ObtainGoldEffect.prototype.initUI = function () {
            //设置空间和屏幕一样高;
            this.width = uniLib.Global.designWidth;
            this.height = uniLib.Global.designHeight;
            //创建灰色区域;
            var rectClazz = EXML.parse(ObtainGoldEffect.mGrayRectSkin);
            this.mGrayRect = new rectClazz();
            this.addChild(this.mGrayRect);
            //创建金币特效组;
            var groupClazz = EXML.parse(ObtainGoldEffect.mGoldAnimGroupSkin);
            this.mGoldAnimGroup = new groupClazz();
            this.addChild(this.mGoldAnimGroup);
            //创建金币文本标签;
            var labelClazz = EXML.parse(ObtainGoldEffect.mGoldLabelSkin);
            this.mGoldLabel = new labelClazz();
            this.addChild(this.mGoldLabel);
            var closeRectClazz = EXML.parse(ObtainGoldEffect.mClickCloseRectSkin);
            this.mClickCloseRect = new closeRectClazz();
            this.addChild(this.mClickCloseRect);
            this.mClickCloseRect.touchEnabled = true;
            this.visible = false;
        };
        /**
         * 设置滚动动画的最短最长时间;
         */
        ObtainGoldEffect.prototype.SetAnimMinMaxTime = function (minTime, maxTime) {
            this.mMinTime = minTime;
            this.mMaxTime = maxTime;
        };
        /**
         * 设置金币变换的声音路径;
         */
        ObtainGoldEffect.prototype.SetGoldChangeSound = function (soundPath) {
            ObtainGoldEffect.mGoldSoundPath = soundPath;
        };
        /**
         * 设置获奖不同等级的金币数量
         * @param 	goldTypeNumbers: number[4], 各个金币特效的金币临界点
         * @return  无
         */
        ObtainGoldEffect.prototype.SetWinTypeGolds = function (goldTypeNumbers) {
            this.mGoldTypeNumbers.clear();
            for (var i = 0; i < 4 && i < goldTypeNumbers.length; i++) {
                this.mGoldTypeNumbers.push(goldTypeNumbers[i]);
            }
            if (goldTypeNumbers.length > 0) {
                this.mMinTimeGold = goldTypeNumbers[0];
                this.mMaxTimeGold = goldTypeNumbers[goldTypeNumbers.length - 1] * 1.2;
            }
        };
        /**
         * 播放金币动画接口
         * @param 	obtainGold: 是所获得的金币数量
         * @param      maxTime: 播放特效的最长时间,如果不穿，使用默认的通过SetAnimMinMaxTime传入的时间
         * @param        endCB:	播放结束的回调函数.默认为空
         * @param       tarobj: 回调函数的调用者.默认为空
         */
        ObtainGoldEffect.prototype.PlayGoldEffect = function (obtainGold, endCB, tarobj, maxTime) {
            if (endCB === void 0) { endCB = null; }
            if (tarobj === void 0) { tarobj = null; }
            if (maxTime === void 0) { maxTime = 0; }
            if (maxTime > 0) {
                this.mMaxTime = maxTime;
            }
            if (this.mGoldAnim == null) {
                var self_1 = this;
                this.mEndLoadResourceCB = function () {
                    self_1.playGoldEffectImpl(obtainGold, maxTime, endCB, tarobj);
                };
            }
            else {
                this.playGoldEffectImpl(obtainGold, maxTime, endCB, tarobj);
            }
        };
        ObtainGoldEffect.prototype.playGoldEffectImpl = function (obtainGold, maxTime, endCB, tarobj) {
            var _this = this;
            this.playGoldWinTypeAnimCB = endCB;
            this.playGoldWinTypeAnimTarget = tarobj;
            this.mBreakPlayFlyAnim = false;
            var startGold = this.mGoldTypeNumbers[0];
            //获取的金币数量太小;
            if (obtainGold < startGold) {
                return;
            }
            this.visible = true;
            this.mGoldLabel.scaleY = this.mGoldLabel.scaleX = 1.0;
            var scoreGoldList = this.mGoldTypeNumbers;
            var srcAnimScale = 1.0;
            var showWinCount = 1;
            //要播放的几个动画;
            for (var i = 0; i < scoreGoldList.length; i++) {
                if (obtainGold >= scoreGoldList[scoreGoldList.length - i - 1]) {
                    showWinCount = scoreGoldList.length - i;
                    break;
                }
            }
            this.mGoldLabel.scaleX = 0;
            this.mGoldLabel.scaleY = 0;
            this.playDragonAnimations(ObtainGoldEffect.GoldAnimStartAction, ObtainGoldEffect.GoldAnimTypeLoopActions[0]);
            var bindLabelBone = this.mGoldAnim.armature.getBone("bone3");
            var intervalID = 0;
            var lElapseTm = 0;
            var self = this;
            var labelAlpha = 0;
            this.mGoldLabel.alpha = labelAlpha;
            var onTick = function () {
                lElapseTm = lElapseTm + 0.033;
                if (lElapseTm >= 1) {
                    game.Timer.clearInterval(self.mBigWinNumScaleChangeInterval);
                    self.mBigWinNumScaleChangeInterval = 0;
                }
                self.mGoldLabel.scaleX = bindLabelBone["animationPose"].scaleX;
                self.mGoldLabel.scaleY = bindLabelBone["animationPose"].scaleY;
                if (labelAlpha < 1.0) {
                    labelAlpha = labelAlpha + 0.1;
                    if (labelAlpha > 1.0) {
                        labelAlpha = 1.0;
                    }
                    _this.mGoldLabel.alpha = labelAlpha;
                }
            };
            this.mBigWinNumScaleChangeInterval = game.Timer.setInterval(onTick, null, 33);
            var goldAnimActions = [ObtainGoldEffect.GoldAnimTypeLoopActions[1], ObtainGoldEffect.GoldAnimTypeLoopActions[2], ObtainGoldEffect.GoldAnimTypeLoopActions[3]];
            var scrollDatas = [];
            var showTotalTime = 0;
            for (var i = 1; i < showWinCount; i++) {
                var scrollFromTime_1 = this.getHighGoldScrollTime(scoreGoldList[i - 1]);
                var scrollToTime_1 = this.getHighGoldScrollTime(scoreGoldList[i]);
                var scrollTime_1 = scrollToTime_1;
                if (i > 1) {
                    scrollTime_1 = scrollToTime_1 - scrollFromTime_1;
                }
                scrollDatas.push([scoreGoldList[i - 1], scoreGoldList[i], scrollTime_1]);
                showTotalTime = showTotalTime + scrollTime_1;
            }
            var scrollFromTime = this.getHighGoldScrollTime(scoreGoldList[showWinCount - 1]);
            var scrollToTime = this.getHighGoldScrollTime(obtainGold);
            var scrollTime = scrollToTime;
            if (scrollDatas.length > 0) {
                scrollTime = scrollToTime - scrollFromTime;
            }
            showTotalTime = showTotalTime + scrollTime;
            scrollDatas.push([scoreGoldList[showWinCount - 1], obtainGold, scrollTime]);
            var isFirstPlay = false;
            var playAnimIndex = 0;
            var playScrollNumber = function () {
                egret.log("enter playScrollNumber, scrollDatas.length:" + scrollDatas.length);
                if (self.mBreakPlayFlyAnim == true) {
                    return;
                }
                if (scrollDatas.length == 0) {
                    if (self.playGoldWinTypeAnimCB != null) {
                        self.playGoldWinTypeAnimCB.call(self.playGoldWinTypeAnimTarget);
                        self.playGoldWinTypeAnimCB = null;
                        self.playGoldWinTypeAnimTarget = null;
                    }
                    self.visible = false;
                    return;
                }
                var oldPlayAnimIndex = playAnimIndex;
                if (playAnimIndex > 0) {
                    self.PlayLightEffect("showtext", function () {
                        //egret.log("Call gold anim play, playAnimIndex:"+oldPlayAnimIndex.toString()+" action:"+ goldAnimActions[oldPlayAnimIndex-1].toString());
                        if (self.mBreakPlayFlyAnim == true) {
                            return;
                        }
                        self.mGoldAnim.animation.play(goldAnimActions[oldPlayAnimIndex - 1], 0);
                    });
                }
                egret.Tween.get(self.mGoldAnim, {})
                    .to({ scaleX: Math.pow(1.10, playAnimIndex), scaleY: Math.pow(1.10, playAnimIndex) }, 1000, egret.Ease.getElasticOut(6, 0.5));
                //.to({scaleX:Math.pow(1.1, playAnimIndex), scaleY:Math.pow(1.1, playAnimIndex)}, 800, egret.Ease.bounceOut);
                egret.Tween.get(self.mGoldLabel, {})
                    .to({ scaleX: Math.pow(1.10, playAnimIndex), scaleY: Math.pow(1.10, playAnimIndex) }, 1000, egret.Ease.getElasticOut(6, 0.5));
                var scrollData = scrollDatas.shift();
                //egret.log("call scrollNumber, fromGold:"+scrollData[0]+" toGold:"+scrollData[1]+" tm:"+scrollData[2]);
                ObtainGoldEffect.scrollNumber(self.mGoldLabel, scrollData[0], scrollData[1], scrollData[2], playScrollNumber, true);
                playAnimIndex = playAnimIndex + 1;
            };
            playScrollNumber();
        };
        /**
         * 根据动画名称创建响应的动画,这里因为目前动画都是
         */
        ObtainGoldEffect.prototype.LoadDragonBoneAnimation = function () {
            var _this = this;
            //异步加载url的goldAnim
            this.LoadDragonAnimFromUrl(ObtainGoldEffect.GoldAnimPath, function (anim) {
                _this.mGoldAnim = anim;
                _this.mGoldAnim.x = _this.mGoldAnimGroup.width / 2;
                _this.mGoldAnim.y = _this.mGoldAnimGroup.height / 2;
                _this.mGoldAnimGroup.addChild(_this.mGoldAnim);
                egret.log("after load gold anim effect11");
            });
            //异步加载url的goldChangeAnim
            this.LoadDragonAnimFromUrl(ObtainGoldEffect.GoldAnimTypeChangeAnimPath, function (anim) {
                _this.mGoldChangeAnim = anim;
                _this.mGoldChangeAnim.x = _this.mGoldAnimGroup.width / 2;
                _this.mGoldChangeAnim.y = _this.mGoldAnimGroup.height / 2;
                _this.mGoldAnimGroup.addChild(_this.mGoldChangeAnim);
                _this.mGoldChangeAnim.visible = false;
            });
        };
        //异步加载url资源的实现;
        ObtainGoldEffect.prototype.LoadDragonAnimFromUrl = function (animPath, completeCB) {
            var dragonbonesData = null;
            var textureData = null;
            var texture = null;
            var self = this;
            var createDragonArmature = function () {
                if (dragonbonesData == null || textureData == null || texture == null) {
                    return;
                }
                var egretFactory = new dragonBones.EgretFactory();
                egretFactory.parseDragonBonesData(dragonbonesData);
                egretFactory.parseTextureAtlasData(textureData, texture);
                var anim = egretFactory.buildArmatureDisplay("armatureName");
                egret.log("call after loadDragonAnimFromUrl, animPath:" + animPath);
                if (completeCB != null) {
                    completeCB.call(null, anim);
                }
            };
            GX.ResManager.readCommon("common/zhaocaijinbao/" + animPath + "_ske.json", function (data, url) { dragonbonesData = data; createDragonArmature(); }, null);
            GX.ResManager.readCommon("common/zhaocaijinbao/" + animPath + "_tex.json", function (data, url) { textureData = data; createDragonArmature(); }, null);
            GX.ResManager.readCommon("common/zhaocaijinbao/" + animPath + "_tex.png", function (data, url) { texture = data; createDragonArmature(); }, null);
        };
        /**
         * 数字滚动，从fromNum到toNum，持续时间 totalTm;
         */
        ObtainGoldEffect.scrollNumber = function (label, fromNum, toNum, totalTm, cb, playSound, intervalTime) {
            if (cb === void 0) { cb = null; }
            if (playSound === void 0) { playSound = false; }
            if (intervalTime === void 0) { intervalTime = 50; }
            if (fromNum == toNum) {
                egret.log("call scrollNumber, fromNum:" + fromNum + " toNum:" + toNum + " is equal, exit..");
                if (cb != null) {
                    cb.call(null);
                }
                return;
            }
            var dstLabel = label;
            var lElapseTm = 0;
            var lTotalTm = totalTm;
            var intervalID = 0;
            var lastNum = fromNum;
            dstLabel.text = lastNum.toString();
            var onTick = function () {
                lElapseTm = lElapseTm + intervalTime;
                if (lElapseTm > lTotalTm) {
                    lElapseTm = lTotalTm;
                    game.Timer.clearInterval(intervalID);
                    intervalID = 0;
                }
                var curNum = Math.floor(ObtainGoldEffect.lerp(fromNum, toNum, lElapseTm / lTotalTm));
                if (curNum != lastNum) {
                    lastNum = curNum;
                    dstLabel.text = lastNum.toString();
                }
                if (playSound == true) {
                    ObtainGoldEffect.playGoldChangeSound();
                }
                if (intervalID == 0 && cb != null) {
                    cb.call(null);
                }
            };
            egret.log("call ScrollNumber, onTick");
            intervalID = game.Timer.setInterval(onTick, null, intervalTime);
        };
        ObtainGoldEffect.lerp = function (fromNum, toNum, prop) {
            return fromNum + (toNum - fromNum) * prop;
        };
        /**
         * 播放金币变换的声音;
         */
        ObtainGoldEffect.playGoldChangeSound = function () {
            if (ObtainGoldEffect.mGoldSoundPath == "") {
                return;
            }
            uniLib.SoundMgr.instance.playSound(ObtainGoldEffect.mGoldSoundPath);
        };
        /**
         * 播放龙骨动画， 先播放非循环动画，播放完后再播放循环动画;
         */
        ObtainGoldEffect.prototype.playDragonAnimations = function (onceAction, loopAction) {
            var _this = this;
            var self = this;
            var animationEventHandler = function (event) {
                self.mGoldAnim.removeEventListener(dragonBones.EventObject.COMPLETE, animationEventHandler, null);
                _this.mGoldAnim.animation.play(loopAction, 0);
            };
            this.mGoldAnim.addEventListener(dragonBones.EventObject.COMPLETE, animationEventHandler, null);
            this.mGoldAnim.animation.play(onceAction, 1);
        };
        //取出高分金币滚动时间；
        ObtainGoldEffect.prototype.getHighGoldScrollTime = function (gold) {
            var minTime = this.mMinTime;
            var maxTime = this.mMaxTime;
            var minTimeGold = this.mMinTimeGold;
            var maxTimeGold = this.mMaxTimeGold;
            if (gold < minTimeGold) {
                return minTime;
            }
            return Math.floor(ObtainGoldEffect.lerp(minTime, maxTime, (gold - minTimeGold) / (maxTimeGold - minTimeGold)));
        };
        /**
         * 设置是否可以触摸结束动画;
         */
        ObtainGoldEffect.prototype.setCanTouchFinishAnim = function (flag) {
            this.mClickCloseRect.touchEnabled = flag;
        };
        /**
         * 点击closeRect的处理;
         */
        ObtainGoldEffect.prototype.onEffectPanelCloseRect = function () {
            egret.log("call onEffectPanelCloseRect");
            this.mBreakPlayFlyAnim = true;
            this.visible = false;
            if (this.playGoldWinTypeAnimCB != null) {
                this.playGoldWinTypeAnimCB.call(this.playGoldWinTypeAnimTarget);
                this.playGoldWinTypeAnimCB = null;
                this.playGoldWinTypeAnimTarget = null;
            }
        };
        //播放指定动画,在root上， animName是动画文件名字, action是动画名称, eventName是事件名称, cb:是事件到达动画响应
        //当动画播放完毕后，会自动从root中移除.
        ObtainGoldEffect.prototype.PlayLightEffect = function (eventName, eventCB, endCB) {
            if (endCB === void 0) { endCB = null; }
            var self = this;
            var animationCompletedHandler = function (event) {
                self.mGoldChangeAnim.removeEventListener(dragonBones.EventObject.COMPLETE, animationCompletedHandler, null);
                if (endCB != null) {
                    endCB.call(null);
                }
            };
            var animationEventHandler = function (evt) {
                egret.log("Call KeyEvent, eventName:" + evt.frameLabel);
                if (evt.frameLabel == eventName) {
                    if (eventCB != null) {
                        eventCB.call(null);
                    }
                }
                self.mGoldChangeAnim.removeEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, animationEventHandler, null);
            };
            if (eventCB != null) {
                self.mGoldChangeAnim.addEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, animationEventHandler, null);
            }
            self.mGoldChangeAnim.visible = true;
            self.mGoldChangeAnim.addEventListener(dragonBones.EventObject.COMPLETE, animationCompletedHandler, null);
            self.mGoldChangeAnim.animation.play(ObtainGoldEffect.GoldAnimTypeChangeAnimPathAction, 1);
        };
        ObtainGoldEffect.m_Instance = null;
        //播放金币动画的spine名称;
        ObtainGoldEffect.GoldAnimPath = "LaPa_MFYX_Kuang_3307_spine";
        //金币动画的启动动画;
        ObtainGoldEffect.GoldAnimStartAction = "BIGWIN_start";
        //不同等级金币动画的循环动画;
        ObtainGoldEffect.GoldAnimTypeLoopActions = ["BIGWIN_loop", "MEGAWIN_loop", "HUFEWIN_loop", "SUPERWIN_loop"];
        //播放金币动画时，切换不同等级的spine动画;
        ObtainGoldEffect.GoldAnimTypeChangeAnimPath = "LaPa_MFYX_Guang_3307_spine";
        //切换动画的名称;
        ObtainGoldEffect.GoldAnimTypeChangeAnimPathAction = "Guang_start";
        //切换动画的该事件后，才切换金币动画，使其看起来比较自然;
        ObtainGoldEffect.GoldAnimChangeEventName = "showtext";
        //播放金币变换的声音;
        ObtainGoldEffect.mGoldSoundPath = "";
        //灰色背景皮肤
        ObtainGoldEffect.mGrayRectSkin = "<e:Rect width=\"1280\" height=\"720\" x=\"0\" y=\"0\" fillAlpha=\"0.5\" strokeColor=\"0x000000\" strokeAlpha=\"0.5\" touchEnabled=\"false\"  xmlns:e=\"http://ns.egret.com/eui\"></e:Rect>";
        //金币皮肤
        ObtainGoldEffect.mGoldLabelSkin = "<e:Label id=\"goldNormalLabel\" text=\"5000\" x=\"635\" y=\"348\" textColor=\"0xfbf981\"  strokeColor=\"0x000000\" stroke=\"2\"  size=\"50\" fontFamily=\"SimHei\" width=\"200\" verticalAlign=\"middle\" textAlign=\"center\" anchorOffsetX=\"100\" anchorOffsetY=\"-20\"  xmlns:e=\"http://ns.egret.com/eui\" ></e:Label>";
        //播放金币特效的组皮肤
        ObtainGoldEffect.mGoldAnimGroupSkin = "<e:Group id=\"normalGoldFlyGroup\" width=\"2\" height=\"2\" x=\"640\" y=\"360\"  xmlns:e=\"http://ns.egret.com/eui\"></e:Group>";
        //点击提前结束的rect;
        ObtainGoldEffect.mClickCloseRectSkin = "<e:Rect width=\"1280\" height=\"720\" x=\"0\" y=\"0\" fillAlpha=\"0\" strokeColor=\"0x000000\" touchEnabled=\"true\"  xmlns:e=\"http://ns.egret.com/eui\"></e:Rect>";
        return ObtainGoldEffect;
    }(game.BaseUI));
    game.ObtainGoldEffect = ObtainGoldEffect;
})(game || (game = {}));

var game;
(function (game) {
    var PanelManage = (function () {
        function PanelManage() {
        }
        PanelManage.addPanel = function (panel) {
            this.panelList.push(panel);
        };
        PanelManage.destroyPanel = function () {
            for (var _i = 0, _a = this.panelList; _i < _a.length; _i++) {
                var item = _a[_i];
                item.destroy();
            }
            this.panelList.clear();
        };
        PanelManage.panelList = [];
        return PanelManage;
    }());
    game.PanelManage = PanelManage;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**ping值 */
    var Ping = (function (_super) {
        __extends(Ping, _super);
        /**
         *
         */
        function Ping() {
            _super.call(this);
            /** 显示颜色数组*/
            this.colorList = [0x00FF00, 0xFFA500, 0xDC143C];
            /**ping值梯度 */
            this.pingGradient = [300, 600];
            this.init();
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
        }
        Object.defineProperty(Ping, "instance", {
            /**ping值单例对象 */
            get: function () {
                if (!this._instance)
                    this._instance = new Ping();
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        Ping.clearInstance = function () {
            if (this._instance) {
                this._instance = null;
            }
        };
        /**初始化 */
        Ping.prototype.init = function () {
            this.width = uniLib.Global.screenWidth;
            this.height = uniLib.Global.screenHeight;
            if (!this.pingText)
                this.pingText = uniLib.DisplayUtils.createTextLabel(0x00FF00, egret.HorizontalAlign.CENTER, "45ms", 20, 200, 30);
            this.addChild(this.pingText);
            game.Timer.clearInterval(this.pingTimer);
            this.pingTimer = game.Timer.setInterval(this.updatePing, this, 1500);
        };
        /**刷新ping值 不同ping值对应不同颜色*/
        Ping.prototype.updatePing = function () {
            if (this.pingText)
                this.pingText.text = (uniLib.Global.lastPing ? uniLib.Global.lastPing : 45) + "ms";
            if (uniLib.Global.lastPing > this.pingGradient[1]) {
                this.pingText.textColor = this.colorList[2];
            }
            else if (uniLib.Global.lastPing > this.pingGradient[0])
                this.pingText.textColor = this.colorList[1];
            else
                this.pingText.textColor = this.colorList[0];
        };
        /**设置ping值的为之 */
        Ping.prototype.setPingPos = function (x, y) {
            if (this.pingText) {
                this.pingText.x = x;
                this.pingText.y = y;
            }
        };
        /**设置ping值梯度 不同游戏可设置不同的梯度 */
        Ping.prototype.setpingGradient = function (list) {
            if (list instanceof Array && list.length == this.pingGradient.length) {
                var len = list.length;
                for (var i = 0; i < len; i++) {
                    this.pingGradient[i] = list[i];
                }
            }
        };
        /**
         * 设置颜色
         * @param list长度为3的颜色数组0->2对应ping值由低到高
         */
        Ping.prototype.setPingTextColorList = function (list) {
            if (list instanceof Array && list.length == this.colorList.length) {
                var len = list.length;
                for (var i = 0; i < len; i++) {
                    this.colorList[i] = list[i];
                }
            }
        };
        Ping.prototype.onRemove = function () {
            this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
            game.Timer.clearInterval(this.pingTimer);
            game.ResUtil.removeFromParent(this);
            game.ResUtil.removeAllChildren(this);
            this.pingText = null;
            Ping.clearInstance();
        };
        return Ping;
    }(egret.Sprite));
    game.Ping = Ping;
})(game || (game = {}));

// 对自动生成的表格代码的扩展
table.TablePokerCard.instance = function () {
    if (table.TablePokerCard.$instance == null) {
        table.TablePokerCard.$instance = loadTable("TablePokerCard_json");
    }
    return table.TablePokerCard.$instance;
};
table.TablePokerCard.resNormal = function (thisId) {
    var card = table.TablePokerCard.instance().first(function (v) { return v.thisId == thisId; });
    if (card == null)
        return "";
    var point = card.point == 1 ? 14 : card.point;
    point = point == 2 ? 16 : point;
    var gameInfo = game.DataCache.gameInfo;
    if (gameInfo && (gameInfo.gameId == 5106))
        return "DL_Poker_" + card.suit + "_" + point.toString().padLeft(2, "0");
    return "Poker_" + card.suit + "_" + point.toString().padLeft(2, "0");
};
table.TablePokerCard.cardName = function (thisId) {
    var card = table.TablePokerCard.instance().first(function (v) { return v.thisId == thisId; });
    if (card == null)
        return "";
    return card.name;
};
var table;
(function (table) {
    /**
     * 清除表缓存数据
     */
    function deleteCache() {
        table.TablePokerCard.$instance = null;
    }
    table.deleteCache = deleteCache;
})(table || (table = {}));

//////////////////////////////////////////////////////////////////////////////////////////
//在MahjongClientLib处理过的表
// TablePlayTypeList  FILE: 玩法配置.xlsx SHEET: 玩法配置 KEY: id
//////////////////////////////////////////////////////////////////////////////////////////
table.TableLobbyGameList.instance = function () {
    if (table.TableLobbyGameList.$instance == null) {
        table.TableLobbyGameList.$instance = loadTable("TableLobbyGameList_json");
    }
    return table.TableLobbyGameList.$instance;
};
table.TableLobbyGameList.getConfig = function (lobbyId) {
    return table.TableLobbyGameList.instance().first(function (v) { return v.id == lobbyId; });
};
table.TableLobbyGameList.getLobbyConfig = function () {
    return table.TableLobbyGameList.getConfig(MJLobby.MJLobbyData.getInstance().lobbyId);
};
table.TableLobbyGameList.gameList = function () {
    return table.TableLobbyGameList.getLobbyConfig().mahjongList;
};
table.TableCreateConfigList.instance = function () {
    if (table.TableCreateConfigList.$instance == null) {
        table.TableCreateConfigList.$instance = loadTable("TableCreateConfigList_json");
    }
    return table.TableCreateConfigList.$instance;
};
table.TableCreateConfigList.getConfig = function (gameId) {
    return table.TableCreateConfigList.instance().first(function (v) { return v.gameId == gameId; });
};
table.TableExchangeConfig.instance = function () {
    if (table.TableExchangeConfig.$instance == null) {
        table.TableExchangeConfig.$instance = loadTable("TableExchangeConfig_json");
    }
    return table.TableExchangeConfig.$instance;
};
table.TableExchangeConfig.getConfig = function (id) {
    return table.TableExchangeConfig.instance().filter(function (v) { return v.id == id; });
};
table.TableLanguage.instance = function () {
    if (table.TableLanguage.$instance == null) {
        table.TableLanguage.$instance = loadTable("TableLanguage_json");
    }
    return table.TableLanguage.$instance;
};
table.TableLanguage.chineseMap = function () {
    if (table.TableLanguage.$chineseMap == null) {
        var instance = table.TableLanguage.instance();
        if (instance == null)
            return;
        var map = {};
        for (var _i = 0, instance_1 = instance; _i < instance_1.length; _i++) {
            var item = instance_1[_i];
            map[item.chinese] = item;
        }
        table.TableLanguage.$chineseMap = map;
    }
    return table.TableLanguage.$chineseMap;
};
table.TableLanguage.codeMap = function () {
    if (table.TableLanguage.$codeMap == null) {
        var instance = table.TableLanguage.instance();
        if (instance == null)
            return;
        var map = {};
        for (var _i = 0, instance_2 = instance; _i < instance_2.length; _i++) {
            var item = instance_2[_i];
            map[item.code] = item;
        }
        table.TableLanguage.$codeMap = map;
    }
    return table.TableLanguage.$codeMap;
};
table.TableShopConfig.instance = function () {
    if (table.TableShopConfig.$instance == null) {
        table.TableShopConfig.$instance = loadTable("TableShopConfig_json");
    }
    return table.TableShopConfig.$instance;
};
table.TableShopConfig.getConfig = function (shopId) {
    var instance = table.TableShopConfig.instance();
    for (var _i = 0, instance_3 = instance; _i < instance_3.length; _i++) {
        var item = instance_3[_i];
        if (item.goodId == shopId)
            return item;
    }
    return;
};
table.TableGoodsConfig.instance = function () {
    if (table.TableGoodsConfig.$instance == null) {
        table.TableGoodsConfig.$instance = loadTable("TableGoodsConfig_json");
    }
    return table.TableGoodsConfig.$instance;
};
table.TableGoodsConfig.getConfig = function (goodId) {
    return table.TableGoodsConfig.instance().first(function (v) { return v.goodId == goodId; });
};
table.TableRoomCostConfig.instance = function () {
    if (table.TableRoomCostConfig.$instance == null) {
        table.TableRoomCostConfig.$instance = loadTable("TableRoomCostConfig_json");
    }
    return table.TableRoomCostConfig.$instance;
};
table.TableRoomCostConfig.getConfig = function (lobbyId) {
    return table.TableRoomCostConfig.instance().filter(function (v) { return v.lobbyId == lobbyId; });
};
////////////////////////////////////////////////////////////////////////////////////////// 
