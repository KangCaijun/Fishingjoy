/*!
 * MahjongClientLib - JS for Debug
 * @licence MahjongClientLib - v0.0.0 (2018-08-01)
 * qq:93749937 | Licence: helojo
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 麻将表.xlsx SHEET: Sheet1 KEY: thisId
     */
    var TableCard = (function () {
        function TableCard() {
        }
        TableCard.prototype.GetType = function () { return 'table.TableCard'; };
        return TableCard;
    }());
    table.TableCard = TableCard;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 表情礼物表.xlsx SHEET: 礼物 KEY: giftId
     */
    var TableGift = (function () {
        function TableGift() {
        }
        TableGift.prototype.GetType = function () { return 'table.TableGift'; };
        return TableGift;
    }());
    table.TableGift = TableGift;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 梅州麻将麻将番数.xlsx SHEET: config KEY: id*0x10000 + gameId
     */
    var TableMahjongMulti = (function () {
        function TableMahjongMulti() {
        }
        TableMahjongMulti.prototype.GetType = function () { return 'table.TableMahjongMulti'; };
        return TableMahjongMulti;
    }());
    table.TableMahjongMulti = TableMahjongMulti;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 玩法配置.xlsx SHEET: 玩法配置 KEY: id
     */
    var TablePlayTypeList = (function () {
        function TablePlayTypeList() {
        }
        TablePlayTypeList.prototype.GetType = function () { return 'table.TablePlayTypeList'; };
        return TablePlayTypeList;
    }());
    table.TablePlayTypeList = TablePlayTypeList;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 服务器返回状态码.xlsx SHEET: config
     */
    var TableServerReturnCode = (function () {
        function TableServerReturnCode() {
        }
        TableServerReturnCode.prototype.GetType = function () { return 'table.TableServerReturnCode'; };
        return TableServerReturnCode;
    }());
    table.TableServerReturnCode = TableServerReturnCode;
})(table || (table = {}));

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var table;
(function (table) {
    /**
     * FILE: 语音表.xlsx SHEET: Sheet1 KEY: text
     */
    var TableVoice = (function () {
        function TableVoice() {
        }
        TableVoice.prototype.GetType = function () { return 'table.TableVoice'; };
        return TableVoice;
    }());
    table.TableVoice = TableVoice;
})(table || (table = {}));

//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MJLoadingUI = (function (_super) {
    __extends(MJLoadingUI, _super);
    function MJLoadingUI() {
        _super.call(this);
        this.init();
    }
    MJLoadingUI.prototype.init = function () {
        this.percentTxt = new egret.TextField();
        this.percentTxt.size = 30;
        this.percentTxt.text = "正在加载游戏资源 1%";
        this.percentTxt.x = (uniLib.Global.screenWidth - this.percentTxt.width) / 2;
        this.percentTxt.y = 300;
        this.addChild(this.percentTxt);
    };
    //private getProgress(width:number){
    //    var progress: egret.Bitmap = DisplayUtil.createBitmap("loading_progress_png");
    //    var locX: number = (uniLib.Global.screenWidth - this.percentTxt.width) / 2;
    //    var rect: egret.Rectangle = new egret.Rectangle(locX,740,40,41);
    //    progress.scale9Grid = rect;
    //    progress.width = width;
    //    this.addChild(progress);
    //}
    MJLoadingUI.prototype.setProgress = function (txt) {
        this.percentTxt.text = "正在加载游戏资源" + txt + "%";
        this.percentTxt.x = (uniLib.Global.screenWidth - this.percentTxt.width) / 2;
    };
    return MJLoadingUI;
}(egret.Sprite));

var game;
(function (game) {
    var TableCardConfig = (function () {
        function TableCardConfig() {
        }
        TableCardConfig.getInstance = function () {
            if (!this.instance) {
                this.instance = new TableCardConfig();
            }
            return this.instance;
        };
        TableCardConfig.prototype.loadTable = function () {
            return RES.getRes("TableCard_json");
        };
        TableCardConfig.prototype.selectByThisId = function (thisid) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.thisId == thisid) {
                    return item;
                }
            }
        };
        TableCardConfig.prototype.selectByCardId = function (cardId) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.cardId == cardId) {
                    return item;
                }
            }
        };
        TableCardConfig.prototype.thisIdToType = function (thisid) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.thisId == thisid) {
                    return item.type;
                }
            }
        };
        TableCardConfig.prototype.thisIdToIcon = function (thisid) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.thisId == thisid) {
                    return item.icon;
                }
            }
        };
        TableCardConfig.prototype.thisIdToCardId = function (thisid) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.thisId == thisid) {
                    return item.cardId;
                }
            }
        };
        TableCardConfig.prototype.resSoundGift = function (giftId) {
            var sound = "GiftSound" + giftId + "_mp3";
            if (RES.hasRes(sound)) {
                return sound;
            }
            return "";
        };
        TableCardConfig.prototype.resSound = function (thisId, female) {
            var icon = this.thisIdToIcon(thisId);
            if (icon == 0) {
                //如果icon为0 取cardId
                icon = this.thisIdToCardId(thisId);
            }
            var sound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_mp3";
            //这里兼容多个音效随机循环 但是格式要求为 voice_game.RoomInfo.getInstance().languageMode_female_icon_roundNum_mp3d;
            var roundNum = (Math.floor(Math.random() * 10) % game.RoomInfo.getInstance().soundRandomNum); //随机数
            //为了防止没有设置random出来的数字没有音效资源  这里先定一个默认的
            var defaultRandomSound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_0_mp3";
            //随机出来的音效 为了防止没有 需要判空
            var randomSound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_" + roundNum + "_mp3";
            if (RES.hasRes(randomSound)) {
                return randomSound;
            }
            else if (RES.hasRes(defaultRandomSound)) {
                return defaultRandomSound;
            }
            else if (RES.hasRes(sound)) {
                return sound;
            }
            return "";
        };
        TableCardConfig.prototype.resNormal = function (cardId) {
            var str;
            var icon = this.thisIdToIcon(cardId);
            if (icon != 0) {
                str = icon.toString();
            }
            else {
                str = cardId.toString();
            }
            var name = "Card_1_" + str.charAt(0) + "_" + str.charAt(1);
            return name;
        };
        /**
         * 新版补花
         */
        TableCardConfig.prototype.flowerRes = function (thisid) {
            var cardId = this.thisIdToCardId(thisid).toString();
            var name = "flower_" + cardId.charAt(0) + "_" + cardId.charAt(1);
            return name;
        };
        return TableCardConfig;
    }());
    game.TableCardConfig = TableCardConfig;
    var TableMultiConfig = (function () {
        function TableMultiConfig() {
        }
        TableMultiConfig.getInstance = function () {
            if (!this.instance) {
                this.instance = new TableMultiConfig();
            }
            return this.instance;
        };
        TableMultiConfig.prototype.loadTable = function () {
            return RES.getRes("TableMahjongMulti_json");
        };
        TableMultiConfig.prototype.selectNameById = function (num) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.gameId != game.RoomInfo.getInstance().gameId) {
                    continue;
                }
                if (item.id == num) {
                    return item.name;
                }
            }
            return "";
        };
        TableMultiConfig.prototype.selectCartoonById = function (num) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.gameId != game.RoomInfo.getInstance().gameId) {
                    continue;
                }
                if (item.id == num) {
                    return item.cartoon;
                }
            }
            return "";
        };
        TableMultiConfig.prototype.selectItemById = function (num) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.id == num && item.gameId == uniLib.Global.gameId) {
                    return item;
                }
            }
            return null;
        };
        return TableMultiConfig;
    }());
    game.TableMultiConfig = TableMultiConfig;
    var TableGiftConfig = (function () {
        function TableGiftConfig() {
        }
        TableGiftConfig.getInstance = function () {
            if (!this.instance) {
                this.instance = new TableGiftConfig();
            }
            return this.instance;
        };
        TableGiftConfig.prototype.loadTable = function () {
            return RES.getRes("TableGift_json");
        };
        return TableGiftConfig;
    }());
    game.TableGiftConfig = TableGiftConfig;
    var TablePlayTypeList = (function () {
        function TablePlayTypeList() {
        }
        TablePlayTypeList.getInstance = function () {
            if (!this.instance) {
                this.instance = new TablePlayTypeList();
            }
            return this.instance;
        };
        TablePlayTypeList.prototype.loadTable = function () {
            return RES.getRes("TablePlayTypeList_json");
        };
        TablePlayTypeList.prototype.getPlayTypeDes = function (id) {
            for (var _i = 0, _a = this.loadTable(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.id == id) {
                    return item.desc;
                }
            }
            return "";
        };
        return TablePlayTypeList;
    }());
    game.TablePlayTypeList = TablePlayTypeList;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var BaseVc = (function (_super) {
        __extends(BaseVc, _super);
        function BaseVc() {
            _super.call(this);
            this.initUI();
        }
        BaseVc.prototype.initUI = function () {
        };
        BaseVc.prototype.destory = function () {
            game.ResUtil.removeFromParent(this);
            game.ResUtil.removeAllChildren(this);
            table.TableMahjongMulti.$instance = null;
        };
        return BaseVc;
    }(egret.DisplayObjectContainer));
    game.BaseVc = BaseVc;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var BasePanel = (function (_super) {
        __extends(BasePanel, _super);
        /**
         * 1为设置面板  2为解散房间面板
        */
        function BasePanel(type) {
            _super.call(this);
            this.initBg(type);
        }
        BasePanel.prototype.initBg = function (type) {
            this._initY = -13;
            if (type == 1) {
                this._bg = game.ResUtil.createBitmapByName("msgPanel");
                this._bg.scale9Grid = new egret.Rectangle(450, 110, 60, 80);
            }
            else {
                this._bg = game.ResUtil.createBitmapByName("msgBoxBg");
                this._bg.scale9Grid = new egret.Rectangle(180, 60, 90, 60);
            }
            this._bg.touchEnabled = true;
            this._bg.width = 577;
            this._bg.height = 482 - this._initY;
            this._bg.y = this._initY;
            this.addChild(this._bg);
            this._closeBtn = new game.GameButton(["userInfo_close1", "userInfo_close2"]);
            this._closeBtn.x = this._bg.width - 61;
            this._closeBtn.y = -20;
            this.addChild(this._closeBtn);
            this._closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandle, this);
            this.initPanel();
        };
        BasePanel.prototype.initPanel = function () {
        };
        BasePanel.prototype.hideClose = function () {
            this._closeBtn.visible = false;
        };
        Object.defineProperty(BasePanel.prototype, "title", {
            set: function (iconUrl) {
                if (!this._title) {
                    this._title = game.ResUtil.createBitmapByName(iconUrl);
                    this._title.x = Math.round((157 - this._title.width) / 2);
                    this._title.y = 14;
                    this.addChild(this._title);
                }
            },
            enumerable: true,
            configurable: true
        });
        BasePanel.prototype.setSize = function (w, h) {
            this._bg.width = w;
            this._bg.height = h - this._initY;
            this._closeBtn.x = this._bg.width - 61;
        };
        BasePanel.prototype.closeHandle = function (evt) {
            this.dispatchEventWith(game.UIEventConsts.CLOSE);
        };
        BasePanel.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this._closeBtn) {
                this._closeBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandle, this);
                this._closeBtn = null;
            }
            this._bg = null;
            this._title = null;
        };
        return BasePanel;
    }(game.BaseVc));
    game.BasePanel = BasePanel;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var GameButton = (function (_super) {
        __extends(GameButton, _super);
        function GameButton(arr, label, autoDestory) {
            if (label === void 0) { label = null; }
            if (autoDestory === void 0) { autoDestory = true; }
            _super.call(this);
            this.srcArr = arr;
            this._label = label;
            this._autoDestory = autoDestory;
            this.initUI();
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
        }
        GameButton.prototype.iconTexture = function (res) {
            this.srcArr = res;
            this._icon.texture = game.ResUtil.createTexture(res[0]);
        };
        GameButton.prototype.onRemove = function (evt) {
            if (this._autoDestory) {
                this.destory();
            }
        };
        GameButton.prototype.initUI = function () {
            var src;
            src = this.srcArr[0];
            this.touchEnabled = true;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            if (!this._icon) {
                this._icon = game.ResUtil.createBitmapByName(src);
                this.addChild(this._icon);
            }
            else {
                this._icon.texture = game.ResUtil.createTexture(src);
            }
            if (this._label) {
                this._labelTxt = game.ResUtil.createTextFeild(0xFFFFFF, egret.HorizontalAlign.CENTER, this._label, 25, 0, 8, this._icon.width);
                this.addChild(this._labelTxt);
            }
        };
        GameButton.prototype.onTouchBegin = function (evt) {
            this._icon.texture = game.ResUtil.createTexture(this.srcArr[1]);
            egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        };
        GameButton.prototype.onTouchEnd = function (evt) {
            egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            this._icon.texture = game.ResUtil.createTexture(this.srcArr[0]);
        };
        Object.defineProperty(GameButton.prototype, "iconWdith", {
            set: function (width) {
                this._icon.width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameButton.prototype, "iconHeight", {
            set: function (height) {
                this._icon.height = height;
            },
            enumerable: true,
            configurable: true
        });
        GameButton.prototype.addClickArea = function (num) {
            if (!this._area) {
                this._area = new egret.Sprite();
                this._area.touchEnabled = true;
                this.addChild(this._area);
            }
            this._area.graphics.clear();
            this._area.graphics.beginFill(0xff0000, 0);
            this._area.graphics.drawRect(-num, -num, this._icon.width + num * 2, this._icon.height + num * 2);
            this._area.graphics.endFill();
        };
        GameButton.prototype.destory = function () {
            this.touchEnabled = false;
            egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            game.ResUtil.removeFromParent(this);
            game.ResUtil.removeAllChildren(this);
            this._area = null;
            this._icon = null;
            this._label = null;
            this._labelTxt = null;
        };
        return GameButton;
    }(egret.Sprite));
    game.GameButton = GameButton;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ui;
(function (ui) {
    /**
     *
     * @author
     *
     */
    var Image = (function (_super) {
        __extends(Image, _super);
        function Image(source) {
            _super.call(this);
            this._source = null;
            if (source) {
                this.source = source;
            }
        }
        Object.defineProperty(Image.prototype, "source", {
            get: function () {
                return this._source;
            },
            set: function (value) {
                if (value == this._source) {
                    return;
                }
                this._source = value;
                this.parseSource();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * 解析source
         */
        Image.prototype.parseSource = function () {
            var source = this._source;
            if (source && typeof source == "string") {
                ui.ResUtil.getAsset(this._source, this.contentChanged, this);
            }
            else {
                this.$setBitmapData(source);
            }
        };
        /**
        * @private
        * 资源发生改变
        */
        Image.prototype.contentChanged = function (data, source) {
            if (source !== this._source)
                return;
            if (!egret.is(data, "egret.Texture")) {
                return;
            }
            this.$setBitmapData(data);
            if (data) {
                this.dispatchEventWith(egret.Event.COMPLETE);
            }
            else if (DEBUG) {
                egret.$warn(2301, source);
            }
        };
        return Image;
    }(egret.Bitmap));
    ui.Image = Image;
})(ui || (ui = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var MildAlertVC = (function (_super) {
        __extends(MildAlertVC, _super);
        function MildAlertVC() {
            _super.call(this);
            this.initUI();
        }
        MildAlertVC.prototype.initUI = function () {
            this._bg = game.ResUtil.createBitmapByName("tipsBg");
            this._bg.width = this._bg.width * 1.2;
            this._bg.height = this._bg.height * 1.2;
            this.addChild(this._bg);
            this._text = game.ResUtil.createTextFeild(0xFFFFFF, egret.HorizontalAlign.CENTER, "", 30, 88, 10, 786);
            this._text.multiline = true;
            this.addChild(this._text);
        };
        /**
         *
         * @param message
         *
         */
        MildAlertVC.prototype.setText = function (message) {
            if (!message) {
                return;
            }
            this._text.text = message;
            this._bg.height = this._text.textHeight * 2;
            this.x = Math.round((game.DataCache.defaultWidth - this.width) / 2);
            this.y = game.DataCache.defaultHeight;
            egret.Tween.get(this).to({ y: Math.round((game.DataCache.defaultHeight - this.height) / 2) - 60 }, 500, egret.Ease.circOut).call(this.showDelay, this);
        };
        MildAlertVC.prototype.showDelay = function () {
            egret.Tween.get(this).wait(2000).to({ y: -this.height }, 500, egret.Ease.circOut).call(this.destory, this);
        };
        MildAlertVC.prototype.destory = function () {
            egret.Tween.removeTweens(this);
            game.ResUtil.removeAllChildren(this);
            game.ResUtil.removeFromParent(this);
            this._bg = null;
            this._text = null;
        };
        return MildAlertVC;
    }(egret.Sprite));
    game.MildAlertVC = MildAlertVC;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var MsgBox = (function (_super) {
        __extends(MsgBox, _super);
        function MsgBox(needClose) {
            _super.call(this);
            this.touchEnabled = true;
            this._needClose = needClose;
            this.initUI();
        }
        MsgBox.prototype.initUI = function () {
            var bg = game.ResUtil.createBitmapByName("msgBoxBg");
            bg.scale9Grid = new egret.Rectangle(180, 60, 90, 60);
            bg.width = 635;
            bg.height = 391;
            this.addChild(bg);
            this.title = game.ResUtil.createTextFeild(0x3e3e49, egret.HorizontalAlign.CENTER, "", 32, 140, 18, 191);
            this.info = game.ResUtil.createTextFeild(0x3e3e49, egret.HorizontalAlign.CENTER, "", 32, 110, 39, 393);
            this.info.height = 200;
            this.info.verticalAlign = egret.VerticalAlign.MIDDLE;
            this.info.lineSpacing = 2;
            this.addChild(this.info);
            this.addChild(this.title);
            if (this._needClose) {
                var closeBtn = new game.GameButton(["userInfo_close1", "userInfo_close2"]);
                closeBtn.x = bg.width - 61;
                closeBtn.y = -10;
                closeBtn.addClickArea(20);
                closeBtn.touchEnabled = true;
                closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                this.addChild(closeBtn);
            }
        };
        MsgBox.prototype.onClose = function (evt) {
            game.PopupManager.removePopUp(this);
            this.destory();
        };
        MsgBox.prototype.setData = function (title, msg, labelarr, backFn, backObject, countdown) {
            if (labelarr === void 0) { labelarr = null; }
            if (backFn === void 0) { backFn = null; }
            if (backObject === void 0) { backObject = null; }
            if (countdown === void 0) { countdown = 0; }
            this._backFn = backFn;
            this._backObj = backObject;
            this.title.text = title;
            this.info.text = msg;
            // if(this.info.textHeight < 145)
            // {
            //     this.info.y = 16 + (145 - this.info.textHeight) / 2;
            // }else{
            //     this.info.y = 36; 
            // }
            if (labelarr.length == 1) {
                this.yesBtn = new game.GameButton(["button11", "button12"]); //,labelarr[0]);
                this.yesBtn.x = Math.round((this.width - this.yesBtn.width) / 2);
                this.yesBtn.y = 290;
                this.addChild(this.yesBtn);
                var yesWord = game.ResUtil.createBitmapByName("word_sure", 65, 8);
                this.yesBtn.addChild(yesWord);
            }
            else if (labelarr.length == 2) {
                this.yesBtn = new game.GameButton(["button11", "button12"]); //,labelarr[0]);
                this.yesBtn.x = 336;
                this.yesBtn.y = 290;
                this.addChild(this.yesBtn);
                var yesWord = game.ResUtil.createBitmapByName("word_sure", 65, 8);
                this.yesBtn.addChild(yesWord);
                this.noBtn = new game.GameButton(["button21", "button22"]); //,labelarr[1]);
                this.noBtn.x = 36;
                this.noBtn.y = 290;
                this.addChild(this.noBtn);
                var noWord = game.ResUtil.createBitmapByName("word_cancel", 65, 8);
                this.noBtn.addChild(noWord);
            }
            if (this._backFn && this._backFn[0]) {
                this.yesBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this._backFn[0], this._backObj);
            }
            if (this._backFn && this._backFn[1]) {
                this.noBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this._backFn[1], this._backObj);
            }
            if (this.yesBtn) {
                this.yesBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
            }
            if (this.noBtn) {
                this.noBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
            }
        };
        MsgBox.prototype.destory = function () {
            if (this.yesBtn) {
                if (this._backFn && this._backFn[0]) {
                    this.yesBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this._backFn[0], this._backObj);
                }
                this.yesBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                uniLib.DisplayUtils.removeAllChildren(this.yesBtn);
                uniLib.DisplayUtils.removeFromParent(this.yesBtn);
                this.yesBtn = null;
            }
            if (this.noBtn) {
                this.noBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                if (this._backFn && this._backFn[1]) {
                    this.noBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this._backFn[1], this._backObj);
                }
                uniLib.DisplayUtils.removeAllChildren(this.noBtn);
                uniLib.DisplayUtils.removeFromParent(this.noBtn);
                this.noBtn = null;
            }
            this.title = null;
            this.info = null;
            this._backFn = null;
            this._backObj = null;
            game.ResUtil.removeFromParent(this);
            game.ResUtil.removeAllChildren(this);
        };
        return MsgBox;
    }(egret.Sprite));
    game.MsgBox = MsgBox;
})(game || (game = {}));

var ui;
(function (ui) {
    /**
     *
     * @author
     *
     */
    var ResUtil = (function () {
        function ResUtil() {
        }
        /**
     * @language zh_CN
     * 解析素材
     * @param source 待解析的新素材标识符
     * @param compFunc 解析完成回调函数，示例：callBack(content:any,source:string):void;
     * @param thisObject callBack的 this 引用
     */
        ResUtil.getAsset = function (source, compFunc, thisObject) {
            function onGetRes(data) {
                compFunc.call(thisObject, data, source);
            }
            if (RES.hasRes(source)) {
                var data = RES.getRes(source);
                if (data) {
                    onGetRes(data);
                }
                else {
                    RES.getResAsync(source, onGetRes, this);
                }
            }
            else {
                RES.getResByUrl(source, onGetRes, this, RES.ResourceItem.TYPE_IMAGE);
            }
        };
        return ResUtil;
    }());
    ui.ResUtil = ResUtil;
})(ui || (ui = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var ToggleButton = (function (_super) {
        __extends(ToggleButton, _super);
        function ToggleButton(normalTexture, downTexture, text, btnname) {
            _super.call(this);
            this._textSize = 20;
            this._textColor = 0x959595;
            this._strokeColor = 0x580a95;
            this._textSelectColor = 0xFFFFFF;
            this.touchEnabled = true;
            this.normalImage = new ui.Image(normalTexture);
            this.normalImage.fillMode = egret.BitmapFillMode.SCALE;
            this.addChild(this.normalImage);
            if (downTexture) {
                this.downImage = new ui.Image(downTexture);
                this.downImage.fillMode = egret.BitmapFillMode.SCALE;
            }
            this._text = text;
            if (this._text != "") {
                this._label = new egret.TextField();
                this._label.fontFamily = "微软雅黑";
                this._label.text = text;
                this._label.size = 20;
                this._label.width = this.width;
                this._label.textAlign = egret.HorizontalAlign.CENTER;
                this.addChild(this._label);
            }
            this.name = btnname;
        }
        ToggleButton.prototype.updateSize = function (w, h) {
            if (w === void 0) { w = -1; }
            if (h === void 0) { h = -1; }
            if (w != -1) {
                this.width = w;
                this.normalImage.width = w;
                if (this.downImage) {
                    this.downImage.width = w;
                }
            }
            if (h != -1) {
                this.height = h;
                this.normalImage.height = h;
                if (this.downImage) {
                    this.downImage.height = h;
                }
            }
            if (this._label) {
                this._label.width = this.width;
                this._label.y = (this.height - this._label.height) / 2;
            }
        };
        Object.defineProperty(ToggleButton.prototype, "scale9Grid", {
            set: function (value) {
                this.normalImage.scale9Grid = value;
                if (this.downImage) {
                    this.downImage.scale9Grid = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "select", {
            set: function (value) {
                if (value) {
                    if (this.downImage)
                        this.addChildAt(this.downImage, 1);
                    if (this._label)
                        this.setTextStatus(this._text, this._textSelectColor, this._strokeColor, this._textSize);
                }
                else {
                    if (this.downImage && this.downImage.parent) {
                        this.downImage.parent.removeChild(this.downImage);
                    }
                    if (this._label)
                        this.setTextStatus(this._text, this._textColor, null, this._textSize);
                }
            },
            enumerable: true,
            configurable: true
        });
        ToggleButton.prototype.setTextColor = function (textColor, selectColor, strokeColor, size) {
            this._textColor = textColor;
            this._strokeColor = strokeColor;
            this._textSelectColor = selectColor;
            this._textSize = size;
        };
        /**
        * 设置文字颜色、状态
        */
        ToggleButton.prototype.setTextStatus = function (txt, textColor, strokeColor, size) {
            if (strokeColor != undefined || strokeColor != null) {
                this._label.textFlow = [
                    { text: txt, style: { "textColor": textColor, "size": size, "strokeColor": strokeColor, "stroke": 1 } }
                ];
            }
            else {
                this._label.text = txt;
                this._label.textFlow = [
                    { text: txt, style: { "textColor": textColor, "size": size, "strokeColor": strokeColor, "stroke": 0 } }
                ];
            }
        };
        return ToggleButton;
    }(egret.Sprite));
    game.ToggleButton = ToggleButton;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var MahJongFourFacede = (function (_super) {
        __extends(MahJongFourFacede, _super);
        function MahJongFourFacede() {
            _super.call(this);
        }
        MahJongFourFacede.getInstance = function () {
            if (this.instance == null)
                this.instance = new MahJongFourFacede();
            return (this.instance);
        };
        MahJongFourFacede.prototype.initializeController = function () {
            _super.prototype.initializeController.call(this);
            this.registerCommand(game.MahjongFourFacadeConst.STARTUP, game.StartupMJCommand);
        };
        /**
         * 启动PureMVC，在应用程序中调用此方法，并传递应用程序本身的引用
         * @param	rootView	-	PureMVC应用程序的根视图root，包含其它所有的View Componet
         * MJGameScene
         */
        MahJongFourFacede.prototype.startUp = function (rootView) {
            this.sendNotification(game.MahjongFourFacadeConst.STARTUP, rootView);
            // this.removeCommand(MahjongFourFacadeConst.STARTUP); //PureMVC初始化完成，注销STARUP命令
        };
        return MahJongFourFacede;
    }(puremvc.Facade));
    game.MahJongFourFacede = MahJongFourFacede;
})(game || (game = {}));

var game;
(function (game) {
    var MahjongFourFacadeConst = (function () {
        //WHJ整理添加结束
        function MahjongFourFacadeConst() {
        }
        MahjongFourFacadeConst.STARTUP = "STARTUP";
        MahjongFourFacadeConst.SEND_DATA = "sendData";
        /**销毁 */
        MahjongFourFacadeConst.DESTORY = "DESTORY";
        /**结束游戏 */
        MahjongFourFacadeConst.EXIT_GAME = "exitGame";
        /**删除gm面板 */
        MahjongFourFacadeConst.GM_DELETE = "gm_delete";
        /**GM请求牌堆 */
        MahjongFourFacadeConst.GM_HEAP_CARD = "gm_heap_card";
        /**GM换牌 */
        MahjongFourFacadeConst.GM_CHANGE_CARD = "gm_change_card";
        /**
         * 进入房间
         */
        MahjongFourFacadeConst.USER_ENTER_ROOM = "user_enter_room";
        /**玩家进入 */
        MahjongFourFacadeConst.PLAYER_ENTER_ROOM = "player_enter_room";
        /**玩家离开 */
        MahjongFourFacadeConst.PLAYER_LEFT = "player_left";
        /**玩家离开派发seatId用 */
        MahjongFourFacadeConst.PLAYER_LEFT_SEAT = "player_left_seat";
        /**玩家重连 */
        MahjongFourFacadeConst.PLAYER_CONNECT = "player_connect";
        /**玩家离线 */
        MahjongFourFacadeConst.PLAYER_DISCONNECT = "player_disconnect";
        /**用户信息数据 */
        MahjongFourFacadeConst.USERINFO_DATA = "USERINFO_DATA";
        /**返回ip和gps获取经度纬度 */
        MahjongFourFacadeConst.ReturnIpAndGPS = "ReturnIpAndGPS";
        /**刷新玩家分数 */
        MahjongFourFacadeConst.UPDATA_USER_POINT = "updata_user_point";
        /**送礼 */
        MahjongFourFacadeConst.UPDATA_USER_DATA = "updata_user_data";
        /**接收到表情 */
        MahjongFourFacadeConst.RECEIVE_FACE = "receive_face";
        /**送礼通知 */
        MahjongFourFacadeConst.SEND_GIFTS_NOTICE = "send_gifts_notice";
        /**
         * 聊天记录
         */
        MahjongFourFacadeConst.NOTIFY_CHAT_RECORD = "notify_chat_record";
        MahjongFourFacadeConst.VOICE_NOTICE = "voice_notice";
        /**
         * 通用聊天ID接收
         */
        MahjongFourFacadeConst.NOTIFY_COMMON_CHAT = "notify_common_chat";
        /**
         * ***************************************************游戏逻辑**************************************************************
         */
        /**重连 */
        MahjongFourFacadeConst.RELOGIN = "relogin";
        /**游戏开始 */
        MahjongFourFacadeConst.GAME_START = "game_start";
        /**定庄 */
        MahjongFourFacadeConst.GAME_SET_BANKER = "game_set_banker";
        /**梅州麻将定码 */
        MahjongFourFacadeConst.GAME_START_HORSE = "game_start_horse";
        /**开始发牌 */
        MahjongFourFacadeConst.SEND_CARDS = "send_cards";
        /**
         * 自己手牌有变化的时候派发
         * 参数带thisId时不刷新手牌
         */
        MahjongFourFacadeConst.SELF_HANDCARD_CHANGE = "self_handCard_change";
        /**
         * 刷新玩家outCard
         */
        MahjongFourFacadeConst.SELF_OUTCARD_REFRESH = "self_outcard_refresh";
        /**
         * 刷新指定玩家的牌
         */
        MahjongFourFacadeConst.REFRESH_USER_CARDS = "refresh_user_cards";
        /**
         * 摸牌，来了一张牌
         */
        MahjongFourFacadeConst.DRAW = "draw"; //
        /**
     * 摸牌，换牌后自己接受的模拟摸牌
     */
        MahjongFourFacadeConst.EXDRAW = "exdraw"; //
        /**
         * 碰牌操作
         */
        MahjongFourFacadeConst.PONG = "pong"; //
        /**
 * 换牌后模拟摸牌通知
 */
        MahjongFourFacadeConst.EX_DRAW_NOTICE = "ex_draw_notice"; //
        /**
         * 摸牌通知
         */
        MahjongFourFacadeConst.DRAW_NOTICE = "draw_notice"; //
        /**
         * 碰牌通知
         */
        MahjongFourFacadeConst.PONG_NOTICE = "pong_notice"; //
        /**
         * 吃牌通知
         */
        MahjongFourFacadeConst.CHOW_NOTICE = "chow_notice";
        /**
         * 打牌通知
         */
        MahjongFourFacadeConst.DISCARD_NOTICE = "discard_notice"; //打牌通知
        /**
         * 杠牌通知
         */
        MahjongFourFacadeConst.KONG_NOTICE = "kong_notice";
        /**剩余牌数量变化了 */
        MahjongFourFacadeConst.LASTCARD_CHANGE = "lastcard_change";
        /**
         * 新---剩余牌数量变化推送 采用服务器数据
         */
        MahjongFourFacadeConst.CHANGE_REMAINDER_COUNT = "change_remainder_count";
        /**显示动作 */
        MahjongFourFacadeConst.SHOW_ACTION = "show_action";
        /**删除动作 */
        MahjongFourFacadeConst.REMOVE_ACTION = "remove_action";
        /**通知玩家手牌是否可以操作 */
        MahjongFourFacadeConst.NOTICE_CARD_ENABLE = "notice_card_enable";
        /**
         * 补花通知
         */
        MahjongFourFacadeConst.SUPPLY_FLOWER_NOTICE = "supply_flower_notice";
        /**
         * 翻金通知
         */
        MahjongFourFacadeConst.TURNGOLD_NOTICE = "turngold_notice";
        /**
         * 天胡操作
         */
        MahjongFourFacadeConst.START_WIN_NOTICE = "start_win_notice";
        /**
         * 出牌返回 刷新胡牌数据
         */
        MahjongFourFacadeConst.SELF_DISCARD_NOTICE = "self_discard_notice";
        /**
         * 定庄
         */
        MahjongFourFacadeConst.NOTIFY_EAST_LOCATION = "notify_east_location";
        /**
         * 对手ip相同广播
         */
        MahjongFourFacadeConst.NOTIFY_SAME_IP = "notify_same_ip";
        /**
         * 游金选牌
         */
        MahjongFourFacadeConst.NOTIFY_SELECT_GOLDOUT = "notify_select_goldout";
        /**取消游金选牌 */
        MahjongFourFacadeConst.NOTIFY_CANCEL_GOLDOUT = "notify_cancel_goldout";
        /**
         * 出牌失败 stepcard处理
         * 出牌成功 刷新手牌
         */
        MahjongFourFacadeConst.OUT_CARD_REFRESH = "out_card_refresh";
        /**结算通知 */
        MahjongFourFacadeConst.RESULT_NOTICE = "result_notice";
        /**多次胡牌 */
        MahjongFourFacadeConst.WIN_MAHJONG_NOTICE = "win_mahjong_notice";
        /**准备通知 */
        MahjongFourFacadeConst.READY_NOTICE = "ready_notice";
        /**取消准备通知 */
        MahjongFourFacadeConst.CANCEL_READY_NOTICE = "cancel_ready_notice";
        /**准备显示 */
        MahjongFourFacadeConst.READY_SHOW = "ready_show";
        /**准备返回，清理桌面 */
        MahjongFourFacadeConst.RESET_TABLE = "reset_table";
        /**删除结束面板 */
        MahjongFourFacadeConst.RESET_RESULT_PANEL = "reset_result_panel";
        /**结束 */
        MahjongFourFacadeConst.TOTAL_RECORD_DATA = "TOTAL_RECORD_DATA";
        /**其他玩家请求解散 */
        MahjongFourFacadeConst.DISS_REQUEST_NOTICE = "DISS_REQUEST_NOTICE";
        /**解散成功 */
        MahjongFourFacadeConst.DISS_RESULT_NOTICE = "DISS_RESULT_NOTICE";
        /**解散通知 */
        MahjongFourFacadeConst.DISS_NOTICE = "DISS_NOTICE";
        /**玩家在线状态更新 */
        MahjongFourFacadeConst.NOTIFY_ONLINE_STATE = "notify_online_state";
        /**玩家积分通知 */
        MahjongFourFacadeConst.NOTIFY_POINT_CHANGE = "notify_poing_change";
        /**停服通知 */
        MahjongFourFacadeConst.STOP_SREVICE_NOTICE = "stop_service_notice";
        /**托管通知 */
        MahjongFourFacadeConst.NOTIFY_HOST = "notify_host";
        /**请求切换房间人数返回 */
        MahjongFourFacadeConst.CHANGE_USERNUM_BACK = "change_usernum_back";
        /**其他玩家请求切换房间 */
        MahjongFourFacadeConst.CHANGE_USERNUM_NOTICE = "change_usernum_notice";
        /**显示提前开局按钮 */
        MahjongFourFacadeConst.SHOW_CHANGE_BTN = "show_change_btn";
        /**显示开局准备按钮 */
        MahjongFourFacadeConst.SHOW_READY_BTN = "show_ready_btn";
        //WHJ 整理添加
        MahjongFourFacadeConst.CASH_CHICKEN = "cash_chicken";
        MahjongFourFacadeConst.CHANGE_CARD_BACK = "change_card_back";
        /**其他玩家开局换牌 */
        MahjongFourFacadeConst.USER_CHANGE_CARD_BACK = "user_change_card_back";
        MahjongFourFacadeConst.CHANGE_HAND_CARD = "change_hand_card";
        MahjongFourFacadeConst.CHONGFENG_NOTICE = "chongfeng_notice";
        MahjongFourFacadeConst.EAST_CHANGE = "east_change"; //东变化
        MahjongFourFacadeConst.GAME_DINGQEU = "game_dingque";
        MahjongFourFacadeConst.GAME_DINGQEU_NOTICE = "game_dingque_notice";
        MahjongFourFacadeConst.GAME_DINGQEU_RECONNET = "game_dingque_reconnet";
        MahjongFourFacadeConst.GAME_PIAO = "game_piao";
        MahjongFourFacadeConst.GAME_PIAO_BACK = "game_piao_back";
        MahjongFourFacadeConst.GAME_SHOW_CARD_BACK = "game_show_card_back";
        MahjongFourFacadeConst.GAME_YUANQEU = "game_yuanque";
        MahjongFourFacadeConst.GAME_YUANQUE_NOTICE = "game_yuanque_notice";
        MahjongFourFacadeConst.GAME_YUANQUE_STAND = "game_yuanque_stand";
        MahjongFourFacadeConst.GM_CONTROL = "gm_control"; //GM密码
        MahjongFourFacadeConst.HU_NOTICE = "hu_notice";
        MahjongFourFacadeConst.LISTEN_NOTICE = "listen_notice";
        MahjongFourFacadeConst.NOTICE_SHOW_CARD_BRD = "notice_show_card_brd";
        MahjongFourFacadeConst.SEND_CARDS_OK = "send_cards_ok"; //庄家最开始操作
        MahjongFourFacadeConst.SHOW_HU_NOTICE = "show_hu_notice";
        MahjongFourFacadeConst.BIRD_BRD = "brid_brd";
        MahjongFourFacadeConst.KONG_DICE = "kong_dice";
        MahjongFourFacadeConst.KONG_OUT_CARD = "kong_out_card";
        MahjongFourFacadeConst.KONG_SEND_CARD = "kong_send_card";
        MahjongFourFacadeConst.NOTIFY_PING_CHANGE = "notify_ping_change";
        MahjongFourFacadeConst.OUT_CARD_FAILED = "out_card_failed";
        MahjongFourFacadeConst.PIAO_NOTICE = "piao_notice";
        MahjongFourFacadeConst.SEA_ROAM_BRD = "sea_roam_brd";
        MahjongFourFacadeConst.SEA_ROAM_TURN = "sea_roam_turn";
        MahjongFourFacadeConst.START_NEW_ROUND = "start_new_round";
        MahjongFourFacadeConst.START_NEW_ROUND_TIME = "start_new_round_time";
        MahjongFourFacadeConst.START_NEW_STAND = "start_new_stand";
        MahjongFourFacadeConst.START_ROUND_NOTICE = "start_round_notice";
        MahjongFourFacadeConst.START_lISTEN_NOTICE = "start_listen_notice";
        MahjongFourFacadeConst.WIN_CARD_NOTICE = "win_card_notice";
        /**录像 刷新玩家outCard operateCard */
        MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD = "video_refresh_handcard";
        /**刷新听牌面板 Cmd.ListenObjMahjongCmd_S */
        MahjongFourFacadeConst.REFRESH_LISTEN_SCENE = "refresh_listen_scene";
        /**超时暂停 */
        MahjongFourFacadeConst.TIMEOUT_WAIT = "timeout_wait";
        /**南京麻将刷新玩家筹码 */
        MahjongFourFacadeConst.UPDATA_USER_CHIP = "updata_user_chip";
        /**海南麻将吃三道四道动画 */
        MahjongFourFacadeConst.DZHN_ACTION = "DZHN_ACTION";
        /**宁化麻将出牌后游金通知 */
        MahjongFourFacadeConst.SWIM_GOLD = "swim_gold";
        /**获取到gps */
        MahjongFourFacadeConst.GET_GPS = "GET_GPS";
        /**宽甸playbutton */
        MahjongFourFacadeConst.PLAY_BUTTON = "play_button";
        /**宽甸playbutton Brd */
        MahjongFourFacadeConst.PLAY_BUTTON_BRD = "PLAY_BUTTON_BRD";
        /**二人麻将加倍 */
        MahjongFourFacadeConst.TWO_MAHJIONG_BACK = "two_mahjiong_back";
        /**二人麻将加倍 */
        MahjongFourFacadeConst.TWO_MAHJIONG_DOUBLE = "two_mahjiong_double";
        /**金币场 超过上限后提示 */
        MahjongFourFacadeConst.CHECK_CONDITION = "check_condition";
        /** 血战血流用。游戏内破产充值 */
        MahjongFourFacadeConst.SICHUAN_BANKRUPTCY = "sichuan_ruptcy";
        /** 血战血流用。游戏内破产充值返回 */
        MahjongFourFacadeConst.SICHUAN_BANKRUPTCY_BACK = "sichuan_ruptcy_back";
        /**南昌麻将下精算分广播 */
        MahjongFourFacadeConst.NANCHANG_XIAGOLDCARD_BRD = "nanchang_xiagoldcard_brd";
        /**
         * 语音选择操作
         */
        MahjongFourFacadeConst.VOICE_SELECT_OPERATE = "voice_select_operate";
        /**
         * 服务器发来通知
         */
        MahjongFourFacadeConst.SERVER_MESSAGE_NOTICE = "server_message_notice";
        /**万州买牌 */
        MahjongFourFacadeConst.SICHUAN_BUYCARD = "sichuan_buycard";
        /**开始抓花广播 */
        MahjongFourFacadeConst.START_SELECTCARD = "start_selectcard";
        /**抓花广播 */
        MahjongFourFacadeConst.SELECT_CARD = "select_card";
        /**漳浦起台子广播 */
        MahjongFourFacadeConst.ZHANGPU_QITAIZI = "ZHANGPU_QITAIZI";
        /**视频请求 */
        MahjongFourFacadeConst.VIDEO_REQUEST = "VIDEO_REQUEST";
        /**视频结果返回 */
        MahjongFourFacadeConst.VIDEO_RESULT = "VIDEO_RESULT";
        /**视频关闭 */
        MahjongFourFacadeConst.VIDEO_CLOST = "VIDEO_CLOST";
        /**万州换牌数据 */
        MahjongFourFacadeConst.WANZHOU_CHANGECARD = "WANZHOU_CHANGECARD";
        /**万州麻将买牌广播 */
        MahjongFourFacadeConst.WANZHOU_BUYCARD = "WANZHOU_BUYCARD";
        /**万州麻将已胡玩家广播 */
        MahjongFourFacadeConst.WANZHOU_WINDATA = "WANZHOU_WINDATA";
        /**扣牌通知 */
        MahjongFourFacadeConst.KOU_NOTICE = "buckles_notice";
        /**等待扣列表 */
        MahjongFourFacadeConst.KOU_WAITLIST = "KOU_WAITLIST";
        /**扣牌更新 */
        MahjongFourFacadeConst.OTHER_KOU_UPDATE = "OTHER_KOU_UPDATE";
        /**放风消息*/
        MahjongFourFacadeConst.WIND_CARD_NOTICE = "WIND_CARD_NOTICE";
        /**加注通知*/
        MahjongFourFacadeConst.ADD_BASEPOINT_NOTICE = "ADD_BASEPOINT_NOTICE";
        /**风牌叠加消息*/
        MahjongFourFacadeConst.SUPERPOSITION_CARD_NOTICE = "SUPERPOSITION_CARD_NOTICE";
        /**古田翻金方式广播 */
        MahjongFourFacadeConst.SHOW_TURNGOLD_BTN = "SHOW_TURNGOLD_BTN";
        /**古田翻金方式广播 */
        MahjongFourFacadeConst.CHOISE_TURNGOLD_NOTICE = "CHOISE_TURNGOLD_NOTICE";
        /**过蛋通知 */
        MahjongFourFacadeConst.SHOW_PASSEGG_NOTICE = "SHOW_PASSEGG_NOTICE";
        /**拉庄通知 */
        MahjongFourFacadeConst.SET_LAZHUANG_NOTICE = "SET_LAZHUANG_NOTICE";
        MahjongFourFacadeConst.GAME_LAZHUANG_NOTICE = "GAME_LAZHUANG_NOTICE";
        /**玩家牌型报警事件 */
        MahjongFourFacadeConst.CARD_TYPE_WARN_NOTICE = "CARD_TYPE_WARN_NOTICE";
        return MahjongFourFacadeConst;
    }());
    game.MahjongFourFacadeConst = MahjongFourFacadeConst;
})(game || (game = {}));

var game;
(function (game) {
    var NetConsts = (function () {
        function NetConsts() {
        }
        NetConsts.SUCCESS = 0;
        NetConsts.CANCLEOPEARET = 1;
        NetConsts.PRIORITY = 32; //优先级等待
        return NetConsts;
    }());
    game.NetConsts = NetConsts;
})(game || (game = {}));

var game;
(function (game) {
    var PlatConsts = (function () {
        function PlatConsts() {
        }
        PlatConsts.ZU_JIAN = "ZU_JIAN";
        PlatConsts.AAA = "aaa";
        return PlatConsts;
    }());
    game.PlatConsts = PlatConsts;
})(game || (game = {}));

var game;
(function (game) {
    var SoundConsts = (function () {
        function SoundConsts() {
        }
        SoundConsts.ACTION = "action";
        SoundConsts.BG_MUSIC = "bg_mp3";
        SoundConsts.BIRD = "csmj_bird_mp3";
        SoundConsts.CLICK = "ButtonSound_mp3"; //按钮点击
        SoundConsts.COMMON = "common"; //快捷聊天
        SoundConsts.COUNT_FAN = "CountFanSound_mp3"; //数番
        SoundConsts.DEAL = "DealSound_mp3"; //开始游戏
        SoundConsts.DICE = "DiceSound_mp3"; //色子摇动
        SoundConsts.DISCARD = "DiscardSound_mp3"; //开始游戏
        SoundConsts.DRAW = "DrawSound_mp3"; //开始游戏
        SoundConsts.DRAW_MY_TURN = "myTurn_mp3";
        SoundConsts.DRAW_OTHER_TURN = "otherTurn_mp3";
        SoundConsts.HU_MUSIC = "hu_music_mp3";
        SoundConsts.JIANPAO = "9"; //捡炮
        SoundConsts.LIGHT = "light_mp3"; //闪电落雷声音
        SoundConsts.LIUJU = "liuju_mp3";
        SoundConsts.LOSE = "lose_mp3";
        SoundConsts.SEND_CARD = "sendcard_mp3";
        SoundConsts.START = "Start_mp3"; //开始游戏
        SoundConsts.TOUCH_SOUND = "ButtonSound_mp3";
        SoundConsts.WIN = "win_mp3";
        SoundConsts.ZIMO = "1"; //自摸
        return SoundConsts;
    }());
    game.SoundConsts = SoundConsts;
})(game || (game = {}));

var game;
(function (game) {
    var UIEventConsts = (function () {
        function UIEventConsts() {
        }
        /**退出房间 */
        UIEventConsts.EXIT_GAME = "exit_game"; //退出房间
        /**显示庄家 */
        UIEventConsts.SHOW_BANKER = "SHOW_BANKER"; //显示庄家
        /**打牌 */
        UIEventConsts.ACTION_DISCARD = "action_discard"; //打牌
        /**取消操作 */
        UIEventConsts.ACTION_CANCEL = "action_cancel"; //取消操作
        /**胡牌 */
        UIEventConsts.ACTION_WIN = "action_win"; //胡牌
        /**听牌 */
        UIEventConsts.ACTION_READYHAND = "action_readyhand"; //听牌
        /**吃 */
        UIEventConsts.ACTION_CHOW = "action_chow"; //吃
        /**开始吃牌 */
        UIEventConsts.ACTION_BEGIN_CHOW = "action_begin_chow"; //开始吃牌
        /**取消吃牌  取消杠牌通用 */
        UIEventConsts.ACTION_STOP_CHOW = "action_stop_chow"; //取消吃牌  取消杠牌通用
        /**取消游金 */
        UIEventConsts.ACTION_STOP_GOLD = "action_stop_gold";
        /**碰 */
        UIEventConsts.ACTION_PONG = "action_pong"; //碰
        /**杠 */
        UIEventConsts.ACTION_KONG = "action_kong"; //杠
        /**开始杠  暗杠多种情况使用 */
        UIEventConsts.ACTION_BEGIN_KONG = "action_begin_kong"; //始杠  暗杠多种情况使用
        /**托管 */
        UIEventConsts.ACTION_TRUSTEESHIP = "action_trusteeship"; //托管
        /**托管 */
        UIEventConsts.ACTION_RECORD = "action_record"; //托管
        /**开始听牌-选择听的牌 */
        UIEventConsts.START_READYHAND = "start_readyhand"; //开始听牌--选择听的牌
        /**开始听牌-选择听的牌 */
        UIEventConsts.ARROW_READYHAND = "arrow_readyhand"; //开始听牌--选择听的牌
        /**取消听牌 */
        UIEventConsts.STOP_ARROW_READYHAND = "stop_arrow_readyhand"; //取消听牌
        /**取消听牌 */
        UIEventConsts.STOP_READYHAND = "stop_readyhand"; //取消听牌
        /**准备 */
        UIEventConsts.READY = "ready"; //准备
        /**获取积分榜数据 */
        UIEventConsts.GET_SCORE_DATA = "GET_SCORE_DATA"; //获取积分榜数据
        UIEventConsts.SHOW_USER_INFO = "SHOW_USER_INFO";
        UIEventConsts.GIFT_SEND = "GIFT_SEND";
        UIEventConsts.CLOSE = "CLOSE";
        UIEventConsts.DESTORY = "DESTORY";
        /**解散详情界面 */
        UIEventConsts.SHOW_DISMISS = "show_dismiss";
        /**显示设置 */
        UIEventConsts.SHOW_SETTING = "SHOW_SETTING"; //显示设置
        /** 显示游戏秘籍 */
        UIEventConsts.SHOW_HELP = "SHOW_HELP"; //显示设置
        /**显示停服公告 */
        UIEventConsts.SHOW_STOP_SERVICE = "SHOW_STOP_SERVICE"; //显示设置
        /**显示GM */
        UIEventConsts.SHOW_GM_Tool = "SHOW_GM_CHAT"; //显示GM
        /** 请求切换房间人数*/
        UIEventConsts.REQUEST_CHANGE_USERNUM = "request_change_usernum"; //请求切换房间人数
        /**同意切换房间人数 */
        UIEventConsts.AGREE_CHANGE_USERNUM = "agree_change_usernum"; //同意切换房间人数
        /**显示快捷聊天 表情 */
        UIEventConsts.SHOW_SHORT_CHAT = "SHOW_SHORT_CHAT"; //显示快捷聊天 表情
        /**游金操作 */
        UIEventConsts.ACTION_OPERATE = "action_operate"; //游金操作
        UIEventConsts.DISMISS_GAME = "DISMISS_GAME";
        UIEventConsts.DISMISS_BACK = "DISMISS_BACK";
        UIEventConsts.SHARE_GAME = "share_game";
        UIEventConsts.CHANGE_TABLECLOTH = "CHANGE_TABLECLOTH";
        /**录音时间到 */
        UIEventConsts.RECORD_TIME_OUT = "RECORD_TIME_OUT"; //录音时间到
        /**录音取消 */
        UIEventConsts.RECORD_CANCEL = "RECORD_CANCEL"; //录音取消
        /**发送录音 */
        UIEventConsts.SEND_RECORD = "SEND_RECORD"; //发送录音
        /**显示GPS */
        UIEventConsts.SHOW_GPS = "SHOW_GPS";
        /**表情，快捷语音 */
        UIEventConsts.SEND_COMMON_CHAT = "send_common_chat"; //表情，快捷语音
        /**输入聊天 */
        UIEventConsts.SEND_COMMON_TALK = "send_common_talk"; //输入聊天
        UIEventConsts.SEND_CHAT_RECORD = "send_chat_record";
        /**手牌选中 */
        UIEventConsts.GM_SELECT_HANDCARD = "gm_select_handcard"; //手牌选中
        /**牌堆选中 */
        UIEventConsts.GM_SELECT_HEAPCARD = "gm_select_heapcard"; //牌堆选中
        /**批量换牌 */
        UIEventConsts.GM_SELECT_CARDS = "gm_select_cards"; //批量换牌
        /**删除听牌 */
        UIEventConsts.REMOVE_READYHAND = "remove_readyhand"; //删除听牌
        /**托管操作 */
        UIEventConsts.ACTION_HOST = "action_host"; //托管
        /**模拟出牌成功 */
        UIEventConsts.USER_DODISCARD = "user_dodiscard"; //模拟出牌成功
        /** 模拟出牌失败*/
        UIEventConsts.USER_DODISCARD_FAIL = "user_dodiscard_fail"; //模拟出牌失败
        /**录像后退 */
        UIEventConsts.VIDEO_BACK = "video_back"; //录像后退
        /**录像暂停 */
        UIEventConsts.VIDEO_STOP = "video_stop"; //录像暂停
        /**录像前进 */
        UIEventConsts.VIDEO_ADVANCE = "video_advance"; //录像前进
        /**录像退出 */
        UIEventConsts.VIDEO_CLOSE = "video_close"; //录像退出
        /**四川请求换牌 */
        UIEventConsts.SICHUAN_CHANGECARD = "sichuan_changecard"; //听牌
        /**定缺 */
        UIEventConsts.DING_QUE = "ding_que"; //定缺
        /**原缺 */
        UIEventConsts.YUAN_QUE = "yuan_que"; //定缺
        //WHJ---------
        UIEventConsts.ACTION_LIANG = "action_liang";
        UIEventConsts.ACTION_NOAN_LIANG = "action_noan_liang";
        UIEventConsts.ACTION_SELECT_AN = "action_select_an";
        UIEventConsts.USER_KNOCK_TURN = "user_knock_turn";
        UIEventConsts.ACTION_BEGIN_PONG = "action_begin_pong";
        UIEventConsts.ACTION_BU = "action_bu"; /**开始杠  暗杠多种情况使用 */
        UIEventConsts.CARD_ADD_MASK = "card_add_mask";
        UIEventConsts.SEND_PIAO_REQUEST = "send_piao_request";
        UIEventConsts.START_READY = "start_ready"; /**开局准备 */
        UIEventConsts.EXCHANGE_DESK = "exchange_desk"; /**换桌 */
        UIEventConsts.SHOW_OUTCARD = "show_outcard"; /**显示哪些牌已经出 */
        /*天听听牌 */
        UIEventConsts.ACTION_LISTEN = "listen"; //准备
        /**宽甸 */
        UIEventConsts.ACTION_BAODIAO = "action_baodiao";
        UIEventConsts.ACTION_BAOJIA = "action_baojia";
        UIEventConsts.ACTION_ZHANLIBAODIAO = "action_zhanlibaodiao";
        UIEventConsts.ACTION_ZHANLIBAOJIA = "action_zhanlibaojia";
        UIEventConsts.ACTION_ZHANLIBAOTING = "action_zhanlibaoting";
        /**好彩结算 新分享界面 */
        UIEventConsts.SHARE_HAOCAI_MJ = "share_haocai_mj";
        /**
         * 2d5麻将升起结束
         */
        UIEventConsts.D25_MAHJONGUP_END = "d25_mahjongup_end";
        /**
         * 癞子动画播放完毕
         */
        UIEventConsts.GOLD_EFFECT_END = "gold_effect_end";
        /**丹东取消报听 */
        UIEventConsts.GD_CANCEL_BAO = "gd_cancel_bao";
        /**万州买牌 */
        UIEventConsts.SICHUAN_BUYCARD = "sichuan_buycard";
        /**
         * 按钮确定宝牌
         */
        UIEventConsts.ACTION_YAOBAO = "action_yaobao";
        /**
         * 放风确定事件
         */
        UIEventConsts.SET_WINDCARD = "set_windcard";
        /**
         * 加注操作事件
         */
        UIEventConsts.ADD_BASE_POINT = "add_base_point";
        /**
         * 开局effect结束
         */
        UIEventConsts.START_EFFECT_OVER = "start_effect_over";
        return UIEventConsts;
    }());
    game.UIEventConsts = UIEventConsts;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var DataRequestCommand = (function (_super) {
        __extends(DataRequestCommand, _super);
        function DataRequestCommand() {
            _super.call(this);
        }
        DataRequestCommand.prototype.execute = function (notification) {
            var socketProxy = this.facade.retrieveProxy(game.ServerMJProxy.NAME);
            game.ResUtil.trace("execute:", notification.getType());
            switch (notification.getType()) {
                case DataRequestCommand.GAME_DATA:
                    if (game.RoomInfo.getInstance().video == 1)
                        return;
                    socketProxy.sendData(notification.getBody());
                    break;
                case DataRequestCommand.CONNECT_GAME_SERVER:
                    socketProxy.initServer();
                    break;
                case DataRequestCommand.CLOSE:
                    socketProxy.closeSocket();
                    break;
            }
        };
        DataRequestCommand.GAME_DATA = "game_data";
        DataRequestCommand.CONNECT_GAME_SERVER = "connect_game_server"; //连接大厅聊天服务器
        DataRequestCommand.CLOSE = "close"; //连接大厅聊天服务器
        return DataRequestCommand;
    }(puremvc.SimpleCommand));
    game.DataRequestCommand = DataRequestCommand;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var RemoveCommand = (function (_super) {
        __extends(RemoveCommand, _super);
        function RemoveCommand() {
            _super.call(this);
        }
        RemoveCommand.prototype.execute = function (notification) {
            var rootView = notification.getBody();
            this.removeMediator();
            this.removeController();
            this.removeProxy();
        };
        RemoveCommand.prototype.removeController = function () {
            this.facade.removeCommand(game.MahjongFourFacadeConst.SEND_DATA);
            this.facade.removeCommand(game.MahjongFourFacadeConst.DESTORY);
        };
        RemoveCommand.prototype.removeMediator = function () {
            if (game.GameViewConfig.mainMediator) {
                var mainMediator = uniLib.getDefinitionByName(game.GameViewConfig.mainMediatorName);
                game.MahJongFourFacede.getInstance().removeMediator(mainMediator.NAME);
                game.GameViewConfig.mainMediator = null;
                game.GameViewConfig.mainMediatorName = null;
            }
            if (game.RoomInfo.getInstance().isStart) {
                game.RoomInfo.getInstance().isStart = false;
            }
            table.TableMahjongMulti.$instance = null;
            game.RoomInfo.getInstance().handCardNum = 13;
            game.RoomInfo.getInstance().soundRandomNum = 3;
        };
        RemoveCommand.prototype.removeProxy = function () {
            this.facade.removeProxy(game.ServerMJProxy.NAME);
            this.facade = null;
            puremvc.Facade.instance = null;
            game.MahJongFourFacede.instance = null;
        };
        return RemoveCommand;
    }(puremvc.MacroCommand));
    game.RemoveCommand = RemoveCommand;
})(game || (game = {}));

var Cmd;
(function (Cmd) {
    function gameDispatch(cmd, obj, type) {
        var facade = game.MahJongFourFacede.getInstance();
        facade.sendNotification(cmd, obj, type);
    }
    Cmd.gameDispatch = gameDispatch;
    function OnClientEchoMahjongCmd_SC(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
    }
    Cmd.OnClientEchoMahjongCmd_SC = OnClientEchoMahjongCmd_SC;
    function OnMessageBoxLobbyCmd_S(rev) {
        if (!rev.type) {
            rev.type = 0;
        }
        if (rev.type == 1) {
            uniLib.Utils.restart(rev.desc ? rev.desc : "版本更新,需要重启!", rev.btn1 ? rev.btn1 : "确定");
        }
    }
    Cmd.OnMessageBoxLobbyCmd_S = OnMessageBoxLobbyCmd_S;
    /*
     * login
     */
    function OnEnterMahjongCmd_S(recv) {
        uniLib.UIMgr.instance.hideLoading();
        if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().isStart) {
            return;
        }
        ;
        game.CardInfo.getInstance().initHandCard();
        if (!recv.resultCode) {
            recv.resultCode = 0;
        }
        if (recv.resultCode == game.NetConsts.SUCCESS) {
            var rev = recv.roomState;
            game.RoomInfo.getInstance().setData(rev);
            game.RoomInfo.getInstance().houseOwnerUID = recv.ownerId;
            game.RoomInfo.getInstance().matchId = recv.roomState.matchId;
            var myself = false;
            for (var i = 0; i < rev.userInfoSet.length; i++) {
                if (rev.userInfoSet[i].uid == uniLib.NetMgr.UID) {
                    uniLib.UserInfo.init(rev.userInfoSet[i]);
                    game.MyUserInfo.getInstance().setData(rev.userInfoSet[i]);
                    if (rev.userInfoSet[i].onlineState == Cmd.OnlineState.OnlineState_Hosting) {
                        game.RoomInfo.getInstance().isHostMode = 1;
                    }
                    else {
                        game.RoomInfo.getInstance().isHostMode = 0;
                    }
                    /**是否新手 */
                    if (rev.userInfoSet[i].isNew == 1) {
                        game.RoomInfo.getInstance().isNewIn = true;
                    }
                    else {
                        game.RoomInfo.getInstance().isNewIn = false;
                    }
                    myself = true;
                }
            }
            if (myself == false) {
                var uid = game.RoomInfo.getInstance().getUserIdBySid(1);
                if (uid != 0) {
                    uniLib.UserInfo.uid = uid;
                }
            }
            if (!game.DataCache.platParam) {
                game.DataCache.platParam = {};
            }
            if (game.RoomInfo.getInstance().video == 1) {
                uniLib.UserInfo.uid = game.RoomInfo.getInstance().videoUid;
            }
            game.RoomInfo.getInstance().firstReady = true;
            game.CardInfo.getInstance().reloginUserHandCard();
            game.RoomInfo.getInstance().isStart = false;
            game.RoomInfo.getInstance().RoomSocreType = 0;
            game.RoomInfo.getInstance().roundScore = [];
            if (recv.roomState.gambletype) {
                game.RoomInfo.getInstance().RoomSocreType = recv.roomState.gambletype;
                game.RoomInfo.getInstance().baseSore = recv.roomState["betchips"];
            }
            if (recv.greatWall) {
                game.RoomInfo.getInstance().greatWall = recv.greatWall;
            }
            game.DataCache.platParam.roomId = rev.roomId;
            if (rev.roomId >= 1000000
                && (game.RoomInfo.getInstance().gameId == 5038 ||
                    game.RoomInfo.getInstance().gameId == 5039 ||
                    game.RoomInfo.getInstance().gameId == 5058 ||
                    game.RoomInfo.getInstance().gameId == 5059 ||
                    game.RoomInfo.getInstance().gameId == 5061)) {
                uniLib.SoundMgr.instance.playSound("match2Room_mp3");
            }
            gameDispatch(game.MahjongFourFacadeConst.RESET_TABLE);
            gameDispatch(game.MahjongFourFacadeConst.USER_ENTER_ROOM, rev);
            gameDispatch(game.MahjongFourFacadeConst.READY_SHOW);
            if (egret.localStorage.getItem("show_SSC") == "1") {
                uniLib.Global.dispatchEvent(uniLib.ZqEvent.EVENT_G2L, "show_SSC");
            }
        }
        else {
            gameDispatch(game.MahjongFourFacadeConst.EXIT_GAME);
        }
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
    }
    Cmd.OnEnterMahjongCmd_S = OnEnterMahjongCmd_S;
    function OnListenObjMahjongCmd_S(rev) {
        if (rev.los) {
            gameDispatch(game.MahjongFourFacadeConst.REFRESH_LISTEN_SCENE, rev);
        }
    }
    Cmd.OnListenObjMahjongCmd_S = OnListenObjMahjongCmd_S;
    function OnJsonCompressNullUserPmd_CS(rev) {
        if (rev.msglist) {
            uniLib.Global.jsonCompress = rev;
            uniLib.Global.jsonCompressDefault = rev;
        }
        else {
            uniLib.Global.jsonCompress = uniLib.Global.jsonCompressDefault;
        }
    }
    Cmd.OnJsonCompressNullUserPmd_CS = OnJsonCompressNullUserPmd_CS;
    /*
    * 玩家进入
    */
    function OnEnterMahjongCmd_Brd(rev) {
        if (!rev.ownerid || rev.ownerid == game.RoomInfo.getInstance().videoUid) {
            // if(game.RoomInfo.getInstance().video == 1) return;
            if (!rev.isFirst) {
                rev.isFirst = true;
            }
            var userInfo = new game.UserVo(rev.userInfo);
            game.RoomInfo.getInstance().addUser(userInfo);
            if (rev.isFirst) {
                //正常进入
                gameDispatch(game.MahjongFourFacadeConst.PLAYER_ENTER_ROOM, userInfo);
            }
            else {
                gameDispatch(game.MahjongFourFacadeConst.PLAYER_CONNECT, userInfo);
            }
        }
    }
    Cmd.OnEnterMahjongCmd_Brd = OnEnterMahjongCmd_Brd;
    /*
     * 玩家离开
     */
    function OnLeaveMahjongCmd_Brd(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (!rev.desc) {
            rev.desc = "成功";
        }
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.EXIT_GAME);
            return;
        }
        if (rev.state != 0) {
            //断线离开
            gameDispatch(game.MahjongFourFacadeConst.PLAYER_DISCONNECT, rev);
        }
        else if (rev.state == 0) {
            //正常离开
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
            gameDispatch(game.MahjongFourFacadeConst.PLAYER_LEFT_SEAT, seatId);
            game.RoomInfo.getInstance().removeUser(rev.uid);
            gameDispatch(game.MahjongFourFacadeConst.PLAYER_LEFT, rev.uid);
        }
    }
    Cmd.OnLeaveMahjongCmd_Brd = OnLeaveMahjongCmd_Brd;
    /*
     * 游戏开始
     */
    function OnStartMahjongCmd_Brd(rev) {
        game.RoomInfo.getInstance().isHu = false;
        game.RoomInfo.getInstance().isStart = true;
        game.RoomInfo.getInstance().isKnock = false;
        game.RoomInfo.getInstance().isTween = false;
        game.RoomInfo.getInstance().lieNum = 1;
        game.RoomInfo.getInstance().dirtection = 1;
        game.RoomInfo.getInstance().turnGoldType = 1;
        game.RoomInfo.getInstance().host_mode = 0;
        game.RoomInfo.getInstance().liangUser = [];
        game.RoomInfo.getInstance().goldenCard = [];
        game.RoomInfo.getInstance().chongfengUID = 0;
        game.RoomInfo.getInstance().curNumber = rev.curGameNbr;
        game.RoomInfo.getInstance().setRemainCardNum(0);
        game.RoomInfo.getInstance().setRemainderCardCount(0);
        game.CardInfo.getInstance().initHandCard();
        game.GameData.getInstance().goldOutCardSet = [];
        game.RoomInfo.getInstance().outCardSuccArr = [];
        game.CardInfo.getInstance().bankerThisId = 0;
        game.RoomInfo.getInstance().initRoundScore();
        if (rev.bankerNum) {
            game.RoomInfo.getInstance().bankerNum = rev.bankerNum;
        }
        else {
            game.RoomInfo.getInstance().bankerNum = 0;
        }
        if (rev.betPoint) {
            game.RoomInfo.getInstance().betPoint = rev.betPoint;
        }
        else {
            game.RoomInfo.getInstance().betPoint = 0;
        }
        if (rev.gate) {
            game.RoomInfo.getInstance().gate = rev.gate;
        }
        if (rev.circle) {
            game.RoomInfo.getInstance().circle = rev.circle;
        }
        if (rev["is_double"] !== (void 0)) {
            game.RoomInfo.getInstance().isdouble = rev["is_double"];
        }
        if (rev.curJiao) {
            game.RoomInfo.getInstance().curJiao = rev.curJiao; //当前角局数
        }
        if (rev.curNbr) {
            game.RoomInfo.getInstance().curRound = rev.curNbr; //当前角内局数
        }
        gameDispatch(game.MahjongFourFacadeConst.GAME_START, rev);
    }
    Cmd.OnStartMahjongCmd_Brd = OnStartMahjongCmd_Brd;
    /**
     * 漂分开始
     */
    function OnStartPiaoMahjongCmd_Brd(rev) {
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
        }
        gameDispatch(game.MahjongFourFacadeConst.GAME_PIAO, rev);
    }
    Cmd.OnStartPiaoMahjongCmd_Brd = OnStartPiaoMahjongCmd_Brd;
    function OnReqPiaoMahjongCmd_S(rev) {
        game.RoomInfo.getInstance().lastShangGa = rev.multiPiao;
    }
    Cmd.OnReqPiaoMahjongCmd_S = OnReqPiaoMahjongCmd_S;
    /**
     * 有人漂分广播
     */
    function OnReqPiaoMahjongCmd_Brd(rev) {
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.GAME_PIAO_BACK, rev.multiPiao);
        }
        gameDispatch(game.MahjongFourFacadeConst.PIAO_NOTICE, rev);
    }
    Cmd.OnReqPiaoMahjongCmd_Brd = OnReqPiaoMahjongCmd_Brd;
    /**
     * 定庄、打骰子
     */
    function OnSetBankerMahjongCmd_Brd(rev) {
        game.RoomInfo.getInstance().setBankerInfo(rev.bankerId);
        game.RoomInfo.getInstance().outerId = rev.bankerId;
        game.RoomInfo.getInstance().chongfengUID = 0;
        game.RoomInfo.getInstance().firstReady = true;
        game.RoomInfo.getInstance().multi = rev.multi;
        if (rev.horseUid) {
            gameDispatch(game.MahjongFourFacadeConst.GAME_START_HORSE, rev.horseUid);
        }
        if (rev.eastUid) {
            game.RoomInfo.getInstance().eastUid = rev.eastUid;
            gameDispatch(game.MahjongFourFacadeConst.NOTIFY_EAST_LOCATION);
        }
        if (rev.sec || rev.sec == 0) {
            if (rev.sec || rev.sec == 0) {
                game.RoomInfo.getInstance().outCount = rev.sec;
            }
            else {
                game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
            }
            game.RoomInfo.getInstance().diceTime = rev.sec;
        }
        if (rev.startLuo) {
            game.RoomInfo.getInstance().startLuo = rev.startLuo;
        }
        if (rev.getCardDirection) {
            game.RoomInfo.getInstance().getCardDirection = rev.getCardDirection;
        }
        gameDispatch(game.MahjongFourFacadeConst.GAME_SET_BANKER, rev.dice);
    }
    Cmd.OnSetBankerMahjongCmd_Brd = OnSetBankerMahjongCmd_Brd;
    /**
     * 开局发牌
     */
    function OnSelfCardMahjongCmd_S(rev) {
        //没有定庄是在这里初始化
        this.last_SendCardMahjong = null;
        this.last_OutCardMahjong = null;
        if (!game.RoomInfo.getInstance().showCardThisIdMap)
            game.RoomInfo.getInstance().showCardThisIdMap = {};
        if (!game.RoomInfo.getInstance().showCardBaseIdMap)
            game.RoomInfo.getInstance().showCardBaseIdMap = {};
        if (!rev.ownerid || rev.ownerid == game.RoomInfo.getInstance().videoUid) {
            game.CardInfo.getInstance().myCards = rev.userCard;
            /**如果手牌中含有花牌 */
            if (game.CardInfo.getInstance().searchFlower(rev.userCard.handCardSet)) {
                game.GameData.getInstance().isMyTime = false;
            }
            game.RoomInfo.getInstance().chongfengUID = 0;
            game.RoomInfo.getInstance().zhuojiID = 0;
            game.RoomInfo.getInstance().dqCardType = 0;
            game.RoomInfo.getInstance().isMask = false;
            game.RoomInfo.getInstance().isListen = false;
            game.RoomInfo.getInstance().isYuanQue = false;
            game.RoomInfo.getInstance().selfWin = false;
            game.RoomInfo.getInstance().changeType = [];
            game.RoomInfo.getInstance()._flbarUser = [];
            game.CardInfo.getInstance().isStartSend = true;
            if (rev.bankerThisId) {
                game.CardInfo.getInstance().bankerThisId = rev.bankerThisId;
            }
            if (rev.otherCard) {
                game.CardInfo.getInstance().setOtherCard(rev.otherCard);
            }
            game.CardInfo.getInstance().userHandCount = [13, 13, 13, 13];
            if (game.RoomInfo.getInstance().gameId == 4036 || game.RoomInfo.getInstance().gameId == 4037 ||
                game.RoomInfo.getInstance().gameId == 4077 || game.RoomInfo.getInstance().gameId == 4104 ||
                game.RoomInfo.getInstance().gameId == 4088 || game.RoomInfo.getInstance().gameId == 4031 ||
                game.RoomInfo.getInstance().gameId == 4105 || game.RoomInfo.getInstance().gameId == 4122 ||
                game.RoomInfo.getInstance().gameId == 4123 || game.RoomInfo.getInstance().handCardNum == 16) {
                game.CardInfo.getInstance().userHandCount = [16, 16, 16, 16];
            }
            else if (game.RoomInfo.getInstance().handCardNum != 13) {
                var num = game.RoomInfo.getInstance().handCardNum + 1;
                game.CardInfo.getInstance().userHandCount = [num, num, num, num]; //以后的就用新方法 只需要在游戏gameScene设置手牌数量 不用gameId来判断
            }
            //牌堆已发牌数     
            game.RoomInfo.getInstance().bGetNum = (game.RoomInfo.getInstance().userList.length) * game.CardInfo.getInstance().userHandCount[0];
            game.CardInfo.getInstance().updateUserHandCount(game.RoomInfo.getInstance().bankerId, 1, 0);
            if (rev.sec || rev.sec == 0) {
                game.RoomInfo.getInstance().outCount = rev.sec;
            }
            else {
                game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
            }
            // uniLib.SoundMgr.instance.playSound(game.SoundConsts.SEND_CARD);
            game.RoomInfo.getInstance()._flbarUser = rev.flbarUser;
            game.RoomInfo.getInstance().isTween = true;
            game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
            if (rev.heapCardNum) {
                game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
            }
            else {
                game.RoomInfo.getInstance().setRemainderCardCount(0);
            }
            gameDispatch(game.MahjongFourFacadeConst.SEND_CARDS, rev.ownerid);
            game.RoomInfo.getInstance().isStart = true;
        }
        else {
            game.CardInfo.getInstance().setOtherCard([rev.userCard]);
        }
    }
    Cmd.OnSelfCardMahjongCmd_S = OnSelfCardMahjongCmd_S;
    /**
     * 开局可操作通知
     */
    function OnStartNewRoundOpCmd_S(rev) {
        //gameDispatch(game.MahjongFourFacadeConst.START_WIN_NOTICE, rev);
        gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, rev);
    }
    Cmd.OnStartNewRoundOpCmd_S = OnStartNewRoundOpCmd_S;
    /**
     * 开局操作广播《起手小胡》  不操作数据
     */
    function OnStartNewRoundOpCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.START_NEW_ROUND, rev);
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
        if (rev.cardSet)
            game.RoomInfo.getInstance().addShowCardList(rev.cardSet); //把起手小胡的牌也记录下来
    }
    Cmd.OnStartNewRoundOpCmd_Brd = OnStartNewRoundOpCmd_Brd;
    /**开局换牌 */
    function OnexChangeCardMahjongCmd_S(rev) {
        if (!rev.ownerid || rev.ownerid == game.RoomInfo.getInstance().videoUid) {
            game.RoomInfo.getInstance().changeType = rev.disType;
            game.RoomInfo.getInstance().outCount = rev.opcount;
            game.RoomInfo.getInstance().changeHandCard = true;
            game.CardInfo.getInstance().exCardSet = [];
            if (rev.bankerId) {
                game.RoomInfo.getInstance().bankerId = rev.bankerId;
                game.RoomInfo.getInstance().setBankerInfo(rev.bankerId);
            }
            if (rev.bcs) {
                game.RoomInfo.getInstance().sc_bcs = rev.bcs;
            }
            if (rev.isSame) {
                game.RoomInfo.getInstance().sc_isSame = rev.isSame;
            }
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, true);
            gameDispatch(game.MahjongFourFacadeConst.CHANGE_HAND_CARD, 1);
        }
    }
    Cmd.OnexChangeCardMahjongCmd_S = OnexChangeCardMahjongCmd_S;
    /**开局换牌 */
    function OnexChangeCardMahjongCmd_Brd(rev) {
        if (rev.userId == uniLib.UserInfo.uid) {
            game.RoomInfo.getInstance().exCardSuccArr = [];
            if (rev.cardId) {
                game.RoomInfo.getInstance().exCardSuccArr = rev.cardId;
            }
            game.RoomInfo.getInstance().changeType = [];
            gameDispatch(game.MahjongFourFacadeConst.CHANGE_CARD_BACK, rev);
            if (rev.userId === uniLib.UserInfo.uid) {
                gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
                game.RoomInfo.getInstance().changeHandCard = false;
            }
            else {
                gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, true);
            }
        }
        else {
            if (rev.cardId) {
                for (var i = 0; i < rev.cardId.length; i++) {
                    var card = rev.cardId[i];
                    game.CardInfo.getInstance().deleteOtherHand(card, rev.userId);
                }
                game.CardInfo.getInstance().updateUserHandCount(rev.userId, rev.cardId.length, 1);
            }
            gameDispatch(game.MahjongFourFacadeConst.USER_CHANGE_CARD_BACK, rev);
        }
    }
    Cmd.OnexChangeCardMahjongCmd_Brd = OnexChangeCardMahjongCmd_Brd;
    /**原缺-原缺时间通知-原缺成功广播-定缺-定缺成功通知 */
    /**
   * 如果有原缺
   */
    function OnOriginalLackOpCmd_S(rev) {
        var op = {};
        op.opType = [23];
        gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, op);
        gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
    }
    Cmd.OnOriginalLackOpCmd_S = OnOriginalLackOpCmd_S;
    /**
     * 起手原缺通知,近做通知时间
     */
    function OnOriginalLackOpTimeCmd_Brd(rev) {
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
        }
        gameDispatch(game.MahjongFourFacadeConst.GAME_YUANQEU);
    }
    Cmd.OnOriginalLackOpTimeCmd_Brd = OnOriginalLackOpTimeCmd_Brd;
    /**
    * 原缺成功通知
    */
    function OnOriginalLackOpCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.GAME_YUANQUE_NOTICE, rev);
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
            game.RoomInfo.getInstance().isYuanQue = true;
        }
        // gameDispatch(game.MahjongFourFacadeConst.GAME_YUANQEU);
    }
    Cmd.OnOriginalLackOpCmd_Brd = OnOriginalLackOpCmd_Brd;
    /**
    * 选择定缺
    */
    function OnEnsureLackOpCmd_S(rev) {
        if (!rev.ownerid || rev.ownerid == uniLib.UserInfo.uid) {
            game.RoomInfo.getInstance().dqCardType = rev.cardType;
            if (rev.sec || rev.sec == 0) {
                game.RoomInfo.getInstance().outCount = rev.sec;
            }
            else {
                game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
            }
            if (rev.bankerId) {
                game.RoomInfo.getInstance().bankerId = rev.bankerId;
                game.RoomInfo.getInstance().setBankerInfo(rev.bankerId);
            }
            game.RoomInfo.getInstance().changeType = [];
            gameDispatch(game.MahjongFourFacadeConst.GAME_DINGQEU);
        }
    }
    Cmd.OnEnsureLackOpCmd_S = OnEnsureLackOpCmd_S;
    /**
      * 定缺成功广播，
      */
    function OnEnsureLackOpCmd_Brd(rev) {
        if (rev.uid == uniLib.UserInfo.uid) {
            game.RoomInfo.getInstance().dqCardType = rev.cardType;
            game.RoomInfo.getInstance().isMask = true;
        }
        game.RoomInfo.getInstance().changeType = [];
        gameDispatch(game.MahjongFourFacadeConst.GAME_DINGQEU_NOTICE, rev);
    }
    Cmd.OnEnsureLackOpCmd_Brd = OnEnsureLackOpCmd_Brd;
    /**翻金 */
    function OnTurnGoldMahjongCmd_Brd(rev) {
        if (rev.hn) {
            rev.heapCardNum = rev.hn;
        }
        game.RoomInfo.getInstance().flcard = [];
        if (rev["rfc"]) {
            rev.randomFlowerCard = rev["rfc"];
            game.RoomInfo.getInstance().addFlowerCard(rev.randomFlowerCard);
        }
        if (rev.cardSet) {
            game.RoomInfo.getInstance().goldenCard = rev.cardSet;
            if (rev.goldType) {
                if (rev.goldType == 1) {
                    game.RoomInfo.getInstance().addShowCardList(rev.cardSet);
                }
                else if (rev.goldType == 3) {
                    game.RoomInfo.getInstance().addShowCardList(rev.displayCardSet);
                }
            }
        }
        else {
            game.RoomInfo.getInstance().goldenCard = [];
        }
        if (rev.displayCardSet) {
            game.RoomInfo.getInstance().displayCard = rev.displayCardSet;
        }
        if (rev.cardNum) {
            game.RoomInfo.getInstance().goldCardNum = rev.cardNum;
            game.RoomInfo.getInstance().eGetNum = game.RoomInfo.getInstance().eGetNum + rev.cardNum;
        }
        else {
            game.RoomInfo.getInstance().goldCardNum = 0;
        }
        gameDispatch(game.MahjongFourFacadeConst.TURNGOLD_NOTICE);
        game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
        gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
    }
    Cmd.OnTurnGoldMahjongCmd_Brd = OnTurnGoldMahjongCmd_Brd;
    /**补花 */
    function OnFlowerMahjongCmd_Brd(rev) {
        Cmd.trace("补花：FlowerMahjongCmd_Brd " + JSON.stringify(rev));
        if (rev.hn) {
            rev.heapCardNum = rev.hn;
        }
        var include = false; //补的花是否重复，如果重复 过滤
        //补花数据
        var flower = rev.flowerSet;
        //我已经有的花
        var myFlower = game.CardInfo.getInstance().getFlowerCardBySeat(0);
        //如果是我自己的花 特殊操作
        if (rev.uid == uniLib.UserInfo.uid) {
            if (rev.myCardSet) {
                //开局补花
                for (var j = 0; j < flower.length; j++) {
                    include = ArrayUtil.isInArray(flower[j], myFlower);
                    if (include == false) {
                        //保存各个位置上玩家补花数据
                        game.CardInfo.getInstance().addFlowerCardByUid(flower[j], rev.uid);
                        //删掉手牌中花的数据
                        game.CardInfo.getInstance().removeMyCard(flower[j]);
                    }
                }
                //开局补牌
                var cardSet = rev.myCardSet;
                for (var i = 0; i < cardSet.length; i++) {
                    game.RoomInfo.getInstance().bGetNum++;
                    game.CardInfo.getInstance().addMyCard(cardSet[i], true);
                }
            }
            else {
                for (var j = 0; j < flower.length; j++) {
                    include = ArrayUtil.isInArray(flower[j], myFlower);
                    if (include == false) {
                        //保存玩家补花数据
                        game.CardInfo.getInstance().addFlowerCardByUid(flower[j], rev.uid);
                    }
                }
            }
        }
        else {
            //其他玩家
            for (var j = 0; j < flower.length; j++) {
                //保存各个位置上玩家补花数据
                var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
                var otherFlower = game.CardInfo.getInstance().getFlowerCardBySeat(seatId);
                include = ArrayUtil.isInArray(flower[j], otherFlower);
                if (include == false) {
                    game.CardInfo.getInstance().addFlowerCardByUid(flower[j], rev.uid);
                    //gm状态 其他玩家手牌处理
                    if (game.RoomInfo.getInstance().GM_Mode && rev.uid != uniLib.UserInfo.uid) {
                        game.CardInfo.getInstance().deleteOtherHand(flower[j], rev.uid);
                    }
                }
                if (rev.startRound) {
                    game.RoomInfo.getInstance().bGetNum++;
                }
            }
            //gm状态 玩家手牌处理
            if (game.RoomInfo.getInstance().GM_Mode && rev.uid != uniLib.UserInfo.uid) {
                if (rev.myCardSet) {
                    var cardSet = rev.myCardSet;
                    for (var i = 0; i < cardSet.length; i++) {
                        game.CardInfo.getInstance().addOtherCard(cardSet[i], rev.uid);
                    }
                }
            }
        }
        gameDispatch(game.MahjongFourFacadeConst.SUPPLY_FLOWER_NOTICE, rev);
        game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
    }
    Cmd.OnFlowerMahjongCmd_Brd = OnFlowerMahjongCmd_Brd;
    /*
     * 我摸到一张牌
     */
    function OnSendCardMahjongCmd_S(rev) {
        Cmd.trace("自己摸牌：SendCardMahjongCmd_S " + JSON.stringify(rev));
        game.RoomInfo.getInstance().changeHandCard = false;
        if (rev.opType && rev.opType[0] === 30) {
            if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.ownerid) {
                game.CardInfo.getInstance().addOtherCard(rev.thisId, rev.ownerid);
            }
            else if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid == rev.ownerid) {
                if (rev.thisId) {
                    game.CardInfo.getInstance().addMyCard(rev.thisId);
                }
            }
            game.CardInfo.getInstance().drawData = rev;
            if (rev.windSet && rev.windSet.length == 1) {
                game.CardInfo.getInstance().superPositionCardId = rev.windSet[0];
            }
            if (rev.replaceWindSet && rev.replaceWindSet.length == 1) {
                game.CardInfo.getInstance().needChangeCardId = rev.replaceWindSet[0];
            }
            if (rev.showCardSet && rev.showCardSet.length == 1) {
                game.CardInfo.getInstance().showCardId = rev.showCardSet[0];
            }
            game.CardInfo.getInstance().exCardSet.push(rev.thisId);
            gameDispatch(game.MahjongFourFacadeConst.EXDRAW, rev);
            return;
        }
        if (rev.ls && rev.ls.length > 0) {
            rev.listenSet = rev.ls;
        }
        if (rev.los && rev.los.length > 0) {
            rev.listenObjSet = rev.los;
        }
        if (rev.listenObjSet && rev.listenObjSet.length > 0) {
            for (var i = 0; i < rev.listenObjSet.length; i++) {
                if (rev.listenObjSet[i].lc && rev.listenObjSet[i].lc.length > 0) {
                    rev.listenObjSet[i].listenCardSet = rev.listenObjSet[i].lc;
                }
                if (rev.listenObjSet[i].listenCardSet && rev.listenObjSet[i].listenCardSet.length && rev.listenObjSet[i].listenCardSet.length > 0) {
                    for (var j = 0; j < rev.listenObjSet[i].listenCardSet.length; j++) {
                        if (rev.listenObjSet[i].listenCardSet[j].num) {
                            rev.listenObjSet[i].listenCardSet[j].remainNum = rev.listenObjSet[i].listenCardSet[j].num;
                        }
                    }
                }
            }
        }
        if (!rev.listenObjSet || rev.listenObjSet.length == 0) {
            rev.listenObjSet = [];
            if (game.RoomInfo.getInstance().last_SendCardMahjong) {
                if (rev.resetListen) {
                    game.RoomInfo.getInstance().last_SendCardMahjong.listenObjSet = {};
                }
                else {
                    rev.listenObjSet = game.RoomInfo.getInstance().last_SendCardMahjong.listenObjSet;
                }
            }
        }
        if (rev.triCard) {
            game.CardInfo.getInstance().triCard = [];
        }
        game.RoomInfo.getInstance().last_SendCardMahjong = rev;
        game.GameData.getInstance().lastCard = rev.thisId;
        //不分是否为花牌 添加到手牌数据中
        game.RoomInfo.getInstance().OutCard = null;
        if (rev.goldOutCardSet) {
            game.GameData.getInstance().goldOutCardSet = rev.goldOutCardSet;
        }
        /**
         * 判断上一次摸牌是否为花
         * 如果是花 清除数据并刷新
         */
        if (game.CardInfo.getInstance().drawData && (game.CardInfo.getInstance().drawData.thisId > 500 ||
            ArrayUtil.isInArray(game.CardInfo.getInstance().drawData.thisId, game.RoomInfo.getInstance().flcard))) {
            game.CardInfo.getInstance().removeMyCard(game.CardInfo.getInstance().drawData.thisId);
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        }
        game.CardInfo.getInstance().drawData = rev;
        if (rev.windSet && rev.windSet.length == 1) {
            game.CardInfo.getInstance().superPositionCardId = rev.windSet[0];
        }
        if (rev.replaceWindSet && rev.replaceWindSet.length == 1) {
            game.CardInfo.getInstance().needChangeCardId = rev.replaceWindSet[0];
        }
        if (rev.showCardSet && rev.showCardSet.length == 1) {
            game.CardInfo.getInstance().showCardId = rev.showCardSet[0];
        }
        //如果有敲响
        if (rev.opType) {
            game.RoomInfo.getInstance().isKnock = ArrayUtil.isInArray(Cmd.MahjongOpCardType.MahjongOpCardType_Knock, rev.opType);
        }
        //判断是否为录像功能
        if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.ownerid) {
            game.CardInfo.getInstance().addOtherCard(rev.thisId, rev.ownerid);
            gameDispatch(game.MahjongFourFacadeConst.DRAW_NOTICE, rev);
        }
        else {
            if (rev.thisId) {
                game.CardInfo.getInstance().addMyCard(rev.thisId);
            }
            //判断自己的可操作牌
            gameDispatch(game.MahjongFourFacadeConst.DRAW, rev);
            if (game.RoomInfo.getInstance().host_mode == 0) {
                gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, true);
            }
            game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
            if (rev.heapCardNum) {
                game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
            }
            else {
                game.RoomInfo.getInstance().setRemainderCardCount(0);
            }
            if (rev.thisId < 500) {
                game.GameData.getInstance().isMyTime = true;
            }
            else if (rev.thisId > 500 && (game.RoomInfo.getInstance().gameId == 5028 || game.RoomInfo.getInstance().gameId == 5093)) {
                //西安的部分麻将单独处理
                game.GameData.getInstance().isMyTime = true;
            }
            game.GameData.getInstance().isCanOperate = true;
        }
        if (rev.heapCardNum || game.CardInfo.getInstance().isStartSend) {
            if (game.CardInfo.getInstance().isStartSend) {
                game.CardInfo.getInstance().isStartSend = false;
            }
            game.RoomInfo.getInstance().addShowCard(rev.thisId);
        }
        else {
            if (game.RoomInfo.getInstance().video == 0) {
                game.RoomInfo.getInstance().addShowCard(rev.thisId, true);
            }
            else {
                if (rev.ownerid && rev.ownerid == uniLib.UserInfo.uid) {
                    game.RoomInfo.getInstance().addShowCard(rev.thisId, true);
                }
            }
        }
        if (game.RoomInfo.getInstance().host_mode && rev.thisId < 500 && !rev.opType) {
            var obj_1 = new Cmd.OutCardMahjongCmd_C();
            obj_1.thisId = rev.thisId;
            egret.setTimeout(function () { gameDispatch(game.MahjongFourFacadeConst.SEND_DATA, obj_1, game.DataRequestCommand.GAME_DATA); }, Cmd, 100);
            uniLib.NetMgr.setMsgTimeout(8, "OutCardMahjongCmd_C");
        }
        if ((!rev.opType || !rev.opType[0] || rev.opType.length == 0) && rev.thisId < 500) {
            if (game.RoomInfo.getInstance().isListen && game.RoomInfo.getInstance().gameId !== 4039) {
                var obj_2 = new Cmd.OutCardMahjongCmd_C();
                obj_2.thisId = rev.thisId;
                egret.setTimeout(function () { gameDispatch(game.MahjongFourFacadeConst.SEND_DATA, obj_2, game.DataRequestCommand.GAME_DATA); }, Cmd, 1000);
                uniLib.NetMgr.setMsgTimeout(8, "OutCardMahjongCmd_C");
            }
        }
    }
    Cmd.OnSendCardMahjongCmd_S = OnSendCardMahjongCmd_S;
    /*
    * 玩家摸牌通知
    */
    function OnSendCardMahjongCmd_Brd(rev) {
        if (rev.sid) {
            rev.uid = game.RoomInfo.getInstance().getUserIdBySid(rev.sid);
        }
        if (rev.stand) {
            gameDispatch(game.MahjongFourFacadeConst.START_NEW_STAND, rev.uid);
        }
        if (rev.isSichuan) {
            gameDispatch(game.MahjongFourFacadeConst.EX_DRAW_NOTICE, rev);
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
            return;
        }
        if (rev.getCardType) {
            game.RoomInfo.getInstance().drawType = rev.getCardType;
        }
        else {
            game.RoomInfo.getInstance().drawType = 0;
        }
        game.RoomInfo.getInstance().changeHandCard = false;
        game.RoomInfo.getInstance().bGetNum++;
        /**起手小胡的情况先站起 再摸牌*/
        Cmd.trace("摸牌通知：SendCardMahjongCmd_Brd " + JSON.stringify(rev));
        if (rev.getCardType != 3) {
            game.CardInfo.getInstance().updateUserHandCount(rev.uid, 1, 0);
        }
        if (game.RoomInfo.getInstance().GM_Mode && rev.uid != uniLib.UserInfo.uid && game.RoomInfo.getInstance().video == 0) {
            game.CardInfo.getInstance().addOtherCard(rev.thisId, rev.uid);
        }
        if (rev.uid != uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
        }
        else
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, true);
        game.RoomInfo.getInstance().outerId = rev.uid;
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
        }
        gameDispatch(game.MahjongFourFacadeConst.DRAW_NOTICE, rev);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
            if (rev.heapCardNum == game.RoomInfo.getInstance().getRemainCardNum()) {
                game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
            }
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
        if (rev.stand == 1) {
            //如果有听牌，听牌冲突
            gameDispatch(game.MahjongFourFacadeConst.GAME_YUANQUE_STAND);
        }
        if (rev.uid != uniLib.UserInfo.uid && !game.CardInfo.getInstance().isStartSend) {
            game.RoomInfo.getInstance().subRemainCardNum();
        }
        //录像模式 剩余牌数处理
        if (game.RoomInfo.getInstance().video == 1 && rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
    }
    Cmd.OnSendCardMahjongCmd_Brd = OnSendCardMahjongCmd_Brd;
    /**
     * 用户出牌返回
     */
    function OnOutCardMahjongCmd_S(rev) {
        if (uniLib.Global.lastPingUpTimestamp != null) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        Cmd.trace("出牌返回：OutCardMahjongCmd_S " + JSON.stringify(rev));
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (!rev.desc) {
            rev.desc = "成功";
        }
        if (rev.ws && rev.ws.length > 0) {
            rev.winCardSet = rev.ws;
        }
        if (rev.resultCode == 2) {
            game.CardInfo.getInstance().discard(uniLib.UserInfo.uid, rev.thisId, false);
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_OUTCARD_REFRESH);
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        }
        else if (rev.resultCode == 0) {
            game.RoomInfo.getInstance().addShowCard(rev.thisId);
            if (!rev.winCardSet || rev.winCardSet.length == 0) {
                rev.winCardSet = [];
                if (game.RoomInfo.getInstance().last_OutCardMahjong) {
                    if (rev.resetListen) {
                        game.RoomInfo.getInstance().last_OutCardMahjong.winCardSet = [];
                    }
                    else {
                        rev.winCardSet = game.RoomInfo.getInstance().last_OutCardMahjong.winCardSet;
                    }
                }
            }
            if (rev["isSwimGold"]) {
                gameDispatch(game.MahjongFourFacadeConst.SWIM_GOLD, rev["isSwimGold"]);
            }
            game.RoomInfo.getInstance().last_OutCardMahjong = rev;
            if (game.RoomInfo.getInstance().video == 1)
                return;
            var isHave = ArrayUtil.isInArray(rev.thisId, game.RoomInfo.getInstance().outCardSuccArr);
            if (isHave)
                return;
            game.CardInfo.getInstance().discard(uniLib.UserInfo.uid, rev.thisId);
            //如果还没有亮牌 则清空 ；亮牌保留
            if (game.CardInfo.getInstance().liangSeat[0] == 0) {
                game.CardInfo.getInstance().triCard = [];
            }
            game.CardInfo.getInstance().winCardSet = [];
            if (rev.winCardSet instanceof Array && rev.winCardSet.length > 0) {
                game.CardInfo.getInstance().winCardSet = rev.winCardSet;
                gameDispatch(game.MahjongFourFacadeConst.SELF_DISCARD_NOTICE, rev.winCardSet);
            }
        }
        else {
            gameDispatch(game.MahjongFourFacadeConst.OUT_CARD_REFRESH, rev.thisId);
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, true);
            return;
        }
    }
    Cmd.OnOutCardMahjongCmd_S = OnOutCardMahjongCmd_S;
    /*
    * 出牌通知
    */
    function OnOutCardMahjongCmd_Brd(rev) {
        if (rev.sid) {
            rev.uid = game.RoomInfo.getInstance().getUserIdBySid(rev.sid);
        }
        if (uniLib.Global.lastPingUpTimestamp != null && rev.uid == uniLib.UserInfo.uid) {
            uniLib.Global.lastPing = Date.now() - uniLib.Global.lastPingUpTimestamp;
            uniLib.Global.lastPingUpTimestamp = null;
        }
        game.CardInfo.getInstance().isStartSend = false;
        game.CardInfo.getInstance().drawData = null;
        game.RoomInfo.getInstance().isKnock = false;
        game.CardInfo.getInstance().barOutCardData = null;
        game.CardInfo.getInstance().superPositionCardId = null;
        game.CardInfo.getInstance().needChangeCardId = null;
        game.CardInfo.getInstance().showCardId = null;
        game.CardInfo.getInstance().addCard(rev.thisId, game.CardInfo.getInstance().allOutCardGroup);
        Cmd.trace("出牌通知：OutCardMahjongCmd_Brd " + JSON.stringify(rev));
        if (!rev.isFollow) {
            rev.isFollow = 0;
        }
        var opTime = true;
        if (!rev.opType) {
            rev.opType = [];
            opTime = false;
        }
        else {
        }
        //吃碰杠 开启语音打牌
        if (rev.opType && rev.opType instanceof Array && rev.opType.length > 0) {
            game.GameData.getInstance().isCanOperate = true;
        }
        if (!rev.cardType) {
            rev.cardType = 0;
        }
        game.RoomInfo.getInstance().addShowCard(rev.thisId);
        if (rev.uid == uniLib.UserInfo.uid) {
            // game.GameData.getInstance().waitCard = 0;
            game.RoomInfo.getInstance().outCardSuccArr.push(rev.thisId);
            game.GameData.getInstance().isMyTime = false;
            // game.GameData.getInstance().isCanOperate = false;
            game.GameData.getInstance().goldOutCardSet = [];
            game.CardInfo.getInstance().discard(uniLib.UserInfo.uid, rev.thisId);
        }
        game.RoomInfo.getInstance().OutCard = rev;
        game.RoomInfo.getInstance().outerId = rev.uid;
        game.RoomInfo.getInstance().isSpecialCard = rev.cardType;
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
            if (opTime == true) {
                game.RoomInfo.getInstance().opCount = rev.sec;
            }
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
            if (opTime == true) {
                game.RoomInfo.getInstance().opCount = game.RoomInfo.getInstance().defaultOpCount;
            }
        }
        var isRepeat;
        if (rev.uid != uniLib.UserInfo.uid) {
            if (game.RoomInfo.getInstance().GM_Mode) {
                game.CardInfo.getInstance().deleteOtherHand(rev.thisId, rev.uid);
            }
            //判断打出的牌是否为模拟出牌
            //模拟出牌不操作
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
            isRepeat = ArrayUtil.isInArray(rev.thisId, game.CardInfo.getInstance().getOutCardBySeat(seatId));
            if (!isRepeat) {
                game.CardInfo.getInstance().updateUserHandCount(rev.uid, 1, 1);
                game.CardInfo.getInstance().discard(rev.uid, rev.thisId);
            }
        }
        // uniLib.Console.log("保存的出牌数据>>>>>>>>>>>"+JSON.stringify(game.CardInfo.getInstance().allOutCardSet));
        if (rev.winCardSet instanceof Array && rev.winCardSet.length > 0) {
            game.CardInfo.getInstance().winCardSet = rev.winCardSet;
            game.CardInfo.getInstance().freshListenData = true;
            gameDispatch(game.MahjongFourFacadeConst.SELF_DISCARD_NOTICE, rev.winCardSet);
        }
        if (rev.cardType != 0 && (rev.cardType == 1 || rev.cardType == 3) && rev.uid != 0) {
            game.RoomInfo.getInstance().chongfengUID = rev.uid;
            gameDispatch(game.MahjongFourFacadeConst.CHONGFENG_NOTICE, rev.uid);
        }
        gameDispatch(game.MahjongFourFacadeConst.DISCARD_NOTICE);
        if (rev.uid != uniLib.UserInfo.uid || game.RoomInfo.getInstance().isHostMode == 1 || game.RoomInfo.getInstance().isHu == true) {
            var userVo = game.RoomInfo.getInstance().getUserVoByUid(rev.uid);
            var sound = table.TableCard.resSound(rev.thisId, userVo.getGender());
            if (sound != "") {
                if (game.RoomInfo.getInstance().gameId !== 4077) {
                    uniLib.SoundMgr.instance.playSound(sound);
                }
            }
            uniLib.SoundMgr.instance.playSound(game.SoundConsts.DISCARD);
        }
    }
    Cmd.OnOutCardMahjongCmd_Brd = OnOutCardMahjongCmd_Brd;
    /**
     * 取消操作
     */
    function OnCancelOpMahjongCmd_S(rev) {
        // game.GameData.getInstance().isMyTime = false;
        // game.GameData.getInstance().isCanOperate = false;
        //金华敲响功能特殊处理
        if (rev.resultCode != 2) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnCancelOpMahjongCmd_S = OnCancelOpMahjongCmd_S;
    /*
    * 杠牌通知
    */
    function OnBarCardMahjongCmd_Brd(rev) {
        if (!rev.ownerid || rev.ownerid == uniLib.UserInfo.uid) {
            Cmd.trace("杠牌通知：BarCardMahjongCmd_Brd" + JSON.stringify(rev));
            if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarSelf
                && game.RoomInfo.getInstance().idDarkBar == 2) {
                //海南麻将 屏南麻将暗杠 不需要减少听牌提示
                game.RoomInfo.getInstance().subRemainCardNum();
            }
            else {
                if (rev.obj.barType != 201)
                    game.RoomInfo.getInstance().addShowCard(rev.obj.thisId);
                game.RoomInfo.getInstance().addShowCardList(rev.obj.cardSet);
            }
            var kongVo = new game.OperatVo();
            kongVo.setKongData(rev.obj);
            game.CardInfo.getInstance().kongCard(kongVo);
            if (game.RoomInfo.getInstance().video == 0 && game.RoomInfo.getInstance().GM_Mode && rev.obj.uid != uniLib.UserInfo.uid) {
                var cardSet = rev.obj.cardSet;
                for (var i = 0; i < cardSet.length; i++) {
                    var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
                    game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
                }
            }
            if (rev.card_type && rev.card_type != 0 && game.RoomInfo.getInstance().chongfengUID != 0) {
                game.RoomInfo.getInstance().isSpecialCard = rev.card_type;
                gameDispatch(game.MahjongFourFacadeConst.CHONGFENG_NOTICE, game.RoomInfo.getInstance().chongfengUID);
            }
            if (rev.obj.uid == uniLib.UserInfo.uid) {
                game.GameData.getInstance().isCanOperate = true;
                if (rev.obj.barType == 201) {
                    if (rev.obj.uid == rev.obj.fromUid)
                        game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, rev.obj.cardSet.length, 1);
                    else
                        game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, rev.obj.cardSet.length - 1, 1);
                }
                else if (rev.obj.barType == 202) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, (rev.obj.cardSet.length > 4 ? 1 : rev.obj.cardSet.length), 1);
                }
                else
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, rev.obj.cardSet.length, 1);
            }
            else {
                if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarTouch)
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 1, 1);
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarSelf)
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 4, 1);
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarOther)
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 3, 1);
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarOther) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 3, 1);
                }
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_BarTouch) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 1, 1);
                }
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_YuanJinBar) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 4, 1);
                }
                else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_ZaJinBar) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 4, 1);
                }
                else if (rev.obj.barType == 201) {
                    if (rev.obj.uid == rev.obj.fromUid)
                        game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, rev.obj.cardSet.length, 1);
                    else
                        game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, rev.obj.cardSet.length - 1, 1);
                }
                else if (rev.obj.barType == 202) {
                    game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, (rev.obj.cardSet.length > 4 ? 1 : rev.obj.cardSet.length), 1);
                }
            }
            game.RoomInfo.getInstance().eGetNum++;
            /**
            * 删除  打出去的牌
            */
            var fromSeat = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.fromUid);
            var fromOut = game.CardInfo.getInstance().allOutCardSet[fromSeat];
            var isHave = game.CardInfo.getInstance().removeCard(rev.obj.thisId, fromOut);
            gameDispatch(game.MahjongFourFacadeConst.KONG_NOTICE, kongVo);
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
            if (rev.obj.uid == uniLib.UserInfo.uid && game.RoomInfo.getInstance().gameId === 4055) {
                gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
            }
            if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.obj.uid) {
                var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
                var cardSet = rev.obj.cardSet;
                for (var i = 0; i < cardSet.length; i++) {
                    game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
                    return;
                }
                gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
            }
            //如果可以抢杠胡
            if (rev.canWin || rev.canTouch) {
                var op = {};
                op.opType = [];
                if (rev.canWin == 1) {
                    op.opType.push(1);
                }
                if (rev.canTouch == 1) {
                    op.opType.push(6);
                }
                gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, op);
            }
        }
        //如果是录像 且
        if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.obj.uid) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
            var cardSet = rev.obj.cardSet;
            for (var i = 0; i < cardSet.length; i++) {
                game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
            }
            gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
        }
    }
    Cmd.OnBarCardMahjongCmd_Brd = OnBarCardMahjongCmd_Brd;
    /*
     * 杠牌返回
     */
    function OnBarCardMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.PRIORITY) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnBarCardMahjongCmd_S = OnBarCardMahjongCmd_S;
    /**
     * 开杠打骰子
     */
    function OnBarDiceMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.KONG_DICE, rev.dice);
    }
    Cmd.OnBarDiceMahjongCmd_Brd = OnBarDiceMahjongCmd_Brd;
    /**开杠发牌广播 */
    function OnBarDealCardMahjongCmd_Brd(rev) {
        if (rev.hn) {
            rev.heapCardNum = rev.hn;
        }
        game.CardInfo.getInstance().barOutCardData = null;
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
        }
        game.RoomInfo.getInstance().outerId = rev.uid;
        if (!rev.cardSet) {
            rev.cardSet = [];
            var sendCard1 = new Cmd.SendCardMahjongCmd_Brd();
            sendCard1.uid = rev.uid;
            gameDispatch(game.MahjongFourFacadeConst.DRAW_NOTICE, sendCard1);
            var sendCard2 = new Cmd.SendCardMahjongCmd_Brd();
            sendCard2.uid = rev.uid;
            gameDispatch(game.MahjongFourFacadeConst.DRAW_NOTICE, sendCard2);
        }
        else {
            for (var i = 0; i < rev.cardSet.length; i++) {
                var sendCard = new Cmd.SendCardMahjongCmd_Brd();
                sendCard.uid = rev.uid;
                sendCard.thisId = rev.cardSet[i];
                gameDispatch(game.MahjongFourFacadeConst.DRAW_NOTICE, sendCard);
            }
        }
        game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
    }
    Cmd.OnBarDealCardMahjongCmd_Brd = OnBarDealCardMahjongCmd_Brd;
    /**开杠发牌 */
    function OnBarDealCardMahjongCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        gameDispatch(game.MahjongFourFacadeConst.KONG_SEND_CARD, rev);
        if (rev.opType) {
            gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, rev);
        }
    }
    Cmd.OnBarDealCardMahjongCmd_S = OnBarDealCardMahjongCmd_S;
    /**开杠打牌广播 */
    function OnBarOutCardMahjongCmd_Brd(rev) {
        game.CardInfo.getInstance().barOutCardData = rev;
        if (game.RoomInfo.getInstance().OutCard) {
            game.RoomInfo.getInstance().OutCard.eatSet = rev.eatSet;
        }
        game.CardInfo.getInstance().discard(rev.uid, rev.oneThisId);
        game.CardInfo.getInstance().discard(rev.uid, rev.twoThisId);
        gameDispatch(game.MahjongFourFacadeConst.KONG_OUT_CARD, rev);
        var userVo = game.RoomInfo.getInstance().getUserVoByUid(rev.uid);
        var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
        var soundArr = [];
        soundArr.push(table.TableCard.resSound(rev.oneThisId, userVo.getGender()));
        soundArr.push(table.TableCard.resSound(rev.twoThisId, userVo.getGender()));
        var _loop_1 = function(i) {
            if (soundArr[i] && soundArr[i] != "")
                egret.setTimeout(function () { uniLib.SoundMgr.instance.playSound(soundArr[i]); uniLib.SoundMgr.instance.playSound(game.SoundConsts.DISCARD); }, this_1, 200);
        };
        var this_1 = this;
        for (var i = 0; i < soundArr.length; i++) {
            _loop_1(i);
        }
    }
    Cmd.OnBarOutCardMahjongCmd_Brd = OnBarOutCardMahjongCmd_Brd;
    /**补张回复 */
    function OnSupplyCardMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.PRIORITY) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnSupplyCardMahjongCmd_S = OnSupplyCardMahjongCmd_S;
    /**补张广播 */
    function OnSupplyCardMahjongCmd_Brd(rev) {
        game.RoomInfo.getInstance().addShowCard(rev.obj.thisId);
        game.RoomInfo.getInstance().addShowCardList(rev.obj.cardSet);
        var kongVo = new game.OperatVo();
        kongVo.setKongData(rev.obj);
        game.CardInfo.getInstance().kongCard(kongVo);
        if (game.RoomInfo.getInstance().GM_Mode && rev.obj.uid != uniLib.UserInfo.uid) {
            var cardSet = rev.obj.cardSet;
            for (var i = 0; i < cardSet.length; i++) {
                var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
                game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
            }
        }
        if (rev.obj.uid == uniLib.UserInfo.uid) {
            game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 4, 1);
        }
        else {
            if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_SupplyOther)
                game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 3, 1);
            else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_SupplySelf)
                game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 4, 1);
            else if (rev.obj.barType == Cmd.MahjongOpCardType.MahjongOpCardType_SupplyTouch)
                game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 1, 1);
        }
        gameDispatch(game.MahjongFourFacadeConst.KONG_NOTICE, kongVo);
        if (rev.obj.uid == uniLib.UserInfo.uid) {
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        }
        //如果可以抢杠胡
        if (!rev.canWin)
            return;
        var obj = {};
        obj.opType = [1];
        gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, obj);
    }
    Cmd.OnSupplyCardMahjongCmd_Brd = OnSupplyCardMahjongCmd_Brd;
    /*
     * 碰牌通知
     */
    function OnTouchCardMahjongCmd_Brd(rev) {
        Cmd.trace("碰牌通知：TouchCardMahjongCmd_Brd" + JSON.stringify(rev));
        var pongVo = new game.OperatVo();
        game.RoomInfo.getInstance().addShowCard(rev.obj.thisId);
        game.RoomInfo.getInstance().addShowCardList(rev.obj.cardSet);
        pongVo.setPongData(rev.obj);
        pongVo.type = Cmd.MahjongOpCardType.MahjongOpCardType_Touch;
        game.CardInfo.getInstance().pongCard(pongVo);
        if (rev.card_type && game.RoomInfo.getInstance().chongfengUID != 0) {
            game.RoomInfo.getInstance().isSpecialCard = rev.card_type;
            gameDispatch(game.MahjongFourFacadeConst.CHONGFENG_NOTICE, game.RoomInfo.getInstance().chongfengUID);
        }
        if (game.RoomInfo.getInstance().video == 0 && game.RoomInfo.getInstance().GM_Mode && rev.obj.uid != uniLib.UserInfo.uid) {
            var cardSet = rev.obj.cardSet;
            for (var i = 0; i < cardSet.length; i++) {
                var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
                game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
            }
        }
        if (rev.obj.uid == uniLib.UserInfo.uid || game.RoomInfo.getInstance().video == 1) {
            game.GameData.getInstance().isCanOperate = true;
            game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 3, 1);
        }
        else {
            game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 2, 1);
        }
        /**
        * 删除  打出去的牌
        */
        var fromSeat = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.fromUid);
        var fromOut = game.CardInfo.getInstance().allOutCardSet[fromSeat];
        var isHave = game.CardInfo.getInstance().removeCard(rev.obj.thisId, fromOut);
        gameDispatch(game.MahjongFourFacadeConst.PONG_NOTICE, pongVo);
        Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.obj.uid) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
            var cardSet = rev.obj.cardSet;
            for (var i = 0; i < cardSet.length; i++) {
                game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
            }
            gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
        }
    }
    Cmd.OnTouchCardMahjongCmd_Brd = OnTouchCardMahjongCmd_Brd;
    /*
    * 碰牌返回
    */
    function OnTouchCardMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.PRIORITY) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnTouchCardMahjongCmd_S = OnTouchCardMahjongCmd_S;
    /**
     * 吃牌通知
     */
    function OnEatCardMahjongCmd_Brd(rev) {
        Cmd.trace("吃牌通知：EatCardMahjongCmd_Brd" + JSON.stringify(rev));
        game.RoomInfo.getInstance().addShowCard(rev.obj.one);
        game.RoomInfo.getInstance().addShowCard(rev.obj.two);
        game.RoomInfo.getInstance().addShowCard(rev.obj.thisId);
        var eatVo = new game.OperatVo();
        eatVo.setEatData(rev.obj);
        //吃牌和碰牌一样方法
        game.CardInfo.getInstance().pongCard(eatVo);
        if (game.RoomInfo.getInstance().video == 0 && game.RoomInfo.getInstance().GM_Mode && rev.obj.uid != uniLib.UserInfo.uid) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
            game.CardInfo.getInstance().deleteOtherHand(rev.obj.one, rev.obj.uid);
            game.CardInfo.getInstance().deleteOtherHand(rev.obj.two, rev.obj.uid);
        }
        if (rev.obj.uid == uniLib.UserInfo.uid || game.RoomInfo.getInstance().video == 1) {
            game.GameData.getInstance().isCanOperate = true;
            game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 3, 1);
        }
        else {
            game.CardInfo.getInstance().updateUserHandCount(rev.obj.uid, 2, 1);
        }
        /**
        * 删除  打出去的牌
        */
        var fromSeat = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.fromUid);
        var fromOut = game.CardInfo.getInstance().allOutCardSet[fromSeat];
        var isHave = game.CardInfo.getInstance().removeCard(rev.obj.thisId, fromOut);
        gameDispatch(game.MahjongFourFacadeConst.CHOW_NOTICE, eatVo);
        Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
        if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.obj.uid) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.obj.uid);
            var cardSet = [rev.obj.one, rev.obj.two];
            for (var i = 0; i < cardSet.length; i++) {
                game.CardInfo.getInstance().deleteOtherHand(cardSet[i], rev.obj.uid);
            }
            gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
        }
    }
    Cmd.OnEatCardMahjongCmd_Brd = OnEatCardMahjongCmd_Brd;
    /**
     * 吃牌返回
     */
    function OnEatCardMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.PRIORITY) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnEatCardMahjongCmd_S = OnEatCardMahjongCmd_S;
    /**
     * 胡牌回复
     */
    function OnWinMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.PRIORITY) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
        else if (rev.resultCode == game.NetConsts.CANCLEOPEARET) {
            gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        }
    }
    Cmd.OnWinMahjongCmd_S = OnWinMahjongCmd_S;
    /**
    * 可以天听
    */
    function OnSkyListenCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.LISTEN_NOTICE);
    }
    Cmd.OnSkyListenCmd_S = OnSkyListenCmd_S;
    /**
   * 天听成功
   */
    function OnListenCardMahjongCmd_Brd(rev) {
        var uid = rev.uid;
        gameDispatch(game.MahjongFourFacadeConst.START_lISTEN_NOTICE, uid);
    }
    Cmd.OnListenCardMahjongCmd_Brd = OnListenCardMahjongCmd_Brd;
    /**胡牌翻牌 */
    function OnWinCardMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION);
        gameDispatch(game.MahjongFourFacadeConst.WIN_CARD_NOTICE, rev);
    }
    Cmd.OnWinCardMahjongCmd_Brd = OnWinCardMahjongCmd_Brd;
    /**扎鸟广播 */
    function OnBirdMahjongCmd_Brd(rev) {
        if (rev.hn) {
            rev.heapCardNum = rev.hn;
        }
        gameDispatch(game.MahjongFourFacadeConst.BIRD_BRD, rev.birdSet);
        game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
    }
    Cmd.OnBirdMahjongCmd_Brd = OnBirdMahjongCmd_Brd;
    //多次胡牌
    function OnWinMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.REMOVE_ACTION, rev); //一炮多响时需要判断是否清楚操作
        gameDispatch(game.MahjongFourFacadeConst.WIN_MAHJONG_NOTICE, rev);
    }
    Cmd.OnWinMahjongCmd_Brd = OnWinMahjongCmd_Brd;
    /**
     * 广播胡牌结果
     */
    function OnWinRetMahjongCmd_Brd(rev) {
        game.RoomInfo.getInstance().winRes = rev;
        game.RoomInfo.getInstance().isHu = true;
        game.RoomInfo.getInstance().huID = rev.thisId;
        game.RoomInfo.getInstance().isMask = false;
        game.GameData.getInstance().isCanOperate = false;
        if (rev.rewardSet) {
            for (var i = 0; i < rev.rewardSet.length; i++) {
                var reward = rev.rewardSet[i];
                if (!reward.nickname) {
                    var user = game.RoomInfo.getInstance().getUserVoByUid(reward.uid);
                    reward.nickname = user.nickName;
                }
                if (!reward.multiDetailSet || reward.multiDetailSet.length == 0) {
                    reward.multiDetailSet = [];
                }
                if (!reward.animation) {
                    reward.animation = 0;
                }
                if (!reward.winType) {
                    reward.winType = 0;
                }
                var rounds = game.RoomInfo.getInstance().roundScore;
                for (var j = 0; j < rounds.length; j++) {
                    var round = rounds[j];
                    if (round.uid == reward.uid) {
                        round.score.push(reward.totalReward);
                    }
                }
            }
            game.RoomInfo.getInstance().chipsSets = rev.rewardSet;
        }
        if (rev.isWin !== undefined && rev.isWin === 0) {
            //四川麻将 保存胡牌数据
            //刷新点炮玩家打出去的牌
            if (rev.shootId) {
                var shootSeat = game.RoomInfo.getInstance().getSeatNoByUserId(rev.shootId);
                var shootOutCards = game.CardInfo.getInstance().allOutCardSet[shootSeat];
                var isHave = game.CardInfo.getInstance().removeCard(rev.thisId, shootOutCards);
            }
            gameDispatch(game.MahjongFourFacadeConst.HU_NOTICE, rev);
            game.RoomInfo.getInstance().isMask = true;
            return;
        }
        game.RoomInfo.getInstance().isStart = false;
        if (game.RoomInfo.getInstance().gameID !== 0) {
            gameDispatch(game.MahjongFourFacadeConst.SHOW_HU_NOTICE, rev);
            return;
        }
        if (rev.horseSet) {
            game.RoomInfo.getInstance().buyHorse = true;
        }
        else {
            game.RoomInfo.getInstance().buyHorse = false;
        }
        gameDispatch(game.MahjongFourFacadeConst.RESULT_NOTICE, rev);
    }
    Cmd.OnWinRetMahjongCmd_Brd = OnWinRetMahjongCmd_Brd;
    /**
    * 捉鸡通知
    */
    function OnCashChickenCmd_Brd(rev) {
        if (rev.cid) {
            rev.chicken_card_id = rev.cid;
        }
        if (rev.rs) {
            rev.rewardSet = rev.rs;
        }
        if (rev.cs) {
            rev.chickenSet = rev.cs;
        }
        game.RoomInfo.getInstance().zhuojiID = rev.chicken_card_id;
        //  console.info("捉鸡通知",rev.rewardSet);
        if (rev.rewardSet) {
            game.RoomInfo.getInstance().chipsSets = rev.rewardSet;
        }
        game.RoomInfo.getInstance().setCashChicken(rev.chickenSet);
        gameDispatch(game.MahjongFourFacadeConst.RESULT_NOTICE, rev);
        if (rev.chicken_card_id != 0) {
            game.RoomInfo.getInstance().upChicnkenID = rev.chickenSet[0][5];
            game.RoomInfo.getInstance().downChicnkenID = rev.chickenSet[0][6];
            gameDispatch(game.MahjongFourFacadeConst.CASH_CHICKEN, rev);
        }
    }
    Cmd.OnCashChickenCmd_Brd = OnCashChickenCmd_Brd;
    /**
     * 海底漫游 轮转
     */
    function OnSeaRoamTurnMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SEA_ROAM_TURN, rev);
    }
    Cmd.OnSeaRoamTurnMahjongCmd_Brd = OnSeaRoamTurnMahjongCmd_Brd;
    /**
     * 海底漫游广播---打一张牌出去
     */
    function OnSeaFloorCardMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SEA_ROAM_BRD, rev);
        game.RoomInfo.getInstance().setRemainCardNum(0);
        game.RoomInfo.getInstance().setRemainderCardCount(0);
        var userVo = game.RoomInfo.getInstance().getUserVoByUid(rev.uid);
        var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
        var sound = table.TableCard.resSound(rev.thisId, userVo.getGender());
        if (sound != "") {
            uniLib.SoundMgr.instance.playSound(sound);
        }
        uniLib.SoundMgr.instance.playSound(game.SoundConsts.DISCARD);
    }
    Cmd.OnSeaFloorCardMahjongCmd_Brd = OnSeaFloorCardMahjongCmd_Brd;
    /**断线重连 */
    function OnReConnectMahjongCmd_S(rev) {
        if (game.RoomInfo.getInstance().video == 1)
            return;
        game.CardInfo.getInstance().isStartSend = true;
        game.RoomInfo.getInstance().isKnock = false;
        if (rev.userCard.showFlag == 1) {
            game.RoomInfo.getInstance().host_mode = 1;
            game.CardInfo.getInstance().liangSeat[0] = rev.userCard.showFlag;
        }
        if (rev.roomId) {
            if (!game.DataCache.platParam) {
                game.DataCache.platParam = {};
            }
            game.DataCache.platParam.roomId = rev.roomId;
        }
        if (rev.curGameNbr) {
            game.RoomInfo.getInstance().curNumber = rev.curGameNbr;
        }
        if (rev.curJiao) {
            game.RoomInfo.getInstance().curJiao = rev.curJiao;
        }
        if (rev.curNbr) {
            game.RoomInfo.getInstance().curRound = rev.curNbr;
        }
        if (rev.eastUid) {
            game.RoomInfo.getInstance().eastUid = rev.eastUid;
        }
        if (rev["rfc"]) {
            game.RoomInfo.getInstance().addFlowerCard(rev["rfc"]);
        }
        if (rev.bankerId) {
            game.RoomInfo.getInstance().bankerId = rev.bankerId;
            game.RoomInfo.getInstance().setBankerInfo(rev.bankerId);
        }
        if (rev.userCard && rev.userCard.handCardSet && rev.userCard.handCardSet.length > 0) {
            game.RoomInfo.getInstance().isStart = true;
            game.CardInfo.getInstance().myCards = rev.userCard;
        }
        if (rev.otherCard) {
            game.CardInfo.getInstance().setOtherCard(rev.otherCard);
        }
        if (rev.lackInfos) {
            game.RoomInfo.getInstance().lackInfos = rev.lackInfos;
            gameDispatch(game.MahjongFourFacadeConst.GAME_DINGQEU_RECONNET);
        }
        if (rev.allOutCard) {
            game.CardInfo.getInstance().allOutCardGroup = rev.allOutCard;
        }
        if (rev.startLuo) {
            game.RoomInfo.getInstance().startLuo = rev.startLuo;
        }
        if (rev.getCardDirection) {
            game.RoomInfo.getInstance().getCardDirection = rev.getCardDirection;
        }
        if (rev.bGetNum) {
            game.RoomInfo.getInstance().bGetNum = rev.bGetNum;
        }
        if (rev.eGetNum) {
            game.RoomInfo.getInstance().eGetNum = rev.eGetNum;
        }
        if (game.RoomInfo.getInstance().gameID !== 0) {
            if (rev.goldCardSet && (rev.goldCardSet.length == 2 || rev.goldCardSet.length == 4)) {
                game.RoomInfo.getInstance().isSpecialCard = rev.goldCardSet[0];
                game.RoomInfo.getInstance().chongfengUID = rev.goldCardSet[1];
                if (game.RoomInfo.getInstance().isSpecialCard != 0 && game.RoomInfo.getInstance().chongfengUID != 0) {
                    gameDispatch(game.MahjongFourFacadeConst.CHONGFENG_NOTICE, game.RoomInfo.getInstance().chongfengUID);
                }
                game.RoomInfo.getInstance().isSpecialCard = rev.goldCardSet[2];
                game.RoomInfo.getInstance().chongfengUID = rev.goldCardSet[3];
                if (game.RoomInfo.getInstance().isSpecialCard != 0 && game.RoomInfo.getInstance().chongfengUID != 0) {
                    gameDispatch(game.MahjongFourFacadeConst.CHONGFENG_NOTICE, game.RoomInfo.getInstance().chongfengUID);
                }
            }
        }
        else {
            if (rev.goldCardSet) {
                game.RoomInfo.getInstance().goldenCard = rev.goldCardSet;
                // game.RoomInfo.getInstance().addShowCardList(rev.goldCardSet);
                if (rev.goldType) {
                    if (rev.goldType == 1) {
                        game.RoomInfo.getInstance().addShowCardList(rev.goldCardSet);
                    }
                    else if (rev.goldType == 3) {
                        game.RoomInfo.getInstance().addShowCardList(rev.displayCardSet);
                    }
                }
            }
            else {
                game.RoomInfo.getInstance().goldenCard = [];
            }
        }
        if (rev.betPoint) {
            game.RoomInfo.getInstance().betPoint = rev.betPoint;
        }
        else {
            game.RoomInfo.getInstance().betPoint = 0;
        }
        if (rev.circle) {
            game.RoomInfo.getInstance().circle = rev.circle;
        }
        if (rev.gate) {
            game.RoomInfo.getInstance().gate = rev.gate;
        }
        if (rev.userCard && rev.userCard.triCardSet) {
            //卡五星：按下的牌；屏南麻将保存亮出的牌
            game.CardInfo.getInstance().triCard = rev.userCard.triCardSet;
        }
        if (rev.userCard && rev.userCard.dangerCardSet) {
            game.CardInfo.getInstance().dangerSet = rev.userCard.dangerCardSet;
        }
        if (rev.bankerNum) {
            game.RoomInfo.getInstance().bankerNum = rev.bankerNum;
        }
        else {
            game.RoomInfo.getInstance().bankerNum = 0;
        }
        if (rev.displayCardSet) {
            game.RoomInfo.getInstance().displayCard = rev.displayCardSet;
        }
        if (!game.RoomInfo.getInstance().isStart) {
            gameDispatch(game.MahjongFourFacadeConst.READY_SHOW);
        }
        if (rev.winCardSet instanceof Array && rev.winCardSet.length > 0) {
            game.CardInfo.getInstance().winCardSet = rev.winCardSet;
            if (!game.RoomInfo.getInstance().last_OutCardMahjong) {
                game.RoomInfo.getInstance().last_OutCardMahjong = {};
            }
            game.RoomInfo.getInstance().last_OutCardMahjong.winCardSet = rev.winCardSet;
            gameDispatch(game.MahjongFourFacadeConst.SELF_DISCARD_NOTICE, rev.winCardSet);
        }
        if (rev.num) {
            game.RoomInfo.getInstance().lieNum = rev.num;
        }
        if (rev.turnType) {
            game.RoomInfo.getInstance().turnGoldType = rev.turnType;
        }
        if (rev.direction) {
            game.RoomInfo.getInstance().dirtection = rev.direction;
        }
        if (rev.laZhuangMes) {
            game.RoomInfo.getInstance().laZhuangMes = rev.laZhuangMes;
        }
        gameDispatch(game.MahjongFourFacadeConst.RELOGIN, rev);
        game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
    }
    Cmd.OnReConnectMahjongCmd_S = OnReConnectMahjongCmd_S;
    /**
     * 每局中间 点击开始
     */
    function OnReadyStartMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        Cmd.trace("点击开始：ReadyStartMahjongCmd_S" + JSON.stringify(rev));
        if (game.RoomInfo.getInstance().isStart || rev.resultCode == 1) {
            gameDispatch(game.MahjongFourFacadeConst.RESET_RESULT_PANEL);
            return;
        }
        gameDispatch(game.MahjongFourFacadeConst.RESET_TABLE);
    }
    Cmd.OnReadyStartMahjongCmd_S = OnReadyStartMahjongCmd_S;
    /*
     * 玩家准备通知
     */
    function OnReadyStartMahjongCmd_Brd(rev) {
        Cmd.trace("准备通知：ReadyStartMahjongCmd_Brd" + JSON.stringify(rev));
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.RESET_TABLE);
        }
        game.RoomInfo.getInstance().readyUsers = rev.readyUserSet;
        var userVo = game.RoomInfo.getInstance().getUserVoByUid(rev.uid);
        if (userVo) {
            userVo.multiPiao = rev.multiPiao;
            userVo.bReady = 1;
        }
        gameDispatch(game.MahjongFourFacadeConst.READY_NOTICE, rev.uid);
    }
    Cmd.OnReadyStartMahjongCmd_Brd = OnReadyStartMahjongCmd_Brd;
    /*
   * 玩家取消准备通知
   */
    function OnCancelReadyMahjongCmd_Brd(rev) {
        Cmd.trace("取消准备通知：ReadyStartMahjongCmd_Brd" + JSON.stringify(rev));
        var userVo = game.RoomInfo.getInstance().getUserVoByUid(rev.uid);
        if (userVo) {
            userVo.multiPiao = 0;
            userVo.bReady = 0;
        }
        gameDispatch(game.MahjongFourFacadeConst.CANCEL_READY_NOTICE, rev.uid);
    }
    Cmd.OnCancelReadyMahjongCmd_Brd = OnCancelReadyMahjongCmd_Brd;
    /**
     * 在线状态
     */
    function OnOnlineStateMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_ONLINE_STATE, rev);
    }
    Cmd.OnOnlineStateMahjongCmd_Brd = OnOnlineStateMahjongCmd_Brd;
    /**
     * GM 请求牌堆
     */
    function OnHeapCardGmMahjongCmd_S(rev) {
        game.CardInfo.getInstance().heapCard = rev.cardSet;
        if (rev.cardSet && rev.cardSet.length > 0) {
            gameDispatch(game.MahjongFourFacadeConst.GM_HEAP_CARD, rev.cardButton);
        }
        else {
            gameDispatch(game.MahjongFourFacadeConst.GM_DELETE);
        }
    }
    Cmd.OnHeapCardGmMahjongCmd_S = OnHeapCardGmMahjongCmd_S;
    /**
     * GM 请求换牌
     */
    function OnChangeCardGmMahjongCmd_S(rev) {
        //更新牌堆数据
        game.CardInfo.getInstance().updateHeapCard(rev.oldCardId, rev.newCardId);
        if (rev.needDelete == 0) {
            //手牌OLD换成NEW 并刷新手牌         
            game.CardInfo.getInstance().changeCard(rev.oldCardId, rev.newCardId);
        }
        else {
            //删除old等待摸牌消息
            game.CardInfo.getInstance().removeMyCard(rev.oldCardId);
        }
        gameDispatch(game.MahjongFourFacadeConst.GM_CHANGE_CARD);
        game.CardInfo.getInstance().winCardSet = [];
        if (rev.winCardSet instanceof Array && rev.winCardSet.length > 0) {
            game.CardInfo.getInstance().winCardSet = rev.winCardSet;
            gameDispatch(game.MahjongFourFacadeConst.SELF_DISCARD_NOTICE, rev.winCardSet);
        }
        if (rev.heapCardNum) {
            game.RoomInfo.getInstance().setRemainCardNum(rev.heapCardNum);
            game.RoomInfo.getInstance().setRemainderCardCount(rev.heapCardNum);
        }
        else {
            game.RoomInfo.getInstance().setRemainderCardCount(0);
        }
    }
    Cmd.OnChangeCardGmMahjongCmd_S = OnChangeCardGmMahjongCmd_S;
    function OnSendGiftMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SEND_GIFTS_NOTICE, rev);
    }
    Cmd.OnSendGiftMahjongCmd_Brd = OnSendGiftMahjongCmd_Brd;
    function OnSendGiftMahjongCmd_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
    }
    Cmd.OnSendGiftMahjongCmd_S = OnSendGiftMahjongCmd_S;
    function OnRefreshChipsMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.UPDATA_USER_CHIP, rev);
    }
    Cmd.OnRefreshChipsMahjongCmd_Brd = OnRefreshChipsMahjongCmd_Brd;
    function OnRefreshPointsMahjongCmd_Brd(rev) {
        game.RoomInfo.getInstance().pointSet = rev.pointSet;
        gameDispatch(game.MahjongFourFacadeConst.UPDATA_USER_POINT);
    }
    Cmd.OnRefreshPointsMahjongCmd_Brd = OnRefreshPointsMahjongCmd_Brd;
    function OnGetPersonalPanel_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.USERINFO_DATA, rev.userInfo);
        if (Cmd.dispatch)
            Cmd.dispatch("PersonalInfo", rev.userInfo);
    }
    Cmd.OnGetPersonalPanel_S = OnGetPersonalPanel_S;
    /**返回ip和gps获取经度纬度 */
    function OnReturnIpAndGPSCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.ReturnIpAndGPS, rev);
    }
    Cmd.OnReturnIpAndGPSCmd_S = OnReturnIpAndGPSCmd_S;
    function OnStartNewRoundOpTimeCmd_Brd(rev) {
        if (rev.sec || rev.sec == 0) {
            game.RoomInfo.getInstance().outCount = rev.sec;
        }
        else {
            game.RoomInfo.getInstance().outCount = game.RoomInfo.getInstance().defaultOutCount;
        }
        gameDispatch(game.MahjongFourFacadeConst.START_ROUND_NOTICE, rev);
        gameDispatch(game.MahjongFourFacadeConst.START_NEW_ROUND_TIME, rev);
    }
    Cmd.OnStartNewRoundOpTimeCmd_Brd = OnStartNewRoundOpTimeCmd_Brd;
    function OnFinalScoreMahjongCmd_Brd(rev) {
        for (var i = 0; i < rev.recordInfo.length; i++) {
            if (!rev.recordInfo[i].nickname || !rev.recordInfo[i].headurl) {
                var user = game.RoomInfo.getInstance().getUserVoByUid(rev.recordInfo[i].uid);
                rev.recordInfo[i].nickname = user.nickName;
                rev.recordInfo[i].headurl = user.headUrl;
            }
            if (!rev.recordInfo[i].isOwner) {
                rev.recordInfo[i].isOwner = false;
            }
            if (!rev.recordInfo[i].isWinner) {
                rev.recordInfo[i].isWinner = 0;
            }
        }
        if (rev.reason) {
            game.GameData.getInstance().resultReason = rev.reason;
        }
        else {
            game.GameData.getInstance().resultReason = null;
        }
        game.RoomInfo.getInstance().matchId = rev.matchId;
        game.GameData.getInstance().recordInfo = rev.recordInfo;
        // if(rev.)
        if (rev.state == 1) {
            //中途解散房间
            gameDispatch(game.MahjongFourFacadeConst.TOTAL_RECORD_DATA, rev.recordInfo);
        }
        else if (rev.state == 2) {
        }
        else if (rev.state == 3) {
            game.GameData.getInstance().recordInfo = null; //本次消息中删除本次结算信息
            game.GameData.getInstance().jiaoRecordInfo = rev.recordInfo; //保存角结算
        }
        // gameDispatch(game.MahjongFourFacadeConst.SEND_DATA, null, game.DataRequestCommand.CLOSE);
    }
    Cmd.OnFinalScoreMahjongCmd_Brd = OnFinalScoreMahjongCmd_Brd;
    function OnRequestDissolveRoom_S(rev) {
        if (!rev.resultCode) {
            rev.resultCode = 0;
        }
        if (rev.resultCode == game.NetConsts.SUCCESS && rev.userNum > 1) {
            game.GameInfo.manage.showMildWarnShow(game.DataCache.langObj.alertTxt.dismissOk);
        }
    }
    Cmd.OnRequestDissolveRoom_S = OnRequestDissolveRoom_S;
    function OnRequestDissolveRoom_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.DISS_REQUEST_NOTICE, rev);
    }
    Cmd.OnRequestDissolveRoom_Brd = OnRequestDissolveRoom_Brd;
    function OnSuccessDissolveRoom_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.DISS_RESULT_NOTICE, rev);
    }
    Cmd.OnSuccessDissolveRoom_Brd = OnSuccessDissolveRoom_Brd;
    function OnReplyDissolveRoom_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.DISS_NOTICE, rev);
    }
    Cmd.OnReplyDissolveRoom_Brd = OnReplyDissolveRoom_Brd;
    function OnVoiceChat_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.VOICE_NOTICE, rev);
    }
    Cmd.OnVoiceChat_Brd = OnVoiceChat_Brd;
    function OnCommonChat_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_COMMON_CHAT, rev);
    }
    Cmd.OnCommonChat_Brd = OnCommonChat_Brd;
    function OnVoiceChatRecord_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_CHAT_RECORD, rev);
    }
    Cmd.OnVoiceChatRecord_S = OnVoiceChatRecord_S;
    function OnSetSameIpWarn_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_SAME_IP, rev);
    }
    Cmd.OnSetSameIpWarn_S = OnSetSameIpWarn_S;
    /**
     * 服务器返回的消息提示
     */
    function OnSysMessageMahjongCmd_S(rev) {
        if (game.GameInfo && game.GameInfo.manage) {
            if (game.RoomInfo.getInstance().gameId == 4109 || game.RoomInfo.getInstance().gameId == 4110) {
                rev.desc = rev.desc.replace(/钻石/g, "元宝");
            }
            if (rev.pos && rev.pos == 2) {
                gameDispatch(game.MahjongFourFacadeConst.SERVER_MESSAGE_NOTICE, rev);
                return;
            }
            game.GameInfo.manage.showMildWarnShow(rev.desc);
        }
    }
    Cmd.OnSysMessageMahjongCmd_S = OnSysMessageMahjongCmd_S;
    /**积分更新 */
    function OnChangePointMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_POINT_CHANGE, rev);
    }
    Cmd.OnChangePointMahjongCmd_Brd = OnChangePointMahjongCmd_Brd;
    /**请求亮牌返回 */
    function OnShowCardMahjongCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.GAME_SHOW_CARD_BACK, rev);
    }
    Cmd.OnShowCardMahjongCmd_S = OnShowCardMahjongCmd_S;
    /**
     * 玩家亮牌广播
     * 2人麻将：只有听牌的人收到 未听牌的人的uid和对应的手牌
     *  */
    function OnShowCardMahjongCmd_Brd(rev) {
        var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
        if (game.CardInfo.getInstance().liangSeat[seatId] == 1) {
            return;
        }
        else {
            game.CardInfo.getInstance().liangSeat[seatId] = 1;
        }
        if (rev.uid != uniLib.UserInfo.uid) {
            if (game.RoomInfo.getInstance().gameId == 4037) {
                game.CardInfo.getInstance().triCardSet[seatId] = rev.handCardSet;
            }
            else {
                game.CardInfo.getInstance().triCardSet[seatId] = rev.handCardSet;
                game.CardInfo.getInstance().dangerSet = game.CardInfo.getInstance().dangerSet.concat(rev.listenSet);
            }
        }
        if (rev.uid == uniLib.UserInfo.uid) {
            game.RoomInfo.getInstance().host_mode = 1;
            if (game.RoomInfo.getInstance().gameId == 4037) {
                game.CardInfo.getInstance().triCard = rev.handCardSet;
            }
            gameDispatch(game.MahjongFourFacadeConst.NOTICE_CARD_ENABLE, false);
        }
        if (seatId != 0) {
            game.CardInfo.getInstance().allHandCardSet[seatId] = rev.handCardSet;
        }
        gameDispatch(game.MahjongFourFacadeConst.NOTICE_SHOW_CARD_BRD, rev);
    }
    Cmd.OnShowCardMahjongCmd_Brd = OnShowCardMahjongCmd_Brd;
    /**托管返回 */
    function OnHostMahjongCmd_S(rev) {
    }
    Cmd.OnHostMahjongCmd_S = OnHostMahjongCmd_S;
    /**托管广播 */
    function OnHostMahjongCmd_Brd(rev) {
        if (rev.uid == uniLib.UserInfo.uid) {
            game.RoomInfo.getInstance().isHostMode = rev.hostType;
        }
        gameDispatch(game.MahjongFourFacadeConst.NOTIFY_HOST, rev);
    }
    Cmd.OnHostMahjongCmd_Brd = OnHostMahjongCmd_Brd;
    /**  Echo应答,服务器探测玩家是否活着 收到直接返回*/
    function OnServerEchoMahjongCmd_SC(rev) {
        var req = new Cmd.ServerEchoMahjongCmd_SC();
        if (rev) {
            req.id = rev.id;
            req.desc = rev.desc;
        }
        gameDispatch(game.MahjongFourFacadeConst.SEND_DATA, req, game.DataRequestCommand.GAME_DATA);
    }
    Cmd.OnServerEchoMahjongCmd_SC = OnServerEchoMahjongCmd_SC;
    /** 请求切换房间人数返回*/
    function OnRequestChangeUserNbrRoom_Brd(rev) {
        if (rev.uid == uniLib.UserInfo.uid) {
            gameDispatch(game.MahjongFourFacadeConst.CHANGE_USERNUM_BACK, rev);
        }
        else {
            gameDispatch(game.MahjongFourFacadeConst.CHANGE_USERNUM_NOTICE, rev);
        }
    }
    Cmd.OnRequestChangeUserNbrRoom_Brd = OnRequestChangeUserNbrRoom_Brd;
    /**通知显示提前开局*/
    function OnShowChangeUserNbrRoom_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SHOW_CHANGE_BTN);
    }
    Cmd.OnShowChangeUserNbrRoom_S = OnShowChangeUserNbrRoom_S;
    function OnShowPrepareBtnRoom_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SHOW_READY_BTN);
    }
    Cmd.OnShowPrepareBtnRoom_S = OnShowPrepareBtnRoom_S;
    /**回退 */
    function OnRecallOneCardMahjongCmd_S(rev) {
        var handCardArr = [];
        var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
        handCardArr = game.CardInfo.getInstance().getHandCardBySeat(seatId);
        var isHaveHand = ArrayUtil.isInArray(rev.thisId, handCardArr);
        if (isHaveHand) {
            //如果在手牌中
            handCardArr.splice(handCardArr.indexOf(rev.thisId), 1);
            gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
            return;
        }
        var outCardArr = game.CardInfo.getInstance().getOutCardBySeat(seatId);
        var isHaveOut = ArrayUtil.isInArray(rev.thisId, outCardArr);
        if (isHaveOut) {
            //如果thisId在outcard内，收回到手牌，outcard删除该牌
            handCardArr.push(rev.thisId);
            outCardArr.splice(outCardArr.indexOf(rev.thisId), 1);
            gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
            return;
        }
        var tagetId = 0; //吃碰杠的玩家
        if (!isHaveOut) {
            //如果outcard没有,开始遍历该牌所属玩家
            for (var i = 0; i < 4; i++) {
                //4个玩家的操作牌
                var arr = game.CardInfo.getInstance().getOpCardBySeat(i);
                for (var j = 0; j < arr.length; j++) {
                    var operate = arr[j];
                    if (operate.thisId == rev.thisId) {
                        tagetId = operate.uid;
                        break;
                    }
                }
            }
            var tagetSeat = game.RoomInfo.getInstance().getSeatNoByUserId(tagetId);
            var opCardArr = game.CardInfo.getInstance().getOpCardBySeat(tagetSeat);
            handCardArr = game.CardInfo.getInstance().getHandCardBySeat(tagetSeat);
            for (var i = 0; i < opCardArr.length; i++) {
                if (opCardArr[i].thisId == rev.thisId) {
                    var op = opCardArr[i];
                    handCardArr.concat(op.cardSet);
                    opCardArr.splice(i, 1);
                    break;
                }
            }
            if (tagetId != 0) {
                gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, tagetSeat);
            }
        }
    }
    Cmd.OnRecallOneCardMahjongCmd_S = OnRecallOneCardMahjongCmd_S;
    /**
     * 超时暂停
     */
    function OnTimeOutWaitMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.TIMEOUT_WAIT, rev);
    }
    Cmd.OnTimeOutWaitMahjongCmd_Brd = OnTimeOutWaitMahjongCmd_Brd;
    /**海南麻将吃三道 */
    function OnDZHNShowMsgCartoon_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.DZHN_ACTION, rev);
    }
    Cmd.OnDZHNShowMsgCartoon_S = OnDZHNShowMsgCartoon_S;
    /**gps */
    function OnGetGPSLocationCmd_Brd(rev) {
        game.RoomInfo.getInstance().changeUserGPS(rev);
        gameDispatch(game.MahjongFourFacadeConst.GET_GPS, rev);
    }
    Cmd.OnGetGPSLocationCmd_Brd = OnGetGPSLocationCmd_Brd;
    /**
     * 宽甸
     */
    function OnPlayButtonMahjongCmd_S(rev) {
        if (game.RoomInfo.getInstance().video == 1) {
            return;
        }
        gameDispatch(game.MahjongFourFacadeConst.PLAY_BUTTON, rev);
    }
    Cmd.OnPlayButtonMahjongCmd_S = OnPlayButtonMahjongCmd_S;
    /**宽甸报夹 报吊广布 */
    function OnPlayButtonMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.PLAY_BUTTON_BRD, rev);
    }
    Cmd.OnPlayButtonMahjongCmd_Brd = OnPlayButtonMahjongCmd_Brd;
    /**
     * 二人麻将 加倍
     */
    function OnDoubleMahjongCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.TWO_MAHJIONG_BACK, rev);
    }
    Cmd.OnDoubleMahjongCmd_S = OnDoubleMahjongCmd_S;
    /**
     * 二人麻将 加倍
     */
    function OnDoubleMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.TWO_MAHJIONG_DOUBLE, rev);
    }
    Cmd.OnDoubleMahjongCmd_Brd = OnDoubleMahjongCmd_Brd;
    /**
     * 金币场 超过上限后提示
     * 1:输赢达到上限 2:金币不足
     */
    function OnCheckMoneyMahjongCmd_S(rev) {
        gameDispatch(game.MahjongFourFacadeConst.CHECK_CONDITION, rev);
    }
    Cmd.OnCheckMoneyMahjongCmd_S = OnCheckMoneyMahjongCmd_S;
    /**血战血流用。游戏内破产充值 */
    function OnChargeGoldCoinMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SICHUAN_BANKRUPTCY, rev);
    }
    Cmd.OnChargeGoldCoinMahjongCmd_Brd = OnChargeGoldCoinMahjongCmd_Brd;
    function OnGameLoserUidMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SICHUAN_BANKRUPTCY_BACK, rev);
    }
    Cmd.OnGameLoserUidMahjongCmd_Brd = OnGameLoserUidMahjongCmd_Brd;
    /**南昌麻将 下精算分广播 */
    function OnXiaGoldCardPointMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.NANCHANG_XIAGOLDCARD_BRD, rev);
    }
    Cmd.OnXiaGoldCardPointMahjongCmd_Brd = OnXiaGoldCardPointMahjongCmd_Brd;
    /**万州麻将买拍广播 */
    function OnBuyCardMahjongCmd_Brd(rev) {
        if (game.RoomInfo.getInstance().video == 1) {
            return;
        }
        gameDispatch(game.MahjongFourFacadeConst.SICHUAN_BUYCARD, rev);
    }
    Cmd.OnBuyCardMahjongCmd_Brd = OnBuyCardMahjongCmd_Brd;
    /**开始抓花广播 */
    function OnStartSelectCardMahjong_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.START_SELECTCARD, rev);
    }
    Cmd.OnStartSelectCardMahjong_Brd = OnStartSelectCardMahjong_Brd;
    /**抓花广播 */
    function OnSelectCardMahjong_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SELECT_CARD, rev);
    }
    Cmd.OnSelectCardMahjong_Brd = OnSelectCardMahjong_Brd;
    /**漳浦起台子广播 */
    function OnEndPiaoMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.ZHANGPU_QITAIZI);
    }
    Cmd.OnEndPiaoMahjongCmd_Brd = OnEndPiaoMahjongCmd_Brd;
    /**视频请求 */
    function OnVideoChatRequestCmd_CS(rev) {
        gameDispatch(game.MahjongFourFacadeConst.VIDEO_REQUEST, rev);
    }
    Cmd.OnVideoChatRequestCmd_CS = OnVideoChatRequestCmd_CS;
    /**视频聊天结果 */
    function OnVideoChatReturnCmd_CS(rev) {
        gameDispatch(game.MahjongFourFacadeConst.VIDEO_RESULT, rev);
    }
    Cmd.OnVideoChatReturnCmd_CS = OnVideoChatReturnCmd_CS;
    /**
    *  C-&gt;S 视频聊天关闭请求
    *  S-&gt;C 视频聊天关闭通知
    */
    function OnVideoChatShutdownCmd_CS(rev) {
        gameDispatch(game.MahjongFourFacadeConst.VIDEO_CLOST, rev);
    }
    Cmd.OnVideoChatShutdownCmd_CS = OnVideoChatShutdownCmd_CS;
    /**万州麻将的换牌数据 */
    function OnChangeCardDataMahjong_S(rev) {
        if (!rev.ownerid || rev.ownerid == game.RoomInfo.getInstance().videoUid) {
            gameDispatch(game.MahjongFourFacadeConst.WANZHOU_CHANGECARD, rev);
        }
    }
    Cmd.OnChangeCardDataMahjong_S = OnChangeCardDataMahjong_S;
    /**万州麻将买牌广播 */
    function OnBuyCardMahjong_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.WANZHOU_BUYCARD, rev);
    }
    Cmd.OnBuyCardMahjong_Brd = OnBuyCardMahjong_Brd;
    /**万州麻将的已胡玩家数据广播 */
    function OnWinSeatCardDataMahjong_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.WANZHOU_WINDATA, rev);
    }
    Cmd.OnWinSeatCardDataMahjong_Brd = OnWinSeatCardDataMahjong_Brd;
    /**
     * 扣牌通知
     */
    function OnKouCardMahjongCmd_CS(rev) {
        // console.error(JSON.stringify(rev));
        gameDispatch(game.MahjongFourFacadeConst.KOU_NOTICE, rev);
    }
    Cmd.OnKouCardMahjongCmd_CS = OnKouCardMahjongCmd_CS;
    /**
     * 扣牌玩家等待列表
     */
    function OnWaitKouSeatMahjongCmd_S(rev) {
        // console.error(JSON.stringify(rev));
        gameDispatch(game.MahjongFourFacadeConst.KOU_WAITLIST, rev);
    }
    Cmd.OnWaitKouSeatMahjongCmd_S = OnWaitKouSeatMahjongCmd_S;
    /**
     * 其他玩家扣牌数量更新
     */
    function OnOtherKouCardMahjongCmd_Brd(rev) {
        console.error(JSON.stringify(rev));
        game.CardInfo.getInstance().updataKouCardInfo(rev.KouCards);
        gameDispatch(game.MahjongFourFacadeConst.OTHER_KOU_UPDATE, rev);
    }
    Cmd.OnOtherKouCardMahjongCmd_Brd = OnOtherKouCardMahjongCmd_Brd;
    /**刷新特殊玩家手牌（慎重） */
    function OnRefreshUserCards_S(rev) {
        if (rev.userCard) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.userCard.uid);
            game.CardInfo.getInstance().userHandCount[seatId] = rev.userCard.handCardSet.length;
            if (rev.userCard.uid == uniLib.NetMgr.UID) {
                game.CardInfo.getInstance().myCards = rev.userCard;
            }
            else {
                var cardList = [];
                cardList.push(rev.userCard);
                game.CardInfo.getInstance().setOtherCard(cardList);
            }
        }
        gameDispatch(game.MahjongFourFacadeConst.REFRESH_USER_CARDS, rev);
    }
    Cmd.OnRefreshUserCards_S = OnRefreshUserCards_S;
    /**
     * 玩家风牌叠加消息
     */
    function OnSuperPosition_CS(rev) {
        if (rev.cardId && rev.uid) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
            game.CardInfo.getInstance().setWindOpCardsBySeat(rev.uid, rev.cardId, rev.windCardSet, rev.inCardId);
            if (game.RoomInfo.getInstance().video == 0 && game.RoomInfo.getInstance().GM_Mode && rev.uid != uniLib.UserInfo.uid) {
                game.CardInfo.getInstance().deleteOtherHand(rev.cardId, rev.uid);
            }
            if (rev.uid == uniLib.UserInfo.uid || game.RoomInfo.getInstance().video == 1) {
                game.GameData.getInstance().isCanOperate = true;
            }
            if (!rev.inCardId)
                game.CardInfo.getInstance().updateUserHandCount(rev.uid, 1, 1);
            gameDispatch(game.MahjongFourFacadeConst.SUPERPOSITION_CARD_NOTICE, rev);
            Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
            if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.uid) {
                game.CardInfo.getInstance().deleteOtherHand(rev.cardId, rev.uid);
                gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
            }
        }
        if (rev.opType) {
            var op = {};
            op.opType = rev.opType;
            gameDispatch(game.MahjongFourFacadeConst.SHOW_ACTION, op);
        }
    }
    Cmd.OnSuperPosition_CS = OnSuperPosition_CS;
    /**
     * 玩家放风协议
     */
    function OnSendWindMahjongCmd_CS(rev) {
        game.RoomInfo.getInstance().isSettingWindCard = false;
        game.CardInfo.getInstance().recommendWindList = [];
        if (rev.uid) {
            if (rev.uid == uniLib.NetMgr.UID) {
                if (rev.state == true) {
                    game.RoomInfo.getInstance().isSettingWindCard = true;
                    if (rev.list)
                        game.CardInfo.getInstance().recommendWindList = rev.list;
                }
            }
            else {
                game.RoomInfo.getInstance().isSettingWindCard = false;
            }
            if (rev.cardList && rev.cardList.cardSet) {
                var operatVo = new game.OperatVo();
                operatVo.setWindData(rev.uid, rev.cardList.cardSet[0]);
                var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
                for (var i_1 = 0; i_1 < rev.cardList.cardSet.length; i_1++) {
                    var card = rev.cardList.cardSet[i_1];
                    game.RoomInfo.getInstance().addShowCard(card);
                }
                game.CardInfo.getInstance().WindCard(operatVo, rev.cardList.cardSet);
                if (game.RoomInfo.getInstance().video == 0 && game.RoomInfo.getInstance().GM_Mode && rev.uid != uniLib.UserInfo.uid) {
                    for (var i_2 = 0; i_2 < rev.cardList.cardSet.length; i_2++) {
                        game.CardInfo.getInstance().deleteOtherHand(rev.cardList.cardSet[i_2], rev.uid);
                    }
                }
                if (rev.uid == uniLib.UserInfo.uid || game.RoomInfo.getInstance().video == 1) {
                    game.GameData.getInstance().isCanOperate = true;
                }
                game.CardInfo.getInstance().updateUserHandCount(rev.uid, rev.cardList.cardSet.length, 1);
                gameDispatch(game.MahjongFourFacadeConst.WIND_CARD_NOTICE, rev);
                Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
                if (game.RoomInfo.getInstance().video == 1 && game.RoomInfo.getInstance().videoUid != rev.uid) {
                    for (var i = 0; i < rev.cardList.cardSet.length; i++) {
                        game.CardInfo.getInstance().deleteOtherHand(rev.cardList.cardSet[i], rev.uid);
                    }
                    gameDispatch(game.MahjongFourFacadeConst.VIDEO_REFRESH_HANDCARD, seatId);
                }
                return;
            }
        }
        gameDispatch(game.MahjongFourFacadeConst.WIND_CARD_NOTICE, rev);
    }
    Cmd.OnSendWindMahjongCmd_CS = OnSendWindMahjongCmd_CS;
    /**
     *  玩家下注通知
     */
    function OnAddBasePoint_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.ADD_BASEPOINT_NOTICE, rev);
    }
    Cmd.OnAddBasePoint_Brd = OnAddBasePoint_Brd;
    /**
     * 古田麻将翻金阶段选择按钮(只发给庄家)
     */
    function OnStartChoiseTurnGoldType_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SHOW_TURNGOLD_BTN, rev);
    }
    Cmd.OnStartChoiseTurnGoldType_Brd = OnStartChoiseTurnGoldType_Brd;
    /**
     * 古田麻将翻金方式
     */
    function OnChoiseTurnGoldType_Brd(rev) {
        if (rev.num) {
            game.RoomInfo.getInstance().lieNum = rev.num;
        }
        if (rev.turnType) {
            game.RoomInfo.getInstance().turnGoldType = rev.turnType;
        }
        if (rev.direction) {
            game.RoomInfo.getInstance().dirtection = rev.direction;
        }
        gameDispatch(game.MahjongFourFacadeConst.CHOISE_TURNGOLD_NOTICE);
    }
    Cmd.OnChoiseTurnGoldType_Brd = OnChoiseTurnGoldType_Brd;
    /**
     * 过蛋操作通知
     */
    function OnShowBarCardPassTheEgg_CS(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SHOW_PASSEGG_NOTICE, rev);
    }
    Cmd.OnShowBarCardPassTheEgg_CS = OnShowBarCardPassTheEgg_CS;
    /**
     * 开局拉庄广播
     */
    function OnSetLaZhuangMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.SET_LAZHUANG_NOTICE, rev);
    }
    Cmd.OnSetLaZhuangMahjongCmd_Brd = OnSetLaZhuangMahjongCmd_Brd;
    function OnLaZhuangMahjongCmd_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.GAME_LAZHUANG_NOTICE, rev);
    }
    Cmd.OnLaZhuangMahjongCmd_Brd = OnLaZhuangMahjongCmd_Brd;
    /**重连时 战绩数据 */
    function OnShowRoundScore_S(rev) {
        var scores = rev.rs;
        for (var i = 0; i < scores.length; i++) {
            var score = scores[i];
            if (!(score.score instanceof Array)) {
                score.score = [];
            }
        }
        game.RoomInfo.getInstance().roundScore = rev.rs;
    }
    Cmd.OnShowRoundScore_S = OnShowRoundScore_S;
    /**玩家牌型报警通知 */
    function OnCardTypeWarnMahjong_Brd(rev) {
        gameDispatch(game.MahjongFourFacadeConst.CARD_TYPE_WARN_NOTICE, rev);
    }
    Cmd.OnCardTypeWarnMahjong_Brd = OnCardTypeWarnMahjong_Brd;
})(Cmd || (Cmd = {}));
var Pmd;
(function (Pmd) {
    function OnServerShutDownLoginUserPmd_S(rev) {
        game.RoomInfo.getInstance().leftTime = rev.lefttime;
        game.RoomInfo.getInstance().notice = rev.desc;
        Cmd.gameDispatch(game.MahjongFourFacadeConst.STOP_SREVICE_NOTICE, rev);
    }
    Pmd.OnServerShutDownLoginUserPmd_S = OnServerShutDownLoginUserPmd_S;
})(Pmd || (Pmd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *
 * @author
 *
 */
var game;
(function (game) {
    var StartupMJCommand = (function (_super) {
        __extends(StartupMJCommand, _super);
        function StartupMJCommand() {
            _super.call(this);
        }
        StartupMJCommand.prototype.execute = function (notification) {
            var rootView = notification.getBody();
            this.initController();
            this.initProxy();
            this.initMediator();
        };
        StartupMJCommand.prototype.initController = function () {
            this.facade.registerCommand(game.MahjongFourFacadeConst.SEND_DATA, game.DataRequestCommand);
            this.facade.registerCommand(game.MahjongFourFacadeConst.DESTORY, game.RemoveCommand);
        };
        StartupMJCommand.prototype.initMediator = function () {
            var mainMediator = uniLib.getDefinitionByName(game.GameViewConfig.mainMediatorName);
            game.GameViewConfig.mainMediator = new mainMediator();
            game.MahJongFourFacede.getInstance().registerMediator(game.GameViewConfig.mainMediator);
        };
        StartupMJCommand.prototype.initProxy = function () {
            this.facade.registerProxy(new game.ServerMJProxy());
        };
        return StartupMJCommand;
    }(puremvc.MacroCommand));
    game.StartupMJCommand = StartupMJCommand;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * 房间主要数据
     *
     */
    var CardInfo = (function () {
        function CardInfo() {
            /**丽水特殊需求 所有打出去的牌 */
            this.allOutCardGroup = [];
            /**手牌对象池 */
            this.MySelfCardPool = [];
            /**牌堆数据 */
            this.heapCard = [];
            /**自己摸牌数据 */
            this.drawData = null;
            /**吃牌信息 */
            this.eatObj = new Cmd.EatCardObj;
            /**可以胡牌数据 */
            this.winCardSet = [];
            /**是否听牌数据被刷新 */
            this.freshListenData = false;
            /**其他玩家默认手牌13张 */
            this.userHandCount = [];
            /**当自己为庄家时 第十四张牌的thisId 临时保存点*/
            /**危牌 */
            this.dangerSet = [];
            /**暗下的刻字 baseid */
            this.triCard = [];
            /**杠后打牌数据 */
            this.barOutCardData = null;
            /**
             * 所有玩家亮牌标志
             * 0为正常 1为已亮牌
             */
            this.liangSeat = [0, 0, 0, 0];
            /** 四川麻将自己换牌数据 */
            this.exCardSet = [];
            /**是否开局发牌 */
            this.isStartSend = false;
            /**放喜推荐的牌 */
            this.recommendWindList = [];
            this.initHandCard();
        }
        CardInfo.getInstance = function () {
            if (!this.instance) {
                this.instance = new CardInfo();
            }
            return this.instance;
        };
        /**重连设置所有玩家手牌数 */
        CardInfo.prototype.reloginUserHandCard = function () {
            var userlist = game.RoomInfo.getInstance().userList;
            for (var i = 0; i < userlist.length; i++) {
                var vo = userlist[i];
                var seat = game.RoomInfo.getInstance().getSeatNoByUserId(vo.uid);
                if (vo.handCardNum) {
                    this.userHandCount[seat] = vo.handCardNum;
                }
                else {
                    this.userHandCount[seat] = 0;
                }
            }
        };
        /**
         * 初始化手牌信息
         * 进入房间、开始游戏时调用
         */
        CardInfo.prototype.initHandCard = function () {
            this.triCard = [];
            this.dangerSet = [];
            this.liangSeat = [];
            this.userWinSet = [[], [], [], []];
            this.userWindCardBaseIdMap = {};
            this.userWindCardMap = {};
            this.triCardSet = [[], [], [], []];
            this.allOpCardSet = [[], [], [], []];
            this.allHandCardSet = [[], [], [], []];
            this.kouCardInfo = [];
            this.allOutCardSet = [[], [], [], []];
            this.allFlowerCardSet = [[], [], [], []];
            this.userHandCount = [];
            this.allOutCardGroup = [];
        };
        Object.defineProperty(CardInfo.prototype, "myCards", {
            /**
             * 保存我的手牌、操作牌、打出去的牌和花牌
             * 开始游戏、重连时设置
             */
            set: function (vo) {
                this.allHandCardSet[0] = [];
                if (vo.handCardSet) {
                    this.allHandCardSet[0] = vo.handCardSet;
                    game.RoomInfo.getInstance().addShowCardList(vo.handCardSet);
                }
                this.allOpCardSet[0] = [];
                // if (this.userWindCardBaseIdMap && this.userWindCardBaseIdMap[0])
                this.userWindCardBaseIdMap[0] = {};
                this.userWindCardMap[0] = {};
                if (vo.eatSet) {
                    for (var i = 0; i < vo.eatSet.length; i++) {
                        var operatVo = new game.OperatVo();
                        operatVo.setEatData(vo.eatSet[i]);
                        this.allOpCardSet[0].push(operatVo);
                        game.RoomInfo.getInstance().addShowCard(vo.eatSet[i].one);
                        game.RoomInfo.getInstance().addShowCard(vo.eatSet[i].two);
                        game.RoomInfo.getInstance().addShowCard(vo.eatSet[i].thisId);
                    }
                }
                if (vo.barSet) {
                    for (var i = 0; i < vo.barSet.length; i++) {
                        var operatVo = new game.OperatVo();
                        operatVo.setKongData(vo.barSet[i]);
                        if (operatVo.type == 202) {
                            operatVo.cardSet = this.updataWindCardCount(0, operatVo.cardSet);
                        }
                        this.allOpCardSet[0].push(operatVo);
                        if (vo.barSet[i].barType != 201 || vo.barSet[i].barType != 202)
                            game.RoomInfo.getInstance().addShowCard(vo.barSet[i].thisId);
                        game.RoomInfo.getInstance().addShowCardList(vo.barSet[i].cardSet);
                    }
                }
                if (vo.touchSet) {
                    for (var i = 0; i < vo.touchSet.length; i++) {
                        var operatVo = new game.OperatVo();
                        operatVo.setPongData(vo.touchSet[i]);
                        this.allOpCardSet[0].push(operatVo);
                        game.RoomInfo.getInstance().addShowCard(vo.touchSet[i].thisId);
                        game.RoomInfo.getInstance().addShowCardList(vo.touchSet[i].cardSet);
                    }
                }
                if (vo.windCardSet) {
                    for (var i = 0; i < vo.windCardSet.length; i++) {
                        var operatVo = new game.OperatVo();
                        operatVo.setWindData(vo.uid, vo.windCardSet[i].cardSet[0]);
                        if (!this.userWindCardMap[0])
                            this.userWindCardMap[0] = {};
                        if (!this.userWindCardMap[0][operatVo.index])
                            this.userWindCardMap[0][operatVo.index] = [];
                        this.userWindCardMap[0][operatVo.index] = vo.windCardSet[i].cardSet;
                        operatVo.cardSet = this.updataWindCardCount(0, vo.windCardSet[i].cardSet);
                        this.allOpCardSet[0].push(operatVo);
                        game.RoomInfo.getInstance().addShowCardList(vo.windCardSet[i].cardSet);
                    }
                }
                this.allOutCardSet[0] = [];
                if (vo.outCardSet) {
                    this.allOutCardSet[0] = vo.outCardSet;
                    game.RoomInfo.getInstance().addShowCardList(vo.outCardSet);
                }
                this.allFlowerCardSet[0] = [];
                if (vo.flowerCardSet) {
                    this.allFlowerCardSet[0] = vo.flowerCardSet;
                    game.RoomInfo.getInstance().addShowCardList(vo.flowerCardSet);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置其他玩家手牌
         */
        CardInfo.prototype.setOtherCard = function (cardList) {
            for (var i = 0; i < cardList.length; i++) {
                var eatArr = [];
                var kongArr = [];
                var pongArr = [];
                var windArr = [];
                var uid = cardList[i].uid;
                var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
                this.allOpCardSet[seat] = [];
                // if (this.userWindCardBaseIdMap && this.userWindCardBaseIdMap[seat])
                this.userWindCardBaseIdMap[seat] = {};
                this.userWindCardMap[seat] = {};
                if (cardList[i].handCardSet)
                    this.allHandCardSet[seat] = cardList[i].handCardSet;
                if (cardList[i].outCardSet) {
                    this.allOutCardSet[seat] = cardList[i].outCardSet;
                    game.RoomInfo.getInstance().addShowCardList(cardList[i].outCardSet);
                }
                if (cardList[i].flowerCardSet) {
                    this.allFlowerCardSet[seat] = cardList[i].flowerCardSet;
                    game.RoomInfo.getInstance().addShowCardList(cardList[i].flowerCardSet);
                }
                if (cardList[i].touchSet) {
                    pongArr = cardList[i].touchSet;
                }
                if (cardList[i].barSet) {
                    kongArr = cardList[i].barSet;
                }
                if (cardList[i].eatSet) {
                    eatArr = cardList[i].eatSet;
                }
                if (cardList[i].triCardSet) {
                    this.triCardSet[seat] = cardList[i].triCardSet;
                }
                for (var j = 0; j < pongArr.length; j++) {
                    var pongVo = new game.OperatVo;
                    pongVo.setPongData(pongArr[j]);
                    this.allOpCardSet[seat].push(pongVo);
                    game.RoomInfo.getInstance().addShowCard(pongArr[j].thisId);
                    game.RoomInfo.getInstance().addShowCardList(pongArr[j].cardSet);
                }
                for (var k = 0; k < kongArr.length; k++) {
                    var kongVo = new game.OperatVo;
                    kongVo.setKongData(kongArr[k]);
                    if (kongVo.type == 202) {
                        kongVo.cardSet = this.updataWindCardCount(seat, kongVo.cardSet);
                    }
                    this.allOpCardSet[seat].push(kongVo);
                    game.RoomInfo.getInstance().addShowCard(kongArr[k].thisId);
                    game.RoomInfo.getInstance().addShowCardList(kongArr[k].cardSet);
                }
                for (var l = 0; l < eatArr.length; l++) {
                    var eatVo = new game.OperatVo;
                    eatVo.setEatData(eatArr[l]);
                    this.allOpCardSet[seat].push(eatVo);
                    game.RoomInfo.getInstance().addShowCard(eatArr[l].one);
                    game.RoomInfo.getInstance().addShowCard(eatArr[l].two);
                    game.RoomInfo.getInstance().addShowCard(eatArr[l].thisId);
                }
                if (cardList[i].windCardSet) {
                    windArr = cardList[i].windCardSet;
                    for (var n = 0; n < windArr.length; n++) {
                        var windVo = new game.OperatVo;
                        windVo.setWindData(uid, windArr[n].cardSet[0]);
                        if (!this.userWindCardMap[seat])
                            this.userWindCardMap[seat] = {};
                        if (!this.userWindCardMap[seat][windVo.index])
                            this.userWindCardMap[seat][windVo.index] = [];
                        this.userWindCardMap[seat][windVo.index] = windArr[n].cardSet;
                        windVo.cardSet = this.updataWindCardCount(seat, windArr[n].cardSet);
                        this.allOpCardSet[seat].push(windVo);
                        game.RoomInfo.getInstance().addShowCardList(windArr[n].cardSet);
                    }
                }
            }
        };
        /**
         * 出牌后 删除玩家手牌
         */
        CardInfo.prototype.deleteOtherHand = function (thisId, uid) {
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            var arr = this.getHandCardBySeat(seat);
            if (!arr)
                return;
            if (arr.indexOf(Number(thisId)) == -1)
                return;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == thisId) {
                    arr.splice(i, 1);
                    return;
                }
            }
        };
        /**
         * 根据thisId 添加普通手牌
         * 过滤已经有的thisId
         */
        CardInfo.prototype.addOtherCard = function (thisId, uid) {
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            var arr = this.getHandCardBySeat(seat);
            return this.addCard(thisId, arr);
        };
        /**
         * 获取对应seatId的手牌信息
         */
        CardInfo.prototype.getHandCardBySeat = function (seat) {
            var handcard = this.allHandCardSet[seat];
            return handcard;
        };
        /**
         * 更新扣牌信息
         */
        CardInfo.prototype.updataKouCardInfo = function (list) {
            list = list != null && list instanceof Array ? list : [];
            if (list.length == 0)
                return;
            if (this.kouCardInfo.length == 0) {
                for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                    var item = list_1[_i];
                    var info = new Cmd.KouCardInfo();
                    info.infoType = item.infoType;
                    info.kouCount = item.kouCount;
                    info.uid = item.uid;
                    this.kouCardInfo.push(info);
                }
            }
            else {
                for (var i = 0; i < this.kouCardInfo.length; i++) {
                    for (var j = 0; j < list.length; j++) {
                        if (this.kouCardInfo[i].uid == list[j].uid) {
                            this.kouCardInfo[i].kouCount = list[j].kouCount;
                            this.kouCardInfo[i].infoType = list[j].infoType;
                        }
                        else {
                            var info1 = new Cmd.KouCardInfo();
                            info1.infoType = list[j].infoType;
                            info1.kouCount = list[j].kouCount;
                            info1.uid = list[j].uid;
                            this.kouCardInfo.push(info1);
                        }
                    }
                }
            }
        };
        CardInfo.prototype.getKouCardNumBySeatId = function (id) {
            var num = 0;
            for (var i = 0; i < this.kouCardInfo.length; i++) {
                var info = this.kouCardInfo[i];
                var seat = game.RoomInfo.getInstance().getSeatNoByUserId(info.uid);
                if (seat != null && id == seat) {
                    num = info.kouCount;
                }
            }
            return num;
        };
        /**
         * 获取对应seatId操作牌信息
         */
        CardInfo.prototype.getOpCardBySeat = function (seat) {
            var handcard = this.allOpCardSet[seat];
            return handcard;
        };
        /**
         *设置风牌叠加或替换(用服务器发来的数据完全覆盖)
         * @param  {number} uid uid
         * @param  {number} cardId 需要操作大牌的ID
         * @param  {Cmd.WindCardObj} updateObj 换牌后的风牌堆
         ** @param  {number} inCardId 需要换人的牌
         */
        CardInfo.prototype.setWindOpCardsBySeat = function (uid, cardId, updateObj, inCardId) {
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            if (seat == 0) {
                if (!inCardId)
                    this.removeMyCard(cardId);
                else
                    this.changeCard(inCardId, cardId);
            }
            var opCardList = this.allOpCardSet[seat];
            if (opCardList && opCardList.length > 0) {
                for (var i = 0; i < opCardList.length; i++) {
                    var op = opCardList[i];
                    //山寨一下 用thisid判断一下当前是哪个组
                    if (updateObj.cardSet.indexOf(op.index) != -1) {
                        if (!this.userWindCardMap[seat])
                            this.userWindCardMap[seat] = {};
                        if (!this.userWindCardMap[seat][op.index])
                            this.userWindCardMap[seat][op.index] = [];
                        this.userWindCardMap[seat][op.index] = updateObj.cardSet;
                        op.cardSet = this.updataWindCardCount(seat, updateObj.cardSet); //用服务器发来的牌堆数据覆盖本地保存的牌堆
                        this.allOpCardSet[seat][i] = op;
                        return;
                    }
                }
            }
        };
        /**刷新风牌组数量 并返回服务器发来的当前牌堆去重后的内容*/
        CardInfo.prototype.updataWindCardCount = function (seat, cardList) {
            if (!cardList || cardList.length < 1)
                return [];
            var tmpCardList = [];
            if (!this.userWindCardBaseIdMap[seat]) {
                this.userWindCardBaseIdMap[seat] = {};
            }
            for (var j = 0; j < cardList.length; j++) {
                var card = cardList[j];
                var baseId = Math.floor(card / 10);
                if (this.getSameCard(baseId, tmpCardList) == true) {
                    this.userWindCardBaseIdMap[seat][baseId] += 1;
                }
                else {
                    tmpCardList.push(card);
                    this.userWindCardBaseIdMap[seat][baseId] = 1;
                }
            }
            cardList = tmpCardList;
            return tmpCardList;
        };
        /**
         * 获取对应seatId已出牌信息
         */
        CardInfo.prototype.getOutCardBySeat = function (seat) {
            var handcard = this.allOutCardSet[seat];
            return handcard;
        };
        /**
         * 获取对应seatId花牌信息
         */
        CardInfo.prototype.getFlowerCardBySeat = function (seat) {
            var handcard = this.allFlowerCardSet[seat];
            return handcard;
        };
        /**保存所有玩家补花数据 ,过滤重复添加*/
        CardInfo.prototype.addFlowerCardByUid = function (thisId, uid) {
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            var handcard = this.getFlowerCardBySeat(seat);
            this.addCard(thisId, handcard);
        };
        /**
         * 添加thisId到指定数组
         * 过滤已经添加的牌，并返回是否有该牌
         */
        CardInfo.prototype.addCard = function (thisId, arr) {
            if (!arr || !(arr instanceof Array)) {
                return false;
            }
            var isHave = false;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == thisId) {
                    isHave = true;
                    return isHave;
                }
            }
            if (isHave == false) {
                arr.push(thisId);
            }
            return isHave;
        };
        /**
         * 删除
         */
        CardInfo.prototype.removeCard = function (thisId, arr) {
            if (!arr || !(arr instanceof Array)) {
                return false;
            }
            var isHave = false;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == thisId) {
                    arr.splice(i, 1);
                    isHave = true;
                    return isHave;
                }
            }
        };
        /**
         * 根据thisId 添加普通手牌
         * 过滤已经有的thisId
         */
        CardInfo.prototype.addMyCard = function (thisId, needFresh) {
            if (needFresh === void 0) { needFresh = false; }
            var arr = this.getHandCardBySeat(0);
            var isHave = this.addCard(thisId, arr);
            if (!isHave) {
                Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE, thisId);
            }
            if (needFresh) {
                Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
            }
            return isHave;
        };
        /**
         * 根据thisId 删除uid手牌
         */
        CardInfo.prototype.removeMyCard = function (thisId) {
            var arr = this.getHandCardBySeat(0);
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == thisId) {
                    arr.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        /**
         * 如果有碰牌或者吃牌 删除手牌中的2张牌
         */
        CardInfo.prototype.pongCard = function (rev) {
            if (rev.uid == uniLib.UserInfo.uid) {
                for (var i = 0; i < rev.cardSet.length; i++) {
                    this.removeMyCard(rev.cardSet[i]);
                }
            }
            //数据保存到对应数组
            this.getOpCardBySeat(rev.seatId).push(rev);
        };
        /**
         * 杠牌
         */
        CardInfo.prototype.kongCard = function (rev) {
            if (rev.uid == uniLib.UserInfo.uid) {
                for (var i = 0; i < rev.cardSet.length; i++) {
                    this.removeMyCard(rev.thisId);
                    this.removeMyCard(rev.cardSet[i]);
                }
            }
            if (rev.type == Cmd.MahjongOpCardType.MahjongOpCardType_BarTouch || rev.type == Cmd.MahjongOpCardType.MahjongOpCardType_SupplyTouch) {
                for (var j = 0; j < game.RoomInfo.getInstance().userList.length; j++) {
                    if (game.RoomInfo.getInstance().userList[j].uid == rev.uid) {
                        var opArr = CardInfo.getInstance().getOpCardBySeat(rev.seatId);
                        for (var i_1 = 0; i_1 < opArr.length; i_1++) {
                            var op = opArr[i_1];
                            if (ArrayUtil.isInArray(op.thisId, rev.cardSet)) {
                                opArr.splice(i_1, 1);
                                break;
                            }
                        }
                    }
                }
            }
            if (rev.type == 202) {
                var opList = this.allOpCardSet[rev.seatId];
                for (var n = 0; n < opList.length; n++) {
                    if (opList[n].type == 202) {
                        opList.splice(n, 1);
                        break;
                    }
                }
                var cardList = this.updataWindCardCount(rev.seatId, rev.cardSet);
                if (cardList && cardList.length > 0)
                    rev.cardSet = cardList;
            }
            //数据保存到对应数组
            this.getOpCardBySeat(rev.seatId).push(rev);
        };
        /**
         * 放风牌,保存每张风牌的数量
         *
         */
        CardInfo.prototype.WindCard = function (rev, cardSet) {
            if (rev.uid == uniLib.UserInfo.uid) {
                for (var i = 0; i < cardSet.length; i++) {
                    var card = cardSet[i];
                    this.removeMyCard(card);
                }
            }
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(rev.uid);
            if (!this.userWindCardMap[seat])
                this.userWindCardMap[seat] = {};
            if (!this.userWindCardMap[seat][rev.index])
                this.userWindCardMap[seat][rev.index] = [];
            this.userWindCardMap[seat][rev.index] = cardSet;
            rev.cardSet = this.updataWindCardCount(seat, cardSet);
            //数据保存到对应数组
            this.getOpCardBySeat(rev.seatId).push(rev);
        };
        /**获取列表中是否有相同的牌*/
        CardInfo.prototype.getSameCard = function (baseId, cardList) {
            if (!cardList || cardList.length < 1)
                return false;
            for (var i = 0; i < cardList.length; i++) {
                if (Math.floor(cardList[i] / 10) == baseId) {
                    return true;
                }
            }
            return false;
        };
        /**
         * 设置对应seatid出牌数据
         * 如果是自己 增加outcard \ 删除手牌
         * 如果是其他玩家 增加outcard
         */
        CardInfo.prototype.discard = function (uid, thisId, needAdd) {
            if (needAdd === void 0) { needAdd = true; }
            var seat = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            if (needAdd) {
                this.addCard(thisId, this.getOutCardBySeat(seat));
            }
            if (uid == uniLib.UserInfo.uid) {
                if (this.removeMyCard(thisId)) {
                    Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
                }
                var len = game.CardInfo.getInstance().getHandCardBySeat(0).length;
                if (len % 3 > 1) {
                    game.CardInfo.getInstance().removeFlowerCard();
                    Cmd.gameDispatch(game.MahjongFourFacadeConst.SELF_HANDCARD_CHANGE);
                }
            }
        };
        /**
         * 更新牌堆
         * !!!oldCardId:旧手牌 加入牌堆；newCardId:新手牌 从牌堆中删除
         */
        CardInfo.prototype.updateHeapCard = function (oldCardId, newCardId) {
            var cards = this.heapCard;
            var len = cards.length;
            for (var i = 0; i < len; i++) {
                if (cards[i] == newCardId) {
                    cards.splice(i, 1);
                }
            }
            cards.push(oldCardId);
        };
        /**
         * GM 更换手牌
         * !!!oldCardId:旧手牌 从手牌中删除；newCardId:新手牌 添加至新手牌
         */
        CardInfo.prototype.changeCard = function (oldCardId, newCardId) {
            var arr = this.getHandCardBySeat(0);
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == oldCardId) {
                    arr.splice(i, 1);
                    arr.push(newCardId);
                    return;
                }
            }
        };
        /**玩家手牌数量
         *
         * type 0:增加牌
         *      1:减牌
         */
        CardInfo.prototype.updateUserHandCount = function (uid, num, type) {
            var total;
            if (game.RoomInfo.getInstance().gameId == 4037 || game.RoomInfo.getInstance().gameId == 4077 ||
                game.RoomInfo.getInstance().gameId == 4088 || game.RoomInfo.getInstance().gameId == 4031 ||
                game.RoomInfo.getInstance().gameId == 4036 || game.RoomInfo.getInstance().gameId == 4104 ||
                game.RoomInfo.getInstance().gameId == 4105 || game.RoomInfo.getInstance().gameId == 4122 ||
                game.RoomInfo.getInstance().gameId == 4123 || game.RoomInfo.getInstance().handCardNum == 16) {
                total = 17;
            }
            else if (game.RoomInfo.getInstance().handCardNum != 13) {
                total = game.RoomInfo.getInstance().handCardNum + 1; //以后的就用新方法 只需要在游戏gameScene设置手牌数量 不用gameId来判断
            }
            else {
                total = 14;
            }
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            var count = this.userHandCount[seatId];
            if (type == 0) {
                if (count < total) {
                    this.userHandCount[seatId] = count + num;
                }
            }
            else {
                this.userHandCount[seatId] = count - num;
            }
            // console.error("玩家手牌数量："+JSON.stringify(this.userHandCount));
        };
        /**
         * 删除手中的花
         */
        CardInfo.prototype.removeFlowerCard = function () {
            var arr = this.getHandCardBySeat(0);
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] > 500) {
                    arr.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        /**数据没有则添加、
         * 已有数据则删除
         * 刻字 */
        CardInfo.prototype.addTriCard = function (data) {
            var isHave = false;
            for (var i = 0; i < this.triCard.length; i++) {
                if (this.triCard[i] == data) {
                    isHave = true;
                    this.triCard.splice(i, 1);
                    return;
                }
            }
            if (!isHave) {
                this.triCard.push(data);
            }
        };
        /**
         * 搜索数组中是否包含花
         */
        CardInfo.prototype.searchFlower = function (value) {
            for (var i = 0; i < value.length; i++) {
                if (value[i] > 500) {
                    return true;
                }
            }
            return false;
        };
        return CardInfo;
    }());
    game.CardInfo = CardInfo;
})(game || (game = {}));

var game;
(function (game) {
    var CardUtils = (function () {
        function CardUtils() {
        }
        /**
         * 计算手牌
         */
        CardUtils.getHandleCards = function (vo) {
            var handleCards = new Array();
            for (var i = 0; i < vo.handCardSet.length; i++) {
                if (vo.handCardSet[i]) {
                    handleCards.push(vo.handCardSet[i]);
                }
            }
            for (var i = 0; i < vo.flowerCardSet.length; i++) {
                if (vo.flowerCardSet[i]) {
                    handleCards.push(vo.flowerCardSet[i]);
                }
            }
            return handleCards;
        };
        return CardUtils;
    }());
    game.CardUtils = CardUtils;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var DataCache = (function () {
        function DataCache() {
        }
        DataCache.defaultWidth = 1280;
        DataCache.defaultHeight = 720;
        DataCache.path = "";
        DataCache.destroyResOnExit = false;
        return DataCache;
    }());
    game.DataCache = DataCache;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var GameInfo = (function () {
        function GameInfo() {
        }
        GameInfo.prototype.destory = function () {
            GameInfo.main = null;
            GameInfo.stage = null;
            GameInfo.mainUILayer = null;
            GameInfo.uiLayer = null;
            GameInfo.topLayer = null;
            GameInfo.manage = null;
        };
        /**是否全面屏适配 也就是scene不进行缩放 放在舞台中央 只是背景图一再gameScene上一级 显示在最下面 并且对背景图进行剪切 */
        GameInfo.isAllSceneApa = function () {
            if (this.main && this.main.parent && this.main.parent.x != 0) {
                return true;
            }
            return false;
        };
        return GameInfo;
    }());
    game.GameInfo = GameInfo;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var MyUserInfo = (function () {
        function MyUserInfo() {
        }
        MyUserInfo.getInstance = function () {
            if (!this.instance) {
                this.instance = new MyUserInfo();
            }
            return this.instance;
        };
        /**
         * OnLogin_S 后刷新个人信息
         */
        MyUserInfo.prototype.setData = function (data) {
            this.userId = data.uid;
            this.gender = data.gender;
            this.remainder = data.points;
            this.nickName = data.nickname;
        };
        return MyUserInfo;
    }());
    game.MyUserInfo = MyUserInfo;
})(game || (game = {}));

var game;
(function (game) {
    var PositionData = (function () {
        function PositionData() {
        }
        PositionData.seatPosArr = [new egret.Point(30, 455), new egret.Point(1156, 264), new egret.Point(954, 11), new egret.Point(30, 264)];
        PositionData.wallCardPosArr = [new egret.Point(243, 94), new egret.Point(902, 73), new egret.Point(855, 443), new egret.Point(183, 476)];
        PositionData.listenPosArr = [new egret.Point(577, 520), new egret.Point(826, 292), new egret.Point(577, 103), new egret.Point(405, 292)];
        PositionData.cardSpaceXArr = [36, 0, -36, 0];
        PositionData.cardSpaceYArr = [0, 24, 0, -24];
        PositionData.cardsRowNum = 18;
        PositionData.cardsTotalNum = 144;
        return PositionData;
    }());
    game.PositionData = PositionData;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * 房间主要数据
     *
     */
    var RoomInfo = (function () {
        function RoomInfo() {
            /**是否录像 1:录像 */
            this.video = 0;
            /**录像uid */
            this.videoUid = 0;
            /**游戏Id */
            this.gameId = 0;
            /**房主uid */
            this.houseOwnerUID = 0;
            /** 房间类型 0：分数，1：金币，2：钻石*/
            this.RoomSocreType = 0;
            /** 金币场的底分*/
            this.baseSore = 0;
            /**操作牌倒计时 */
            this.defaultOpCount = 0;
            /**出牌倒计时 */
            this.defaultOutCount = 0;
            /**支付模式 0,房主支付  1，均摊支付 */
            this.payMode = 0;
            /**玩法 12 全自摸 11半自摸*/
            this.playType = 0;
            /**当前的局数 */
            this.curNumber = 1;
            /**总共的局数 */
            this.totalNumber = 1;
            /**房间描述 */
            this.roomDesc = "";
            /**
             * 牌堆剩余牌数
             */
            this.heapCardNum = 0;
            /**
             * 新*牌堆剩余牌数
             * 采用服务器直接发送的数据
             */
            this.remainderCardCount = 0;
            /**
             * 游戏状态，是否开始游戏
             */
            this.isStart = false;
            /**
             * 是否显示GM
             */
            this.isShowGMTool = false;
            /**GM 模式 */
            this.GM_Mode = false;
            /**托管 */
            this.host_mode = 0;
            /**麻将人数 2或4 */
            this.playerNumber = 4;
            /** 金牌ID组*/
            this.goldenCard = [];
            /**房间内所有玩家基础信息，包括自己 */
            this.userList = [];
            /**
             * 语音语言：pu普通话，lo龙岩话
             */
            this.languageMode = "pu";
            /**
             * 换桌布
             */
            this.tableclothMode = "green";
            /**
             * 是否开启换桌面模式
             */
            this.tableMode = 0;
            /**
             * 庄家ID
             */
            this.bankerId = -1;
            /**
             * 庄家座位ID
             */
            this.bankerSeatId = -1;
            /**玩家筹码 */
            this.chipsSets = [];
            /**胡牌ID */
            this.huID = 0;
            /**房间类型RoomType ,因为有冲突,不得不换名,郁闷
             *
             * 好彩真人 二人麻将 借用此字段：1为匹配模式 0为开房模式
            */
            this.roomIdType = 0;
            /**是否支持托管 0为不支持 1为支持*/
            this.canHostMode = 1;
            /**
             * 是否为新手
             */
            this.isNewIn = false;
            /**是否为托管模式 0为正常 1为托管*/
            this.isHostMode = 0;
            /**
             * 为了过滤多种出牌失败返回情况
             * 保存所有自己打出去的牌
             * */
            this.outCardSuccArr = [];
            /**游戏名 */
            this._gameName = "";
            /**玩家分数 */
            this.pointSet = [];
            /**连庄 */
            this.bankerNum = 0;
            /**低分 */
            this.betPoint = 0;
            /**翻金 */
            this.displayCard = [];
            /**古田 */
            this.flcard = [];
            /**敲响 */
            this.isKnock = false;
            /**买马 */
            this.buyHorse = false;
            /** 金华特殊处理房间类型 2为局数模式 1 为打捆积分模式*/
            this.roomType = 0;
            /**是否有原缺，控制原缺后定缺选择不会与原缺动画重叠*/
            this.isYuanQue = false;
            /**
             * 定缺牌型
             */
            this.dqCardType = 0;
            /**是否有特殊牌型 如冲锋鸡 1:冲锋鸡 2：责任鸡*/
            this.isSpecialCard = 0;
            /**是否有特殊状态，如天听以及四川血流连续胡牌*/
            this.isListen = false;
            /**可以天听时是否点击听按钮*/
            this.clickListen = false;
            /**
             *是否显示遮罩,控制在开局发牌未选择定缺时候不显示遮罩
             */
            this.isMask = false;
            /**是否开局换牌 */
            this.changeHandCard = false;
            /**是否放风放喜阶段 */
            this.isSettingWindCard = false;
            /**南京麻将是否翻倍 */
            this.isdouble = 0;
            /**
             * 控制开局换牌时候哪些牌不能更换
             */
            this.changeType = [];
            /**保存系统自动换牌的牌 */
            this.exCardSuccArr = [];
            /**
             * 捉鸡鸡牌ID
             */
            this.zhuojiID = 0;
            /**
             * 上鸡牌ID
             */
            this.upChicnkenID = 0;
            /**玩家手牌 */
            this.userHandCard = [];
            /**是否有房主小费 */
            this.isTip = false;
            /**
             * 上下鸡单个鸡分
             */
            this.singleChicnken = 1;
            /**
             * 捉鸡鸡牌信息
             */
            this.chicnkenSet = [];
            /**
             * 下鸡牌ID
             */
            this.downChicnkenID = 0;
            /**
             * 色子播放时间
             */
            this.diceTime = 1;
            //-----------
            this.gameID = 0;
            /**四川麻将判断自己已经赢了 */
            this.selfWin = false;
            /**第一次准备 */
            this.firstReady = true;
            /**海南麻将 */
            this.lastShangGa = 0;
            /**惠州麻将花牌做鬼时候 鬼牌数量 */
            this._HuiZhouFlowerNum = 8;
            /**南京麻将 */
            this._flbarUser = [];
            /**是否是暗杠，目前只涉及到听牌的数量，暗杠是否显示牌背是游戏里面单独处理  1非暗杠 2暗杠*/
            this.idDarkBar = 1;
            /**宽甸麻将是否报夹 */
            this.isBao = false;
            /**
             * 好彩2人麻将 听牌后加成倍数
             */
            this.multiple = 0;
            /**
             * 发牌动画是否播完 true 为正在播放；false为已播完
             * 判断是否显示摸的牌
             */
            this.isTween = false;
            /**
             *中心五 当前第几角
             */
            this.curJiao = 0;
            /**
             *中心五 本角第几局
             */
            this.curRound = 0;
            /**是否角分场 */
            this.isJiaoFen = false;
            /**重连 正向已抓的数据 */
            this.bGetNum = 0;
            /**重连 逆向已抓的数据*/
            this.eGetNum = 0;
            /**
             * 2.5D特殊需求
             * 增加金牌数量(用做牌堆)
             * 红中王不用翻金为0 以此类推
             * */
            this.goldCardNum = 0;
            /**
             * 血战血流 胡牌后标志 用于自己出牌声音处理
             */
            this.isHu = false;
            /**手牌有多少张 现在有13张和16张 */
            this.handCardNum = 13;
            /**
             *  (用来计算牌堆)
             *
             * 摸牌类型(2:庄家起手模拟发牌  10:吃碰后模拟发牌  1:杠后摸牌 0为正常发牌)
             */
            this.drawType = 0;
            /**
             * 古田 ：翻金方式
             */
            this.lieNum = 1;
            this.dirtection = 1;
            this.turnGoldType = 1;
            /**
             * 输入音效随机播放数量的值(目前默认是3)
             */
            this.soundRandomNum = 3;
            /**
             * 补花方式 0：打出去牌的最前面(原)、1：单独放置(新)
             */
            this.flowerType = 0;
            /**
             * 原版：0
             * 新增：1，摸牌动画+手牌插入动画+其他玩家的手牌跳动提醒
             */
            this.drawMode = 0;
            /**
             * 玩家战绩
             */
            this.roundScore = [];
            /**
             * 是否显示对局流水
             */
            this.showRoundScore = false;
            this.liangUser = [];
        }
        RoomInfo.getInstance = function () {
            if (!this.instance) {
                this.instance = new RoomInfo();
            }
            return this.instance;
        };
        RoomInfo.destory = function () {
            if (this.instance) {
                this.instance = null;
            }
        };
        /**
         *进入房间刷新个人信息
         */
        RoomInfo.prototype.setData = function (data) {
            this.initData();
            this.userList = [];
            this.roomId = data.roomId;
            this.opCount = data.opCount;
            this.defaultOpCount = data.opCount;
            this.outCount = data.outCount;
            this.defaultOutCount = data.outCount;
            this.readyUsers = data.prepareSet;
            this.initRoomProps(data.roomProps);
            this.musicSetInfo = data.setInfo;
            this.initUserList(data.userInfoSet);
            this.playTypeList = [];
            this.playTypeList = data.props;
            if (data.darkBar) {
                this.idDarkBar = data.darkBar;
            }
            this.getPlayTypeByList();
            this.getHostMode();
            this.setGoldenMj();
            if (data.roomType) {
                this.roomIdType = data.roomType;
            }
            else {
                this.roomIdType = 0;
            }
            this.minMatchPoint = data.minMatchPoint;
            this.bottomPoint = data.bottomPoint;
            this.leavingPoint = data.leavingPoint;
            this.enteringPoint = data.enteringPoint;
        };
        /**
         * 获取房间类型
         */
        RoomInfo.prototype.getRoomType = function () {
            if (this.roomId < 100000) {
                return 2; //做个老版本兼容
            }
            else {
                return this.roomIdType;
            }
        };
        /**
         * 进入房间初始化数据
         */
        RoomInfo.prototype.initData = function () {
            //默认无马
            this.playType = 0;
        };
        /**
         * 设置庄家ID和SeatId
         */
        RoomInfo.prototype.setBankerInfo = function (bankerId) {
            this.bankerId = bankerId;
            this.bankerSeatId = this.getSeatNoByUserId(bankerId);
            this.last_SendCardMahjong = null;
            this.last_OutCardMahjong = null;
            this.showCardThisIdMap = {};
            this.showCardBaseIdMap = {};
        };
        RoomInfo.prototype.addShowCardList = function (list) {
            if (!list) {
                return false;
            }
            for (var i = 0; i < list.length; i++) {
                this.addShowCard(list[i]);
            }
            return true;
        };
        RoomInfo.prototype.addShowCard = function (thisId, heap) {
            if (this.showCardThisIdMap[thisId]) {
                return false;
            }
            this.showCardThisIdMap[thisId] = 1;
            var baseId = Math.floor(thisId / 10);
            if (this.showCardBaseIdMap[baseId]) {
                this.showCardBaseIdMap[baseId] += 1;
            }
            else {
                this.showCardBaseIdMap[baseId] = 1;
            }
            if (heap) {
                this.subRemainCardNum();
            }
            else {
                Cmd.gameDispatch(game.MahjongFourFacadeConst.LASTCARD_CHANGE);
            }
            return true;
        };
        RoomInfo.prototype.getShowCardRemainNum = function (id) {
            var baseId = id;
            var num = 4;
            if (baseId > 100) {
                baseId = Math.floor(baseId / 10);
            }
            if (baseId == 48) {
                num = this._HuiZhouFlowerNum;
            }
            if (this.showCardBaseIdMap[baseId]) {
                return num - this.showCardBaseIdMap[baseId];
            }
            return num;
        };
        RoomInfo.prototype.subRemainCardNum = function () {
            this.setRemainCardNum(this.getRemainCardNum() - 1);
        };
        /**
         * 设置当前剩余牌数
         */
        RoomInfo.prototype.setRemainCardNum = function (num) {
            if ((!num && num != 0) || this.heapCardNum == num)
                return;
            this.heapCardNum = num;
            Cmd.gameDispatch(game.MahjongFourFacadeConst.LASTCARD_CHANGE);
        };
        RoomInfo.prototype.getRemainCardNum = function () {
            if (this.heapCardNum <= 0) {
                return 0;
            }
            return this.heapCardNum;
        };
        /**
         * 新---设置当前剩余牌数 采用服务器数据
         */
        RoomInfo.prototype.setRemainderCardCount = function (num) {
            this.remainderCardCount = num;
            Cmd.gameDispatch(game.MahjongFourFacadeConst.CHANGE_REMAINDER_COUNT);
        };
        RoomInfo.prototype.getRemainderCardCount = function () {
            if (this.remainderCardCount <= 0) {
                return 0;
            }
            return this.remainderCardCount;
        };
        /**
        * 获取房间属性
        */
        RoomInfo.prototype.initRoomProps = function (list) {
            if (!list || list.length <= 0)
                return;
            for (var i = 0; i < list.length; i++) {
                if (!list[i].value) {
                    list[i].value = 0;
                }
                if (list[i].id == 102) {
                    this.roomType = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_1) {
                    this.totalNumber = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_2) {
                    this.playType = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_3) {
                    this.playerNumber = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_4) {
                    this.payMode = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_5) {
                    this.goldMulti = list[i].value;
                }
                if (list[i].id == Cmd.RoomPro.RoomPro_6) {
                    this.canHostMode = list[i].value;
                }
                if (list[i].id == 100) {
                    this.playType = list[i].value;
                }
                if (list[i].id == 101) {
                    this.playType = list[i].value;
                }
                if (list[i].id == 103) {
                    this.multiple = list[i].value;
                }
                if (list[i].id == 105) {
                    if (list[i].value == 2) {
                        this.isJiaoFen = true;
                    }
                    else {
                        this.isJiaoFen = false;
                    }
                }
            }
        };
        /**
         * 玩家列表初始化
         */
        RoomInfo.prototype.initUserList = function (data) {
            for (var i = 0; i < data.length; i++) {
                var user = data[i];
                var vo = new game.UserVo(user);
                this.userList.push(vo);
            }
        };
        /**
         * 有新玩家进入
         * 添加或者刷新
         */
        RoomInfo.prototype.addUser = function (vo) {
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].uid == vo.uid) {
                    this.userList[i] = vo;
                    return;
                }
            }
            this.userList.push(vo);
        };
        /**
         *查询玩家
         */
        RoomInfo.prototype.getUserVoByUid = function (uid) {
            var test = new Cmd.UserBaseInfo;
            test.uid = 111111;
            test.gender = "女";
            test.nickname = "111111";
            var user = new game.UserVo(test);
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].uid == uid) {
                    return this.userList[i];
                }
            }
            //下面做个冗余,为了做上帝视角
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].seatId == 1) {
                    return this.userList[i];
                }
            }
            console.error(">>>>>>不明身份人士混入房间:" + uid);
            return user;
        };
        /**
         * 移除玩家
         */
        RoomInfo.prototype.removeUser = function (uid) {
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].uid == uid) {
                    this.userList.splice(i, 1);
                    break;
                }
            }
        };
        /**
         *获取转换位置后的座位值0-3
         * @param seatId
         * @return
         *
         */
        RoomInfo.prototype.getSeatNo = function (seatId) {
            var uid = uniLib.UserInfo.uid;
            if (game.RoomInfo.getInstance().video == 1) {
                uid = game.RoomInfo.getInstance().videoUid;
            }
            var mySeat = RoomInfo.getInstance().getUserVoByUid(uid).seatId;
            return (seatId + 4 - mySeat) % 4;
        };
        /**
         *获取转换位置后的座位值0-3
         * @param seatId
         * @return
         *
         */
        RoomInfo.prototype.getSeatNoByUserId = function (userId) {
            var userVo = this.getUserVoByUid(userId);
            if (userVo) {
                var seatId = userVo.seatId;
                return this.getSeatNo(seatId);
            }
            return 0;
        };
        RoomInfo.prototype.getUserIdBySid = function (sid) {
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].sid == sid) {
                    return this.userList[i].uid;
                }
            }
            return 0;
        };
        /**
         * 通过转换后座位ID查找对应USERID
         */
        RoomInfo.prototype.getUserIdBySeatNo = function (seatId) {
            for (var i = 0; i < this.userList.length; i++) {
                if (this.getSeatNo(this.userList[i].seatId) == seatId) {
                    return this.userList[i].uid;
                }
            }
            return 0;
        };
        /**
         * 方向ID根据东家座位 转换为座位号
         * 东南西北=>1234 逆时针旋转、
         */
        RoomInfo.prototype.dirTransToSeat = function (dir) {
            var seat;
            var eastSeat = game.RoomInfo.getInstance().getSeatNoByUserId(game.RoomInfo.getInstance().eastUid);
            seat = (eastSeat + (dir - 1)) % 4;
            return seat;
        };
        /**转换支付中文 */
        RoomInfo.prototype.getPayMode = function () {
            if (uniLib.Global.is_sandbox == 1) {
                return "";
            }
            var txt = "半自摸";
            if (this.payMode == 1) {
                txt = "房主支付";
            }
            else if (this.payMode == 2) {
                txt = "均摊支付";
            }
            return txt;
        };
        /**转换中文玩法 */
        RoomInfo.prototype.getPlayType = function () {
            if (uniLib.Global.is_sandbox == 1) {
                return "";
            }
            if (ArrayUtil.isInArray(129, this.playTypeList)) {
                this._gameName = "半自摸";
                this.playType = 1;
            }
            else if (ArrayUtil.isInArray(128, this.playTypeList)) {
                this._gameName = "全自摸";
                this.playType = 2;
            }
            switch (game.RoomInfo.getInstance().gameID) {
                case 4008:
                    this._gameName = "遵义麻将";
                    break;
                case 4001:
                    this._gameName = "三丁拐";
                    break;
                case 4007:
                    this._gameName = "毕节麻将";
                    break;
                case 196:
                    this._gameName = "贵阳麻将";
                    break;
                case 4063:
                    this._gameName = "二丁拐";
                    break;
                default:
                    break;
            }
            return this._gameName;
        };
        /**
         * 设置房间类型
         */
        RoomInfo.prototype.setPlayType = function (name) {
            this._gameName = name;
        };
        /** 设置鬼牌*/
        RoomInfo.prototype.setGoldenMj = function () {
            if (!this.playTypeList || !this.playTypeList.length || this.playTypeList.length == 0) {
                return;
            }
            if (this.playTypeList.indexOf(PlayStyle.NoGhost) != -1) {
                this.playType = 0;
            }
            else if (this.playTypeList.indexOf(PlayStyle.WhiteGhost) != -1 || this.playTypeList.indexOf(PlayStyle.OneGhost) != -1
                || this.playTypeList.indexOf(PlayStyle.FourGhosts) || this.playTypeList.indexOf(PlayStyle.TwoGhosts)) {
                this.playType = 1;
            }
            if (this.playTypeList.indexOf(PlayStyle.TwoGhost) != -1) {
                this.playType = 2;
            }
            if (this.playTypeList.indexOf(PlayStyle.ZeroFlower) != -1) {
                this._HuiZhouFlowerNum = 0;
            }
            else if (this.playTypeList.indexOf(PlayStyle.TwoFlower) != -1) {
                this._HuiZhouFlowerNum = 2;
            }
            else if (this.playTypeList.indexOf(PlayStyle.FourFlower) != -1) {
                this._HuiZhouFlowerNum = 4;
            }
            else if (this.playTypeList.indexOf(PlayStyle.SixFlower) != -1) {
                this._HuiZhouFlowerNum = 6;
            }
            else if (this.playTypeList.indexOf(PlayStyle.EightFlower) != -1) {
                this._HuiZhouFlowerNum = 8;
            }
        };
        /**
         * 房间内所有玩家UID，不包括自己
         */
        RoomInfo.prototype.getOtherUid = function () {
            var user = [];
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].uid != uniLib.UserInfo.uid) {
                    user.push(this.userList[i].uid);
                }
            }
            return user;
        };
        RoomInfo.prototype.getAllNames = function () {
            var names = "";
            for (var i = 0; i < this.userList.length; i++) {
                if (names != "") {
                    names = names + ",";
                }
                names = names + this.userList[i].nickName;
            }
            if (names != "") {
                names = names + "已入座";
            }
            return names;
        };
        /**
         * 发礼物 不包括fromid
         */
        RoomInfo.prototype.getUidNotSendID = function (formid) {
            var user = [];
            for (var i = 0; i < this.userList.length; i++) {
                if (this.userList[i].uid != formid) {
                    user.push(this.userList[i].uid);
                }
            }
            return user;
        };
        /**所有玩法id 转换desc */
        RoomInfo.prototype.getPlayTypeByList = function () {
            if (!RES.hasRes("TablePlayTypeList_json"))
                return [];
            var str = [];
            var desc = "";
            game.RoomInfo.getInstance().isTip = false;
            //
            if (!this.playTypeList || !this.playTypeList.length || this.playTypeList.length == 0) {
                this.playTypeList = [];
            }
            this.playTypeList.sort(function (a, b) {
                if (a > b)
                    return 1;
                else if (a == b)
                    return 0;
                return -1;
            });
            for (var i = 0; i < this.playTypeList.length; i++) {
                //兼容漳浦抓花 插花特殊玩法 俩如抓花玩法是464 抓花16 那么玩法为464.161 最后的1是方便排除10 20这样服务器小数点后为0识别不出
                if (this.playTypeList[i].toString().indexOf(".") != -1) {
                    var playStr = this.playTypeList[i].toString().split(".");
                    var name_1 = game.TablePlayTypeList.getInstance().getPlayTypeDes(Number(playStr[0])) + playStr[1].substr(0, playStr[1].length - 1);
                    desc = desc + name_1;
                    str.push(name_1);
                }
                var name_2 = game.TablePlayTypeList.getInstance().getPlayTypeDes(this.playTypeList[i]);
                desc = desc + name_2 + "   ";
                str.push(name_2);
            }
            game.RoomInfo.getInstance().roomDesc = desc;
            return str;
        };
        /**判断是否支持托管 */
        RoomInfo.prototype.getHostMode = function () {
            if (ArrayUtil.isInArray(144, this.playTypeList) == true) {
                this.canHostMode = 1;
            }
            else {
                this.canHostMode = 1;
            }
        };
        //WHJ=--------
        /**添加亮牌玩家 */
        RoomInfo.prototype.addLiangUser = function (uid) {
            for (var i = 0; i < this.liangUser.length; i++) {
                if (this.liangUser[i] == uid) {
                    return;
                }
            }
        };
        Object.defineProperty(RoomInfo.prototype, "myNextUser", {
            /**获取离我的下家信息 可能2人3人*/
            get: function () {
                var _this = this;
                var arr = [];
                this.userList.forEach(function (f) {
                    if (f.uid != uniLib.UserInfo.uid)
                        arr.push(_this.getSeatNoByUserId(f.uid));
                    else
                        arr.push(10000); //这里只是为了屏蔽自己 给的一个占位
                });
                var index = arr.indexOf(Math.min.apply(Math, arr));
                if (index != -1)
                    return this.userList[index];
                else
                    return null;
            },
            enumerable: true,
            configurable: true
        });
        /**添加花牌数据 */
        RoomInfo.prototype.addFlowerCard = function (card) {
            if (typeof card === "number") {
                game.RoomInfo.getInstance().flcard = [];
                for (var i = 0; i < 4; i++) {
                    var cardname = Number((card).toString() + (i + 1).toString());
                    game.RoomInfo.getInstance().flcard.push(cardname);
                }
                game.RoomInfo.getInstance().flcard = game.RoomInfo.getInstance().flcard.slice();
            }
        };
        /**
         * 改变玩家gps位置
         */
        RoomInfo.prototype.changeUserGPS = function (data) {
            for (var i = 0; i < this.userList.length; i++) {
                if (data.uid == this.userList[i].uid) {
                    this.userList[i].setGPS(data.lng, data.lat, data.address);
                }
            }
        };
        /**获取版本引擎 2D5需要用到5.0以上引擎龙骨 */
        RoomInfo.prototype.getEnguneVersion = function () {
            return Number(egret.Capabilities.engineVersion.substr(0, 1));
        };
        /**设置捉鸡数据 */
        RoomInfo.prototype.setCashChicken = function (chicken) {
            this.cashChicken = [];
            for (var i = 0, k = chicken.length; i < k; i++) {
                this.cashChicken[i] = new Cmd.ChickenStruct;
                this.cashChicken[i].uid = chicken[i][0];
                this.cashChicken[i].myself_grade = chicken[i][1];
                this.cashChicken[i].others_grade = chicken[i][2];
                this.cashChicken[i].rush_chicken = chicken[i][3];
                this.cashChicken[i].response_chicken = chicken[i][4];
                this.cashChicken[i].up_baseid = chicken[i][5];
                this.cashChicken[i].down_baseid = chicken[i][6];
                this.cashChicken[i].up_chicken = chicken[i][7];
                this.cashChicken[i].down_chicken = chicken[i][8];
                this.cashChicken[i].dark = chicken[i][9];
                this.cashChicken[i].light = chicken[i][10];
                this.cashChicken[i].climb = chicken[i][11];
                this.cashChicken[i].is_listen = Boolean(chicken[i][12]);
                this.cashChicken[i].lack = chicken[i][13];
                this.cashChicken[i].originalLack = chicken[i][14];
                this.cashChicken[i].rush_black_chicken = chicken[i][15];
                this.cashChicken[i].response_black_chicken = chicken[i][16];
                this.cashChicken[i].normal_black_chicken = chicken[i][17];
                this.cashChicken[i].up_chicken_num = chicken[i][18];
                this.cashChicken[i].down_chicken_num = chicken[i][19];
            }
        };
        /**房间第一次开局时保存在座玩家数据 */
        RoomInfo.prototype.initRoundScore = function () {
            if (this.roundScore.length > 0)
                return;
            for (var i = 0; i < this.userList.length; i++) {
                var player = this.userList[i];
                var score = new Cmd.RoundScore;
                score.uid = player.uid;
                score.score = [];
                this.roundScore.push(score);
            }
        };
        /**
         * 检验是否是新版本龙骨系统 true为5.0以上极速模式骨骼
         */
        RoomInfo.prototype.checkFastDragon = function () {
            var version = egret.Capabilities.engineVersion;
            var start = version.substr(0, 1);
            if (start == "5") {
                return true;
            }
            else {
                return false;
            }
        };
        return RoomInfo;
    }());
    game.RoomInfo = RoomInfo;
    var PlayStyle = (function () {
        function PlayStyle() {
        }
        /**无鬼 */
        PlayStyle.NoGhost = 111;
        /**白板做鬼 */
        PlayStyle.WhiteGhost = 112;
        /**翻鬼 */
        PlayStyle.OneGhost = 113;
        /**二鬼 */
        PlayStyle.TwoGhost = 114;
        /**四鬼 */
        PlayStyle.FourGhosts = 231;
        /**2鬼  只有两个鬼牌 不是两种鬼牌*/
        PlayStyle.TwoGhosts = 253;
        /**无花 */
        PlayStyle.ZeroFlower = 132;
        /**二花 */
        PlayStyle.TwoFlower = 133;
        /**四花 */
        PlayStyle.FourFlower = 134;
        /**六花 */
        PlayStyle.SixFlower = 135;
        /**八花 */
        PlayStyle.EightFlower = 136;
        return PlayStyle;
    }());
    game.PlayStyle = PlayStyle;
})(game || (game = {}));

var game;
(function (game) {
    var GameData = (function () {
        function GameData() {
            this._isMyTime = false; //当前是否轮到我操作
            this._isCanOperate = false; //是否可以操作状态
            /**游金需要打出的牌*/
            this.goldOutCardSet = [];
            this._audioPlayMode = false; //是否开启语音打牌模式
            /**
             * 待出牌ID 为0时可以出牌 不为零时不可出牌
             */
            this.waitCard = 0;
            this.lastCard = 0;
            /**
             * 四人中间放置坐标
             */
            this.TempeLocation = [
                [(uniLib.Global.screenWidth - 1136) / 2 + 525, 405],
                [(uniLib.Global.screenWidth - 1136) / 2 + 860, 235],
                [(uniLib.Global.screenWidth - 1136) / 2 + 525, 85],
                [(uniLib.Global.screenWidth - 1136) / 2 + 200, 235]
            ];
            this.ShortTalkArr = [
                "又断线了，网络怎么这么差啊！",
                "各位，真不好意思，我要离开一会",
                "你的牌打得也忒好了！",
                "下次咱们再玩吧！",
                "不要走，决战到天亮！",
                "快点吧，都等得我花都谢了！"
            ];
        }
        GameData.prototype.destory = function () {
            GameData.instance = null;
        };
        GameData.getInstance = function () {
            if (!this.instance) {
                this.instance = new GameData();
            }
            return this.instance;
        };
        Object.defineProperty(GameData.prototype, "isMyTime", {
            get: function () {
                return this._isMyTime;
            },
            set: function (b) {
                this._isMyTime = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameData.prototype, "isCanOperate", {
            get: function () {
                return this._isCanOperate;
            },
            set: function (b) {
                this._isCanOperate = b;
                if (this._audioPlayMode == true) {
                    if (this._isCanOperate == true) {
                        AutoPlayMgr.instance.startAutoRecord();
                    }
                    else {
                        AutoPlayMgr.instance.stopAutoRecord();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameData.prototype, "audioPlayMode", {
            get: function () {
                return this._audioPlayMode;
            },
            set: function (b) {
                this._audioPlayMode = b;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 判断是否为金牌
         */
        GameData.prototype.isGoldenCard = function (cardId) {
            var value = false;
            var goldArr = game.RoomInfo.getInstance().goldenCard;
            if (game.RoomInfo.getInstance().goldenCard.length <= 0)
                return false;
            for (var i = 0; i < goldArr.length; i++) {
                if (table.TableCard.thisIdToCardId(cardId) == table.TableCard.thisIdToCardId(goldArr[i])) {
                    value = true;
                    return value;
                }
            }
            return false;
        };
        /**
         * 判断是否为危牌
         */
        GameData.prototype.isDangerCard = function (cardId) {
            var value = false;
            var dangerArr = game.CardInfo.getInstance().dangerSet;
            if (dangerArr.length <= 0)
                return false;
            for (var i = 0; i < dangerArr.length; i++) {
                if (table.TableCard.thisIdToCardId(cardId) == table.TableCard.thisIdToCardId(dangerArr[i])) {
                    value = true;
                    return value;
                }
            }
        };
        /**
         * 是否是poker
         */
        GameData.iskPoker = false;
        return GameData;
    }());
    game.GameData = GameData;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var ServerMJProxy = (function (_super) {
        __extends(ServerMJProxy, _super);
        function ServerMJProxy() {
            _super.call(this, ServerMJProxy.NAME);
        }
        ServerMJProxy.prototype.onRegister = function () {
        };
        ServerMJProxy.prototype.initServer = function () {
            uniLib.UIMgr.instance.showProcessBar(null, 99, 100, "正在连接游戏服务器...", "", true);
            var gameId = Number(uniLib.BrowersUtils.GetRequest("gameId"));
            var zoneId = Number(uniLib.BrowersUtils.GetRequest("zoneId"));
            if (game.DataCache.gameInfo == null || game.DataCache.gameInfo.zoneInfo == null) {
                this._config = RES.getRes("config_json");
                uniLib.NetMgr.init(this._config.LoginUrl, gameId ? gameId : this._config.GameID, zoneId ? zoneId : this._config.ZoneID, this.onHttpInitSucc, this.onHttpInitFail, this);
                this.gameId = (gameId ? gameId : this._config.GameID);
            }
            else {
                uniLib.NetMgr.init(uniLib.Global.defaultConfig.login_url, game.DataCache.gameInfo.zoneInfo.gameid, game.DataCache.gameInfo.zoneInfo.zoneid, this.onHttpInitSucc, this.onHttpInitFail, this);
                this.gameId = game.DataCache.gameInfo.zoneInfo.gameid;
            }
        };
        /**
         * http平台登录完成
         */
        ServerMJProxy.prototype.onHttpInitSucc = function (obj) {
            //下面可以通过uniLib.NetMgr.httpSend发送http消息了
            if (game.RoomInfo.getInstance().video == 1) {
                this.loopback = true;
                uniLib.NetMgr.initSocket(this.onSockInitSucc, this.onSockInitFail, this, "", "", "", false, true);
            }
            else {
                if (game.DataCache.platParam && game.DataCache.platParam.gameGatewayUrl)
                    uniLib.NetMgr.initSocket(this.onSockInitSucc, this.onSockInitFail, this, "", "", "", false, true, game.DataCache.platParam.gameGatewayUrl); //初始化平台socket
                else
                    uniLib.NetMgr.initSocket(this.onSockInitSucc, this.onSockInitFail, this, "", "", "", false, true); //初始化平台socket
            }
        };
        ServerMJProxy.prototype.onHttpInitFail = function (back) {
            if (back) {
                game.PublicManage.getInstance().showMildWarnShow("游戏登录失败:" + JSON.stringify(back));
            }
            else {
                game.PublicManage.getInstance().showMildWarnShow("游戏登录失败");
            }
            this.facade.sendNotification(game.MahjongFourFacadeConst.EXIT_GAME);
            return true;
        };
        /**
         * socket连接完成
         */
        ServerMJProxy.prototype.onSockInitSucc = function () {
            uniLib.UIMgr.instance.showProcessBar(null, 100, 100, "正在进入房间...", "", true);
            var data;
            if (game.GameData.iskPoker) {
                var cmd = new Cmd.GameTimeSyncCmd_CS();
                uniLib.NetMgr.tcpSend(cmd);
                data = new Cmd.EnterRoomCmd_C();
            }
            else
                data = new Cmd.EnterMahjongCmd_C();
            var roomId = Number(uniLib.BrowersUtils.GetRequest("roomId"));
            var handCardInitId = Number(uniLib.BrowersUtils.GetRequest("handCardInitId"));
            var recordUid = Number(uniLib.BrowersUtils.GetRequest("recordUid"));
            var gameId = Number(uniLib.BrowersUtils.GetRequest("game"));
            var robotId = Number(uniLib.BrowersUtils.GetRequest("robotId"));
            var robotNum = Number(uniLib.BrowersUtils.GetRequest("robotNum"));
            var subGameType = Number(uniLib.BrowersUtils.GetRequest("subGameType"));
            data.roomId = roomId ? roomId : 0;
            data.globalRoomId = roomId ? roomId : 111111;
            if (game.RoomInfo.getInstance().isGPS && game.RoomInfo.getInstance().video == 0) {
                this._location = uniLib.ZQGameSdk.getLocation(this.onGetLocation, this);
            }
            else {
                game.RoomInfo.getInstance().isGPS = false;
            }
            if (robotId > 0) {
                data.robotId = robotId;
            }
            if (handCardInitId > 0) {
                data.handCardInitId = handCardInitId;
            }
            if (robotNum > 0) {
                data.robotNum = robotNum;
            }
            if (gameId > 0) {
                data.gameId = gameId;
            }
            if (subGameType > 0) {
                data.subGameType = subGameType;
            }
            if (recordUid > 0) {
                data.recordUid = recordUid;
            }
            if (game.DataCache.platParam) {
                data.globalRoomId = game.DataCache.platParam.globalRoomId;
                data.roomId = game.DataCache.platParam.roomId;
            }
            this.sendData(data);
            uniLib.Global.lastPingUpTimestamp = Date.now();
            if (!uniLib.Global.jsonCompressDefault) {
                uniLib.Global.jsonCompressDefault = new Cmd.JsonCompressNullUserPmd_CS();
                uniLib.Global.jsonCompressDefault.msglist = [
                    "Cmd.OutCardMahjongCmd_Brd",
                    "Cmd.OutCardMahjongCmd_S",
                    "Cmd.SelfCardMahjongCmd_S",
                    "Cmd.ReadyStartMahjongCmd_Brd",
                    "Cmd.ReadyStartMahjongCmd_S",
                    "Cmd.BarOutCardMahjongCmd_Brd",
                    "Cmd.BarCardMahjongCmd_Brd",
                    "Cmd.SendCardMahjongCmd_Brd",
                    "Cmd.SendCardMahjongCmd_S",
                    "Cmd.SetBankerMahjongCmd_Brd",
                    "Cmd.EnterMahjongCmd_Brd",
                    "Cmd.EnterMahjongCmd_S",
                    "Cmd.FinalScoreMahjongCmd_Brd",
                    "Cmd.GetPersonalPanel_S",
                    "Cmd.HostMahjongCmd_Brd",
                    "Cmd.SysMessageMahjongCmd_S",
                    "Cmd.TouchCardMahjongCmd_Brd",
                    "Cmd.OnlineStateMahjongCmd_Brd",
                    "Cmd.BarCardMahjongCmd_S",
                    "Cmd.BarDealCardMahjongCmd_Brd",
                    "Cmd.ReConnectMahjongCmd_S",
                    "Cmd.BarDealCardMahjongCmd_S",
                    "Cmd.BarDiceMahjongCmd_Brd",
                    "Cmd.ReplyDissolveRoom_Brd",
                    "Cmd.RequestChangeUserNbrRoom_Brd",
                    "Cmd.RequestChangeUserNbrRoom_C",
                    "Cmd.RequestDissolveRoom_Brd",
                    "Cmd.RequestDissolveRoom_S",
                    "Cmd.ReturnChangeUserNbrRoom_C",
                    "Cmd.SeaFloorCardMahjongCmd_Brd",
                    "Cmd.SeaRoamTurnMahjongCmd_Brd",
                    "Cmd.BirdMahjongCmd_Brd",
                    "Cmd.CancelOpMahjongCmd_S",
                    "Cmd.CommonChat_Brd",
                    "Cmd.SendGiftMahjongCmd_Brd",
                    "Cmd.EatCardMahjongCmd_Brd",
                    "Cmd.EatCardMahjongCmd_S",
                    "Cmd.ShowChangeUserNbrRoom_S",
                    "Cmd.StartMahjongCmd_Brd",
                    "Cmd.StartNewRoundOpCmd_Brd",
                    "Cmd.StartNewRoundOpCmd_S",
                    "Cmd.StartNewRoundOpTimeCmd_Brd",
                    "Cmd.SuccessDissolveRoom_Brd",
                    "Cmd.SupplyCardMahjongCmd_Brd",
                    "Cmd.SupplyCardMahjongCmd_S",
                    "Cmd.LeaveMahjongCmd_Brd",
                    "Cmd.LeaveMahjongCmd_S",
                    "Cmd.TouchCardMahjongCmd_S",
                    "Cmd.VoiceChat_Brd",
                    "Cmd.WinCardMahjongCmd_Brd",
                    "Cmd.WinMahjongCmd_S",
                    "Cmd.BarCardMahjongCmd_C",
                    "Cmd.BarOpMahjongCmd_C",
                    "Cmd.CancelOpMahjongCmd_C",
                    "Cmd.CommonChat_C",
                    "Cmd.EatCardMahjongCmd_C",
                    "Cmd.EnterMahjongCmd_C",
                    "Cmd.GetPersonalPanel_C",
                    "Cmd.HostMahjongCmd_C",
                    "Cmd.LeaveMahjongCmd_C",
                    "Cmd.OutCardMahjongCmd_C",
                    "Cmd.ReadyStartMahjongCmd_C",
                    "Cmd.ReplyDissolveRoom_C",
                    "Cmd.RequestDissolveRoom_C",
                    "Cmd.SeaRoamMahjongCmd_C",
                    "Cmd.SendGiftMahjongCmd_C",
                    "Cmd.ServerEchoMahjongCmd_SC",
                    "Cmd.SoundSet_C",
                    "Cmd.StartNewRoundOpCmd_C",
                    "Cmd.SupplyCardMahjongCmd_C",
                    "Cmd.TouchCardMahjongCmd_C",
                    "Cmd.VoiceChat_C",
                    "Cmd.CashChickenCmd_Brd",
                    "Cmd.WinMahjongCmd_C",
                    "Cmd.ClientEchoMahjongCmd_SC",
                ];
                uniLib.Global.jsonCompressDefault.key = "" + uniLib.StringUtils.MD5(JSON.stringify(uniLib.Global.jsonCompressDefault.msglist));
            }
            var send = new Cmd.JsonCompressNullUserPmd_CS();
            if (uniLib.Global.jsonCompress) {
                send.key = uniLib.Global.jsonCompress.key;
            }
            else {
                send.key = uniLib.Global.jsonCompressDefault.key;
            }
            uniLib.NetMgr.tcpSend(send);
            //socket切换完成,下面可以通过uniLib.NetMgr.tcpSend发送socket消息了
            // uniLib.Global.addEventListener(uniLib.ZqEvent.CHAT_PRIVATE,this.onPrivateChat,this);
            // uniLib.Global.addEventListener(uniLib.ZqEvent.CHAT_ROOM,this.onRoomChat,this);
            // uniLib.Global.addEventListener(uniLib.ZqEvent.CHAT_SYSTEM,this.onSystemMsg,this);
        };
        // private reconnct(e:uniLib.ZqEvent){
        //     if(e.param && e.param ==  this._config.GameID){
        //        this.onSockInitSucc();
        //     }
        // }
        ServerMJProxy.prototype.onGetLocation = function (msg) {
            //msg.longitude经度
            //msg.latitude纬度
            uniLib.ZQGameSdk.getLocation(function (msg) {
                var data = new Cmd.GetGPSLocationCmd_C();
                if (msg.code == 0) {
                    console.info(JSON.stringify(msg));
                    this._location.lng = msg.data.longitude;
                    this._location.lat = msg.data.latitude;
                    data.lat = this._location.lat;
                    data.lng = this._location.lng;
                    var address = "";
                    if (msg.data.address) {
                        // if (uniLib.Utils.isIOS()) {
                        // 	address = msg.data.city + msg.data.address
                        // }
                        // else {
                        // 	var addressArr = msg.data.address.trim().split("|"); //安卓端先trim去掉空格 440305 | 0 | 中国 | 深圳市 | 340 | 高新南环路 | (null) | 南山区 | 广东省 | 在深圳湾科技生态园-三四区附近 |
                        // 	address = (addressArr.length > 8 ? addressArr[8] : "")
                        // 		+ (addressArr.length > 3 ? addressArr[3] : ""); //进行判断 取广东省深圳市南山区深圳湾科技生态园
                        // }
                        data.address = msg.data.address;
                    }
                }
                else {
                    data.lat = 0;
                    data.lng = 0;
                    // if (uniLib.Global.isH5 == false)
                    game.PublicManage.getInstance().showMildWarnShow("未获取到位置信息！");
                }
                this.sendData(data);
            }, this);
        };
        ServerMJProxy.prototype.onSockInitFail = function (back) {
            if (back) {
                game.PublicManage.getInstance().showMildWarnShow("游戏服务器连接失败:" + JSON.stringify(back));
            }
            else {
                game.PublicManage.getInstance().showMildWarnShow("游戏服务器连接失败");
            }
            this.facade.sendNotification(game.MahjongFourFacadeConst.EXIT_GAME);
            return true;
        };
        ServerMJProxy.prototype.sendData = function (obj) {
            if (game.RoomInfo.getInstance().video == 1) {
                uniLib.Global.dispatchEvent(uniLib.ZqEvent.EVENT_G2L, "game_load_start");
            }
            game.ResUtil.trace("sendData:" + JSON.stringify(obj));
            uniLib.NetMgr.tcpSend(obj);
            uniLib.NetMgr.setMsgTimeout(8, "ServerMJProxy.sendData");
            if (obj.GetType() == "Cmd.OutCardMahjongCmd_C") {
                var userVo = game.RoomInfo.getInstance().getUserVoByUid(uniLib.UserInfo.uid);
                var sound = table.TableCard.resSound(obj.thisId, userVo.getGender());
                if (game.RoomInfo.getInstance().gameId == 4077) {
                    sound = "";
                }
                if (sound != "") {
                    uniLib.SoundMgr.instance.playSound(sound);
                }
                uniLib.SoundMgr.instance.playSound(game.SoundConsts.DISCARD);
                uniLib.Global.lastPingUpTimestamp = Date.now();
            }
            else if (obj.GetType() == "Cmd.ClientEchoMahjongCmd_SC") {
                uniLib.Global.lastPingUpTimestamp = Date.now();
            }
        };
        /**
         * 私聊
         * @param e
         */
        ServerMJProxy.prototype.onPrivateChat = function (e) {
            // var msg: Pmd.CommonChatUserPmd_CS = e.param;
            // var info: ChatMsgVo = JSON.parse(msg.info);
            // if(info.uid==MyUserInfo.getInstance().userId){
            //     this.sendNotification(FacadeConsts.RECEIVE_PRIVATE_CHAT,info);
            // }
        };
        /**
         * 公聊
         * @param e
         */
        ServerMJProxy.prototype.onRoomChat = function (e) {
            // var msg: Pmd.CommonChatUserPmd_CS = e.param;
            // var info: ChatMsgVo = JSON.parse(msg.info);
            // if(info.type==1){
            //     var vo: UserInfo = RoomData.getInstance().getPlayerById(info.uid);
            //     info.name = vo.userName;
            //     this.sendNotification(FacadeConsts.SHOW_WORLD_CHAT,info);
            // }else{
            //     this.sendNotification(FacadeConsts.RECEIVE_FACE,info);
            // }
        };
        ServerMJProxy.prototype.onSystemMsg = function (e) {
            // var msg: Pmd.CommonChatUserPmd_CS = e.param;
            // ResUtil.trace(msg.info);
            // var info: any = JSON.parse(msg.info);
        };
        ServerMJProxy.prototype.onRemove = function () {
            _super.prototype.onRemove.call(this);
            uniLib.NetMgr.closeSocket();
            game.GameData.getInstance().destory();
            uniLib.Global.removeEventListener(uniLib.ZqEvent.ON_RECONNEC, this.onSockInitSucc, this);
        };
        ServerMJProxy.prototype.closeSocket = function () {
            game.ResUtil.trace("closeSocket");
            uniLib.NetMgr.closeSocket();
        };
        ServerMJProxy.NAME = "ServerMJProxy";
        return ServerMJProxy;
    }(puremvc.Proxy));
    game.ServerMJProxy = ServerMJProxy;
})(game || (game = {}));

var game;
(function (game) {
    var CardVo = (function () {
        function CardVo(cardId, isGoldPai) {
            if (cardId === void 0) { cardId = 0; }
            if (isGoldPai === void 0) { isGoldPai = false; }
            this.cardId = cardId;
            this.isGoldPai = isGoldPai;
        }
        Object.defineProperty(CardVo.prototype, "TableInfo", {
            get: function () {
                if (this.tableInfo == null || this.cardId != this.tableInfo.cardId) {
                    this.tableInfo = table.TableCard.selectByCardId(this.cardId);
                }
                return this.tableInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardVo.prototype, "type", {
            get: function () { return this.TableInfo.type; },
            enumerable: true,
            configurable: true
        });
        return CardVo;
    }());
    game.CardVo = CardVo;
})(game || (game = {}));

var game;
(function (game) {
    var KongVo = (function () {
        function KongVo() {
        }
        return KongVo;
    }());
    game.KongVo = KongVo;
})(game || (game = {}));

var game;
(function (game) {
    var OperatVo = (function () {
        function OperatVo() {
            this.fake = 0; //模拟操作
        }
        /**碰牌数据 */
        OperatVo.prototype.setPongData = function (data) {
            this.uid = data.uid;
            this.thisId = data.thisId;
            this.fromId = data.fromUid;
            this.cardSet = data.cardSet;
            var index = this.cardSet.indexOf(this.thisId);
            if (index != -1)
                this.cardSet.splice(index, 1);
            this.type = Cmd.MahjongOpCardType.MahjongOpCardType_Touch;
            this.seatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.uid);
            this.fromSeatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.fromUid);
            if (data.fake) {
                this.fake = data.fake;
            }
            else {
                this.fake = 0;
            }
        };
        /**杠牌数据 */
        OperatVo.prototype.setKongData = function (data) {
            this.uid = data.uid;
            this.thisId = data.thisId;
            this.fromId = data.fromUid;
            this.cardSet = data.cardSet;
            this.type = data.barType;
            this.seatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.uid);
            this.fromSeatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.fromUid);
            if (data.fake) {
                this.fake = data.fake;
            }
            else {
                this.fake = 0;
            }
        };
        /**吃牌数据 */
        OperatVo.prototype.setEatData = function (data) {
            this.uid = data.uid;
            this.uid = data.uid;
            this.thisId = data.thisId;
            this.cardSet = [];
            // this.cardSet.push(data.thisId);
            this.cardSet.push(data.one);
            this.cardSet.push(data.two);
            this.cardSet.sort(function (a, b) {
                return a - b;
            });
            this.type = Cmd.MahjongOpCardType.MahjongOpCardType_Eat;
            this.seatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.uid);
            this.fromSeatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.fromUid);
            if (data.fake) {
                this.fake = data.fake;
            }
            else {
                this.fake = 0;
            }
        };
        /**风牌数据 */
        OperatVo.prototype.setWindData = function (uid, index) {
            this.uid = uid;
            this.seatId = game.RoomInfo.getInstance().getSeatNoByUserId(uid);
            this.type = Cmd.MahjongOpCardType.MahjongOpCardType_windCard;
            this.index = index;
        };
        OperatVo.prototype.setMyOperate = function (data) {
            this.seatId = 0;
            this.type = data.type;
            this.uid = uniLib.UserInfo.uid;
            this.thisId = data.thisId;
            this.fromId = data.fromUid;
            this.fromSeatId = game.RoomInfo.getInstance().getSeatNoByUserId(data.fromUid);
        };
        return OperatVo;
    }());
    game.OperatVo = OperatVo;
})(game || (game = {}));

var game;
(function (game) {
    var UserVo = (function () {
        function UserVo(info) {
            this.sid = 0;
            /**是否准备 */
            this.bReady = 0;
            /**当前手牌(便于控制手牌数量) */
            this.handCardNum = 0;
            /**飘风倍率 */
            this.multiPiao = 0;
            /**(旌德中心五)角分 */
            this.jiaofen = 0;
            this.setdata(info);
        }
        UserVo.prototype.setdata = function (info) {
            this.uid = info.uid;
            if (info.sid) {
                this.sid = info.sid;
            }
            this.seatId = info.seatId;
            if (info.points)
                this.points = info.points;
            else
                this.points = 0;
            this.gender = info.gender;
            this.bReady = info.bReady;
            this.diamond = info.diamond;
            this.headUrl = info.headurl;
            this.chips = info.chips;
            this.nickName = info.nickname;
            this.remainder = info.points;
            this.onlineState = info.onlineState;
            if (info.handCardNum) {
                this.handCardNum = info.handCardNum;
            }
            else {
                this.handCardNum = 0;
            }
            if (info.lat) {
                this.lat = info.lat;
            }
            if (info.lng) {
                this.lng = info.lng;
            }
            if (info.address) {
                this.address = info.address;
            }
            if (info.nju) {
                this.nju = info.nju;
            }
            if (info.multiPiao)
                this.multiPiao = info.multiPiao;
            else
                this.multiPiao = 0;
            if (info.specialpoints != null) {
                if (info.points != null) {
                    this.remainder = info.specialpoints;
                    this.jiaofen = info.points;
                }
            }
            if (info.vip) {
                this.vip = info.vip;
            }
            else {
                this.vip = 0;
            }
            if (info.ip) {
                this.ip = info.ip;
            }
            if (info.personalImage) {
                this.personalImage = info.personalImage;
            }
        };
        UserVo.prototype.setdiamond = function (diamond) {
            this.diamond = diamond;
        };
        UserVo.prototype.setchips = function (chips) {
            this.chips = chips;
        };
        UserVo.prototype.getGender = function () {
            var sex;
            if (this.gender == "男") {
                sex = 0;
            }
            else {
                sex = 1;
            }
            return sex;
        };
        UserVo.prototype.setGPS = function (lnt, lat, address) {
            if (address === void 0) { address = null; }
            this.lng = lnt;
            this.lat = lat;
            this.address = address;
        };
        return UserVo;
    }());
    game.UserVo = UserVo;
})(game || (game = {}));

var game;
(function (game) {
    var VoiceDataVo = (function () {
        function VoiceDataVo() {
        }
        return VoiceDataVo;
    }());
    game.VoiceDataVo = VoiceDataVo;
})(game || (game = {}));

var game;
(function (game) {
    var GameViewConfig = (function () {
        function GameViewConfig() {
        }
        return GameViewConfig;
    }());
    game.GameViewConfig = GameViewConfig;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var CheckMc = (function (_super) {
        __extends(CheckMc, _super);
        function CheckMc() {
            _super.call(this);
        }
        CheckMc.prototype.initUI = function () {
            this.bg = game.ResUtil.createBitmapByName("setting_checkbg");
            this.addChild(this.bg);
            this._checkIcon = game.ResUtil.createBitmapByName("setting_check", 16, 16);
            this.addChild(this._checkIcon);
            this.check = false;
        };
        Object.defineProperty(CheckMc.prototype, "check", {
            set: function (boo) {
                this._check = boo;
                this._checkIcon.visible = boo;
            },
            enumerable: true,
            configurable: true
        });
        CheckMc.prototype.seTTexture = function (bgSource, iconSource) {
            if (bgSource === void 0) { bgSource = null; }
            if (iconSource === void 0) { iconSource = null; }
            if (bgSource)
                this.bg.texture = game.ResUtil.createTexture(bgSource);
            if (iconSource)
                this._checkIcon.texture = game.ResUtil.createTexture(iconSource);
        };
        CheckMc.prototype.destory = function () {
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._checkIcon = null;
        };
        CheckMc.prototype.updateIconPos = function (x, y) {
            if (this._checkIcon) {
                this._checkIcon.x = x;
                this._checkIcon.y = y;
            }
        };
        return CheckMc;
    }(game.BaseVc));
    game.CheckMc = CheckMc;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var DiceMc = (function (_super) {
        __extends(DiceMc, _super);
        function DiceMc() {
            _super.call(this);
        }
        DiceMc.prototype.destory = function () {
            if (this._dice) {
                this._dice.animation.stop();
                if (this._dice.hasEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT)) {
                    this._dice.removeEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, this.frame_event, this);
                }
                if (this._dice.hasEventListener(dragonBones.AnimationEvent.COMPLETE)) {
                    this._dice.removeEventListener(dragonBones.AnimationEvent.COMPLETE, this.animation_event, this);
                }
                dragonBones.WorldClock.clock.remove(this._dice);
                uniLib.DisplayUtils.destoryDragonBonesArmature(this._dice, "shaizi");
                if (this._dice.display) {
                    game.ResUtil.removeFromParent(this._dice.display);
                }
                this._dice = null;
            }
            if (this._timerOutId) {
                egret.clearTimeout(this._timerOutId);
                this._timerOutId = 0;
            }
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._diceArr = null;
            this._index = null;
        };
        DiceMc.prototype.showDice = function (data) {
            this._diceArr = data;
            this._index = 0;
            this.onStartThrow();
        };
        DiceMc.prototype.onStartThrow = function () {
            if (!this._dice) {
                this._dice = uniLib.DragonUtils.createDragonBonesDisplay("dice_drag_json", "dice_json", "dice_png", "MovieClip");
                this._dice.addEventListener(dragonBones.FrameEvent.ANIMATION_FRAME_EVENT, this.frame_event, this);
                this._dice.addEventListener(dragonBones.AnimationEvent.COMPLETE, this.animation_event, this);
                dragonBones.WorldClock.clock.add(this._dice);
            }
            this._dice.display.y = game.DataCache.defaultHeight / 2 - 120;
            this._dice.display.x = game.DataCache.defaultWidth / 2 + 22;
            this.addChild(this._dice.display);
            this.play();
        };
        DiceMc.prototype.play = function () {
            if (!dragonBones.WorldClock.clock.contains(this._dice)) {
                dragonBones.WorldClock.clock.add(this._dice);
            }
            this._dice.animation.gotoAndPlay("shaizi", 0, -1, 1);
            uniLib.SoundMgr.instance.playSound(game.SoundConsts.DICE);
        };
        DiceMc.prototype.frame_event = function (evt) {
            if (evt.frameLabel == "DiceChange") {
                var slot1 = this._dice.getSlot("mohu_04");
                var slot2 = this._dice.getSlot("mohu_02");
                // slot1.display.texture = RES.getRes("dice_" + this._diceArr.one);
                // slot2.display.texture = RES.getRes("dice_" +this._diceArr.two);
                var tex1 = uniLib.DisplayUtils.createBitmapByName("dice_" + this._diceArr.one);
                var tex2 = uniLib.DisplayUtils.createBitmapByName("dice_" + this._diceArr.two);
                tex1.anchorOffsetX = tex2.anchorOffsetX = tex1.width / 2;
                tex1.anchorOffsetY = tex2.anchorOffsetY = tex1.height / 2;
                slot1.setDisplay(tex1);
                slot2.setDisplay(tex2);
            }
        };
        DiceMc.prototype.animation_event = function (evt) {
            var _this = this;
            this._index++;
            if (this._index >= 1) {
                this._timerOutId = egret.setTimeout(function () { game.ResUtil.removeFromParent(_this._dice.display); }, this, 1000);
            }
            else {
                uniLib.SoundMgr.instance.playSound(game.SoundConsts.DICE);
                this._timerOutId = egret.setTimeout(function () { _this.play(); }, this, 1000);
            }
        };
        return DiceMc;
    }(egret.DisplayObjectContainer));
    game.DiceMc = DiceMc;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var GiftAnItem = (function (_super) {
        __extends(GiftAnItem, _super);
        function GiftAnItem() {
            _super.call(this);
            this.index = 0;
        }
        GiftAnItem.prototype.initUI = function () {
        };
        Object.defineProperty(GiftAnItem.prototype, "giftId", {
            set: function (id) {
                this._giftId = id;
                if (!this._effectMc) {
                    this._effectMc = uniLib.DragonUtils.createDragonBonesDisplay("gift_effect_drag_json", "gift_effect_json", "gift_effect_png", "MovieClip");
                    dragonBones.WorldClock.clock.add(this._effectMc);
                    this._effectMc.addEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onAnimationEvent, this);
                }
                this._effectMc.animation.gotoAndStopByFrame("gift" + this._giftId, 0);
                this.addChild(this._effectMc.display);
            },
            enumerable: true,
            configurable: true
        });
        GiftAnItem.prototype.onAnimationEvent = function () {
            this.index++;
            if (this._giftId != 4 && this._giftId != 3) {
                if (this.index == 2) {
                    if (!this._effectMc)
                        return;
                    this._effectMc.animation.stop("gift" + this._giftId);
                    this.destory();
                    this.index = 0;
                }
            }
            else {
                if (this.index == 1) {
                    if (!this._effectMc)
                        return;
                    this._effectMc.animation.stop("gift" + this._giftId);
                    this.destory();
                    this.index = 0;
                }
            }
        };
        GiftAnItem.prototype.play = function () {
            if (this._effectMc == null)
                return;
            if (!dragonBones.WorldClock.clock.contains(this._effectMc)) {
                dragonBones.WorldClock.clock.add(this._effectMc);
            }
            if (this._giftId != 4 && this._giftId != 3) {
                this._effectMc.animation.play("gift" + this._giftId);
            }
            else {
                this._effectMc.animation.play("gift" + this._giftId);
            }
            var sound = table.TableCard.resSoundGift(this._giftId);
            if (sound != "") {
                uniLib.SoundMgr.instance.playSound(sound);
            }
        };
        GiftAnItem.prototype.destory = function () {
            if (this._effectMc) {
                this._effectMc.animation.stop();
                this._effectMc.removeEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onAnimationEvent, this);
                uniLib.DisplayUtils.destoryDragonBonesArmature(this._effectMc, "gift" + this._giftId);
                if (this._effectMc.display) {
                    this.removeChild(this._effectMc.display);
                }
            }
            this._effectMc = null;
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
        };
        return GiftAnItem;
    }(game.BaseVc));
    game.GiftAnItem = GiftAnItem;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     * 2.5D麻将使用 因为版本不同 不能支持低版本龙骨
     */
    var GiftAnItem_2d5 = (function (_super) {
        __extends(GiftAnItem_2d5, _super);
        function GiftAnItem_2d5() {
            _super.call(this);
            this.index = 0;
        }
        GiftAnItem_2d5.prototype.initUI = function () {
        };
        Object.defineProperty(GiftAnItem_2d5.prototype, "giftId", {
            set: function (id) {
                this._giftId = id;
                if (!this._effectMc) {
                    this._effectMc = uniLib.DragonUtils.createFastDragonBones("gift_effect_drag_ske_dbmv", "gift_effect_drag_tex_png", "MovieClip", "gift_drag");
                    this._effectMc.addEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onAnimationEvent, this);
                }
                this._effectMc.play("gift" + this._giftId, 0);
                this.addChild(this._effectMc);
            },
            enumerable: true,
            configurable: true
        });
        GiftAnItem_2d5.prototype.onAnimationEvent = function () {
            this.index++;
            if (this._giftId != 4 && this._giftId != 3) {
                if (this.index == 2) {
                    if (!this._effectMc)
                        return;
                    this._effectMc.stop();
                    this.destory();
                    this.index = 0;
                }
            }
            else {
                if (this.index == 1) {
                    if (!this._effectMc)
                        return;
                    this._effectMc.stop();
                    this.destory();
                    this.index = 0;
                }
            }
        };
        GiftAnItem_2d5.prototype.play = function () {
            if (this._effectMc == null)
                return;
            if (!dragonBones.WorldClock.clock.contains(this._effectMc)) {
                dragonBones.WorldClock.clock.add(this._effectMc);
            }
            if (this._giftId != 4 && this._giftId != 3) {
                this._effectMc.play("gift" + this._giftId);
            }
            else {
                this._effectMc.play("gift" + this._giftId);
            }
            var sound = table.TableCard.resSoundGift(this._giftId);
            if (sound != "") {
                uniLib.SoundMgr.instance.playSound(sound);
            }
        };
        GiftAnItem_2d5.prototype.destory = function () {
            if (this._effectMc) {
                this._effectMc.stop();
                this._effectMc.removeEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onAnimationEvent, this);
                if (this._effectMc) {
                    this.removeChild(this._effectMc);
                }
            }
            this._effectMc = null;
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
        };
        return GiftAnItem_2d5;
    }(game.BaseVc));
    game.GiftAnItem_2d5 = GiftAnItem_2d5;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var HeadMc = (function (_super) {
        __extends(HeadMc, _super);
        /**
        * 是否采用圆形遮罩头像 如果采用 设置半径
        */
        function HeadMc(width, height, isCircle) {
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            if (isCircle === void 0) { isCircle = false; }
            _super.call(this);
            this._width = width;
            this._height = height;
            if (isCircle) {
                var circle = new egret.Shape();
                circle.graphics.beginFill(0x0000ff);
                circle.graphics.drawCircle(40, 40, 40);
                circle.graphics.endFill();
                this.addChild(circle);
            }
            this._headMc = game.ResUtil.createBitmapByName("defaultHead");
            this._headMc.width = this._width;
            this._headMc.height = this._height;
            this._headMc.mask = circle;
            this.addChild(this._headMc);
        }
        HeadMc.prototype.destory = function () {
            game.ResUtil.removeAllChildren(this);
            game.ResUtil.removeFromParent(this);
            if (this._headLoad) {
                this._headLoad.destroy();
                this._headLoad = null;
            }
            this._headMc = null;
        };
        Object.defineProperty(HeadMc.prototype, "headUrl", {
            set: function (url) {
                if (url && url.indexOf("http") == -1) {
                    if (this._headUrl) {
                        url = this._headUrl;
                    }
                    else {
                        return;
                    }
                }
                if (this._headUrl && this._headUrl == url) {
                    return;
                }
                this._headUrl = url;
                this._headMc.texture = game.ResUtil.createTexture("defaultHead");
                if (!this._headLoad) {
                    this._headLoad = new game.HeadLoader();
                }
                this._headLoad.load(this._headUrl, this.loaded, null, this);
            },
            enumerable: true,
            configurable: true
        });
        HeadMc.prototype.loaded = function (data) {
            if (!this._headMc) {
                this._headMc = new egret.Bitmap(data);
                this.addChild(this._headMc);
            }
            else {
                this._headMc.bitmapData = data;
            }
        };
        return HeadMc;
    }(egret.Sprite));
    game.HeadMc = HeadMc;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var NumBitmapFormat = (function (_super) {
        __extends(NumBitmapFormat, _super);
        function NumBitmapFormat(w, h, align, asstes, hideZero) {
            if (align === void 0) { align = NumBitmapFormat.LEFT; }
            if (asstes === void 0) { asstes = null; }
            if (hideZero === void 0) { hideZero = true; }
            _super.call(this);
            this._defaultAsstes = "num";
            this._spacing = -1;
            this._width = w;
            this._height = h;
            this._align = align;
            this._hideZero = hideZero;
            if (asstes) {
                this._defaultAsstes = asstes;
            }
            this.init();
        }
        NumBitmapFormat.prototype.init = function () {
            this._numMc = new egret.Sprite();
            this.addChild(this._numMc);
        };
        Object.defineProperty(NumBitmapFormat.prototype, "spacing", {
            set: function (space) {
                this._spacing = space;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumBitmapFormat.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (num) {
                this._value = num;
                this.clear();
                if (num == 0 && this._hideZero) {
                    return;
                }
                var str = game.ResUtil.currencyFormat(num);
                var numberMc;
                var char;
                for (var i = 0; i < str.length; i++) {
                    char = str.charAt(i);
                    if (char == ",") {
                        char = "10";
                    }
                    numberMc = game.ResUtil.createBitmapByName(this._defaultAsstes + char);
                    if (this._numMc.width + numberMc.width > this._width) {
                        break;
                    }
                    if (char == "10" && this._defaultAsstes == "num") {
                        numberMc.y = 12;
                    }
                    numberMc.x = this._numMc.width > 0 ? this._numMc.width + this._spacing : this._numMc.width;
                    this._numMc.addChild(numberMc);
                }
                switch (this._align) {
                    case NumBitmapFormat.LEFT:
                        this._numMc.x = 0;
                        break;
                    case NumBitmapFormat.MIDDLE:
                        this._numMc.x = Math.round((this._width - this._numMc.width) / 2);
                        break;
                    case NumBitmapFormat.RIGHT:
                        this._numMc.x = this._width - this._numMc.width;
                        break;
                    default:
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        NumBitmapFormat.prototype.clear = function () {
            var len = this._numMc.numChildren;
            for (var i = 0; i < len; i++) {
                this._numMc.removeChildAt(0);
            }
        };
        NumBitmapFormat.prototype.getNumblerF = function (char) {
            var frame = 1;
            if (char == ",") {
                frame = 12;
            }
            else {
                frame = Number(char) + 1;
            }
            return frame;
        };
        NumBitmapFormat.prototype.destory = function () {
            this._numMc.parent.removeChild(this._numMc);
            this._numMc = null;
            this.clear();
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
        };
        NumBitmapFormat.LEFT = 1;
        NumBitmapFormat.MIDDLE = 2;
        NumBitmapFormat.RIGHT = 3;
        return NumBitmapFormat;
    }(egret.Sprite));
    game.NumBitmapFormat = NumBitmapFormat;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var StartEffectMc = (function (_super) {
        __extends(StartEffectMc, _super);
        function StartEffectMc() {
            _super.call(this);
        }
        StartEffectMc.prototype.destory = function () {
            _super.prototype.destory.call(this);
            if (this._armature) {
                dragonBones.WorldClock.clock.remove(this._armature);
                this._armature.removeEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onEffectOver, this);
                if (this._armature.display) {
                    game.ResUtil.removeFromParent(this._armature.display);
                }
            }
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._armature = null;
            this._bg = null;
        };
        StartEffectMc.prototype.initUI = function () {
            this._bg = game.ResUtil.createBitmapByName("startEffect_bg_png");
            this._bg.width = 1136;
            this.addChild(this._bg);
        };
        StartEffectMc.prototype.play = function () {
            this.visible = true;
            if (!this._armature) {
                this._armature = uniLib.DragonUtils.createDragonBonesDisplay("star_effect_drag_json", "star_effect");
                this._armature.display.x = (game.DataCache.defaultWidth - this._armature.display.width) / 2;
                this._armature.display.y = (game.DataCache.defaultHeight - this._armature.display.height) / 2 - 15;
                this.addChild(this._armature.display);
            }
            if (!dragonBones.WorldClock.clock.contains(this._armature)) {
                dragonBones.WorldClock.clock.add(this._armature);
            }
            this._armature.addEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onEffectOver, this);
            this._armature.animation.play();
            this._bg.height = 0;
            this._bg.y = game.DataCache.defaultHeight / 2;
            this._bg.alpha = 1;
            egret.Tween.get(this._bg).to({ height: 178, y: (game.DataCache.defaultHeight - 178) / 2 }, 250).wait(710).to({ alpha: 0 }, 250);
        };
        StartEffectMc.prototype.onEffectOver = function () {
            if (this._armature) {
                this._armature.animation.stop();
                this._armature.removeEventListener(dragonBones.AnimationEvent.LOOP_COMPLETE, this.onEffectOver, this);
                dragonBones.WorldClock.clock.remove(this._armature);
                if (this._armature.display) {
                    game.ResUtil.removeFromParent(this._armature.display);
                }
            }
            this.dispatchEventWith(game.UIEventConsts.START_EFFECT_OVER);
            this._armature = null;
            this.hide();
        };
        StartEffectMc.prototype.hide = function () {
            this.visible = false;
        };
        return StartEffectMc;
    }(game.BaseVc));
    game.StartEffectMc = StartEffectMc;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// gm改牌
var game;
(function (game) {
    var StopServicePanel = (function (_super) {
        __extends(StopServicePanel, _super);
        function StopServicePanel() {
            _super.call(this, 2);
        }
        StopServicePanel.prototype.initPanel = function () {
            this.setSize(575, 360);
            this.content = new egret.Sprite();
            this.content.x = 60;
            this.content.y = 60;
            this.addChild(this.content);
            this.noticeTxt = new egret.TextField();
            this.noticeTxt.size = 28;
            this.noticeTxt.text = "      " + game.RoomInfo.getInstance().notice;
            this.noticeTxt.width = 475;
            this.noticeTxt.height = 350;
            this.noticeTxt.textColor = 0x000000;
            this.content.addChild(this.noticeTxt);
        };
        return StopServicePanel;
    }(game.BasePanel));
    game.StopServicePanel = StopServicePanel;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var BlurBackCard = (function (_super) {
        __extends(BlurBackCard, _super);
        function BlurBackCard(color) {
            if (color === void 0) { color = "yellow"; }
            _super.call(this);
            this._color = "";
            this._color = color;
        }
        BlurBackCard.prototype.setType = function (type) {
            if (!this._card) {
                this._card = game.ResUtil.createBitmapByName("lymj_blur");
                this.addChild(this._card);
            }
            if (this._color == "green") {
                this._card.texture = RES.getRes("green_blur");
            }
            if (type == 1) {
                this._card.x = -2;
                this._card.y = -26;
                this._card.rotation = 0;
            }
            else {
                this._card.x = -24;
                this._card.y = -1;
                this._card.rotation = 90;
            }
        };
        BlurBackCard.prototype.destory = function () {
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._card = null;
        };
        return BlurBackCard;
    }(game.BaseVc));
    game.BlurBackCard = BlurBackCard;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var CardStack = (function (_super) {
        __extends(CardStack, _super);
        function CardStack(color) {
            if (color === void 0) { color = "yellow"; }
            _super.call(this);
            this._color = "";
            this._color = color;
        }
        CardStack.prototype.setType = function (type) {
            if (!this._card) {
                this._card = game.ResUtil.createBitmapByName("lymj_stack");
                this.addChild(this._card);
            }
            if (this._color == "green") {
                this._card.texture = RES.getRes("green_stack");
            }
            if (type == 1) {
                this._card.x = -5;
                this._card.y = -20;
                this._card.rotation = 0;
            }
            else {
                this._card.x = -29;
                this._card.y = -1;
                this._card.rotation = 90;
            }
        };
        CardStack.prototype.destory = function () {
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._card = null;
        };
        return CardStack;
    }(game.BaseVc));
    game.CardStack = CardStack;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var RecordItem = (function (_super) {
        __extends(RecordItem, _super);
        function RecordItem() {
            _super.call(this);
        }
        RecordItem.prototype.initUI = function () {
            this._itemGroup = [];
            this._voiceBtn = new game.GameButton(["yaya_record", "yaya_record"]);
            this._voiceBtn.x = 14;
            this._voiceBtn.y = 146;
            this.addChild(this._voiceBtn);
            this._inputBg = game.ResUtil.createBitmapByName("yaya_chat_bg", 58, 147);
            this.addChild(this._inputBg);
            this._curIndex = 0;
            this.resetBtn();
            this._voiceBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this);
            this._voiceMc = new egret.Sprite();
            this._voiceMc.name = "short_mc";
            this.addChild(this._voiceMc);
            this._scrollView = game.ResUtil.createScroll(this._voiceMc, 350, 250, 20, 5);
            this._scrollView.horizontalScrollPolicy = "off";
            this._scrollView.verticalScrollPolicy = "on";
            this.addChild(this._scrollView);
            this._tempTip = game.ResUtil.createTextFeild(0x333333, egret.HorizontalAlign.CENTER, "暂无数据", 20, 0, 110, 335);
            this.addChild(this._tempTip);
            /***********************************test***********************************/
            // var item:Cmd.VoiceObj=new Cmd.VoiceObj();
            // item.time="3";
            // item.url="http://store.aiwaya.cn/amr5826c8e234eaf20c10714847.amr";
            // item.timestamp = "2016-11-12 15:46:43";
            // var item1:Cmd.VoiceObj=new Cmd.VoiceObj();
            // item1.time="5";
            // item1.url="http://store.aiwaya.cn/amr5826c8fb34eaf20cab724847.amr";
            // item1.timestamp = "2016-10-10 16:33:33";
            // var item3:Cmd.VoiceObj=new Cmd.VoiceObj();
            // item3.time="15";
            // item3.url="http://store.aiwaya.cn/amr5826c9f846d7f20c1acb40f9.amr";
            // item3.timestamp = "2016-10-10 16:33:33";
            // this.initData([item,item1]);
            /***********************************test***********************************/
        };
        RecordItem.prototype.initData = function (arr) {
            if (arr[0] == null) {
                return;
            }
            this._itemGroup = [];
            uniLib.DisplayUtils.removeAllChildren(this._voiceMc);
            this._tempTip.visible = false;
            for (var i = 0; i < arr.length; i++) {
                this.showOneVoice(arr[i]);
            }
            if (arr.length > 3) {
                this._scrollView.setScrollPosition((arr.length - 3) * 80, 0);
            }
        };
        RecordItem.prototype.showOneVoice = function (data) {
            var item = new RecordVoiceItem();
            item.name = "short_" + data.uid;
            item.setData(data);
            if (this._voiceMc.height != 0) {
                item.y = this._voiceMc.height;
            }
            item.touchChildren = true;
            item.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onPlayVoice, this);
            this._voiceMc.addChild(item);
            this._itemGroup.push(item);
        };
        RecordItem.prototype.onPlayEnd = function (evt) {
            var item = evt.currentTarget;
            item.removeEventListener(RecordVoiceItem.PLAY_END, this.onPlayEnd, this);
            this._curVoice = null;
        };
        RecordItem.prototype.onPlayVoice = function (evt) {
            var item = evt.currentTarget;
            if (this._curVoice == evt.currentTarget) {
                item.stopPlay();
                item.removeEventListener(RecordVoiceItem.PLAY_END, this.onPlayEnd, this);
            }
            else {
                if (this._curVoice) {
                    this._curVoice.stopPlay();
                    this._curVoice.removeEventListener(RecordVoiceItem.PLAY_END, this.onPlayEnd, this);
                }
                item.startPlay();
                item.addEventListener(RecordVoiceItem.PLAY_END, this.onPlayEnd, this);
                this._curVoice = item;
            }
        };
        RecordItem.prototype.onClick = function (evt) {
            if (evt.currentTarget == this._voiceBtn) {
                this._curIndex = 0;
            }
            else {
                this._curIndex = 1;
            }
            this.resetBtn();
        };
        RecordItem.prototype.resetBtn = function () {
            if (this._curIndex == 0) {
                this._inputBg.visible = false;
                this._voiceBtn.visible = false;
            }
            else {
                this._inputBg.visible = true;
                this._voiceBtn.visible = true;
            }
        };
        RecordItem.prototype.destory = function () {
            if (this._voiceBtn) {
                this._voiceBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this);
                this._voiceBtn.destory();
            }
            this._voiceBtn = null;
            for (var i = 0; i < this._itemGroup.length; i++) {
                var item = this._itemGroup[i];
                item.removeEventListener(RecordVoiceItem.PLAY_END, this.onPlayEnd, this);
                item.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onPlayVoice, this);
                item.destory();
            }
            if (this._voiceMc) {
                uniLib.DisplayUtils.removeAllChildren(this._voiceMc);
            }
            this._voiceMc = null;
            this._scrollView = null;
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._inputBg = null;
            this._curVoice = null;
        };
        return RecordItem;
    }(game.BaseVc));
    game.RecordItem = RecordItem;
    var RecordVoiceItem = (function (_super) {
        __extends(RecordVoiceItem, _super);
        function RecordVoiceItem() {
            _super.call(this);
            this._second = 0;
            this._totalWidth = 300;
        }
        RecordVoiceItem.prototype.initUI = function () {
            this._content = uniLib.DisplayUtils.createMask(0, 300, 80, 0x0);
            this._content.touchEnabled = true;
            this._content.name = "short_record_content";
            this.addChild(this._content);
            this._nameTxt = game.ResUtil.createTextFeild(0xa04c28, egret.HorizontalAlign.LEFT, "me", 18, 0, 5, 150);
            this._content.addChild(this._nameTxt);
            this._timeTxt = game.ResUtil.createTextFeild(0xa04c28, egret.HorizontalAlign.LEFT, "me", 13, 10 + this._nameTxt.width, 10, 150);
            this._content.addChild(this._timeTxt);
            this._voiceIcon = game.ResUtil.createBitmapByName("chat_pop", 0, 30);
            this._voiceIcon.name = "short_sound_pop";
            this._voiceIcon.scale9Grid = new egret.Rectangle(31, 9, 10, 21);
            this._voiceIcon.width = 300;
            this._content.addChild(this._voiceIcon);
            this._soundIcon = game.ResUtil.createBitmapByName("yaya_voice_icon", 20, 40);
            this._soundIcon.name = "short_sound_icon";
            this._content.addChild(this._soundIcon);
            this._voiceLenTxt = game.ResUtil.createTextFeild(0x333333, egret.HorizontalAlign.LEFT, "3''", 22, 142, 45, 50);
            this._voiceLenTxt.x = this._voiceIcon.width - this._voiceLenTxt.width;
            this._voiceLenTxt.name = "short_voice_len";
            this._content.addChild(this._voiceLenTxt);
            this._voiceIcon.touchEnabled = true;
        };
        RecordVoiceItem.prototype.stopTimer = function () {
            this._soundIcon.visible = true;
            if (this._timer_200) {
                this._timer_200.stop();
            }
            this._timer_200 = null;
            this._second = 0;
        };
        RecordVoiceItem.prototype.onTimer = function (evt) {
            this._second++;
            var time = Number(this.data.time) * 1000; //转化为毫秒
            if (this._second >= time / 200) {
                this.stopPlay();
            }
            else {
                this._soundIcon.visible = !this._soundIcon.visible;
            }
        };
        RecordVoiceItem.prototype.startPlay = function () {
            if (this._data.uid != uniLib.UserInfo.uid) {
                uniLib.ZQGameSdk.playRecord(this._data.url, this.playEndBack, this);
            }
            this._voiceIcon.texture = game.ResUtil.createTexture("yaya_voice2");
            this.stopTimer();
            this._timer_200 = new uniLib.TimerBase(200, this.onTimer, this);
            this._timer_200.start();
        };
        RecordVoiceItem.prototype.stopPlay = function () {
            uniLib.ZQGameSdk.stopPlayRecord(this._data.url);
            this.stopTimer();
            this._voiceIcon.texture = game.ResUtil.createTexture("chat_pop");
        };
        RecordVoiceItem.prototype.playEndBack = function (obj) {
            this.stopTimer();
        };
        Object.defineProperty(RecordVoiceItem.prototype, "data", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        RecordVoiceItem.prototype.setData = function (data) {
            this._data = data;
            this._nameTxt.text = game.RoomInfo.getInstance().getUserVoByUid(data.uid).nickName;
            this._voiceLenTxt.text = data.time + "''";
            this._timeTxt.text = data.timestamp;
            var voiceLen = Number(data.time);
            if (voiceLen < 5) {
                this._voiceIcon.width = (5 / 15) * this._totalWidth;
            }
            else {
                this._voiceIcon.width = (voiceLen / 15) * this._totalWidth;
            }
            this._voiceLenTxt.x = this._voiceIcon.width - this._voiceLenTxt.width;
        };
        RecordVoiceItem.prototype.destory = function () {
            _super.prototype.destory.call(this);
            this.stopTimer();
            if (this._content) {
                uniLib.DisplayUtils.removeAllChildren(this._content);
                uniLib.DisplayUtils.removeFromParent(this._content);
            }
            this._data = null;
            this._content = null;
            this._nameTxt = null;
            this._soundIcon = null;
            this._voiceIcon = null;
            this._timeTxt = null;
            this._voiceLenTxt = null;
        };
        RecordVoiceItem.PLAY_END = "playEnd";
        return RecordVoiceItem;
    }(game.BaseVc));
    game.RecordVoiceItem = RecordVoiceItem;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var VoiceChatMediator = (function (_super) {
        __extends(VoiceChatMediator, _super);
        function VoiceChatMediator(viewComponent) {
            _super.call(this, VoiceChatMediator.NAME, viewComponent);
            this._voiceVc = viewComponent;
            this._voiceVc.addEventListener(game.UIEventConsts.SEND_RECORD, this.uiEventHandle, this);
        }
        VoiceChatMediator.prototype.uiEventHandle = function (evt) {
            var type = evt.type;
            switch (type) {
                case game.UIEventConsts.SEND_RECORD:
                    var vo = evt.data;
                    var req = new Cmd.VoiceChat_C();
                    req.url = vo.url;
                    req.time = vo.time.toString();
                    req.words = vo.text;
                    this.sendNotification(game.MahjongFourFacadeConst.SEND_DATA, req, game.DataRequestCommand.GAME_DATA);
                    break;
                default:
                    break;
            }
        };
        VoiceChatMediator.prototype.listNotificationInterests = function () {
            return [
                game.MahjongFourFacadeConst.USER_ENTER_ROOM,
                game.MahjongFourFacadeConst.VOICE_NOTICE
            ];
        };
        VoiceChatMediator.prototype.handleNotification = function (notification) {
            switch (notification.getName()) {
                case game.MahjongFourFacadeConst.VOICE_NOTICE:
                    this._voiceVc.showVoice(notification.getBody());
                    break;
                case game.MahjongFourFacadeConst.USER_ENTER_ROOM:
                    // this._voiceVc.test();
                    break;
            }
        };
        VoiceChatMediator.prototype.onRemove = function () {
            game.VoiceChat.VoicePlaying = {};
            if (this._voiceVc) {
                this._voiceVc.removeEventListener(game.UIEventConsts.SEND_RECORD, this.uiEventHandle, this);
                this._voiceVc.destory();
                this._voiceVc = null;
            }
            _super.prototype.onRemove.call(this);
        };
        VoiceChatMediator.NAME = "VoiceChatMediator";
        return VoiceChatMediator;
    }(puremvc.Mediator));
    game.VoiceChatMediator = VoiceChatMediator;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    var VoiceChat = (function (_super) {
        __extends(VoiceChat, _super);
        function VoiceChat(lobbyFrom) {
            if (lobbyFrom === void 0) { lobbyFrom = ""; }
            _super.call(this);
            this.lobbyFrom = "";
            this._isCancel = false;
            this.lobbyFrom = lobbyFrom;
            this.updateUI();
        }
        VoiceChat.StartVoicePlaying = function (uid) {
            var playing = false;
            for (var k in VoiceChat.VoicePlaying) {
                var v = VoiceChat.VoicePlaying[k];
                if (v == true)
                    playing = true;
            }
            if (!playing) {
                VoiceChat.soundOpen = uniLib.SoundMgr.instance.soundOpen;
                uniLib.SoundMgr.instance.soundOpen = false;
                uniLib.SoundMgr.instance.pauseBgMusic();
            }
            VoiceChat.VoicePlaying[uid] = true;
        };
        VoiceChat.StopVoicePlaying = function (uid) {
            VoiceChat.VoicePlaying[uid] = false;
            var playing = false;
            for (var k in VoiceChat.VoicePlaying) {
                var v = VoiceChat.VoicePlaying[k];
                if (v == true)
                    playing = true;
            }
            if (!playing) {
                uniLib.SoundMgr.instance.soundOpen = VoiceChat.soundOpen;
                uniLib.SoundMgr.instance.resumeBgMusic();
            }
        };
        VoiceChat.prototype.initUI = function () {
        };
        VoiceChat.prototype.updateUI = function () {
            this._startBtn = new game.GameButton([this.lobbyFrom + "voice_btn2", this.lobbyFrom + "voice_btn1"]);
            this._startBtn.y = uniLib.Global.screenHeight - 320;
            this._startBtn.x = uniLib.Global.screenWidth - this._startBtn.width - 5;
            this.addChild(this._startBtn);
            this._startBtn.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.startRecord, this);
            this._recording = new RecordingMc();
            this.addChild(this._recording);
            this._recording.x = (game.DataCache.defaultWidth - this._recording.width) / 2;
            this._recording.y = (game.DataCache.defaultHeight - this._recording.height) / 2;
            this._recording.addEventListener(game.UIEventConsts.RECORD_TIME_OUT, this.recordEvent, this);
            this._voiceArr = [];
            game.GameInfo.topLayer.addChild(this._recording);
        };
        Object.defineProperty(VoiceChat.prototype, "voiceButtonX", {
            set: function (x) {
                this._startBtn.x = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoiceChat.prototype, "voiceButtonY", {
            set: function (y) {
                this._startBtn.y = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoiceChat.prototype, "voiceButtonWidth", {
            set: function (width) {
                this._startBtn.iconWdith = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VoiceChat.prototype, "voiceButtonHeight", {
            set: function (height) {
                this._startBtn.iconHeight = height;
            },
            enumerable: true,
            configurable: true
        });
        VoiceChat.prototype.updateBtnRes = function (btnRes) {
            this._startBtn.iconTexture(btnRes);
            this._startBtn.y = uniLib.Global.screenHeight - 240;
            this._startBtn.x = uniLib.Global.screenWidth - this._startBtn.width - 10;
        };
        VoiceChat.prototype.setVoiceVisible = function (isShow) {
            this._startBtn.visible = isShow;
        };
        VoiceChat.prototype.showVoice = function (vo) {
            var seatId = game.RoomInfo.getInstance().getSeatNoByUserId(vo.uid);
            var voiceItem = this.getVoiceItem(seatId);
            game.GameInfo.topLayer.addChildAt(voiceItem, 0);
            var data = new game.VoiceDataVo();
            data.time = Number(vo.time);
            data.url = vo.url;
            data.uid = vo.uid;
            voiceItem.setData(data);
        };
        /**
         * 获取座位对应的语音表现
         */
        VoiceChat.prototype.getVoiceItem = function (seatId) {
            if (this._voiceArr[seatId])
                return this._voiceArr[seatId];
            var point = game.PositionData.seatPosArr[seatId];
            if (!this._voiceArr[seatId]) {
                var item = new VoiceMc();
                if (seatId == 0 || seatId == 3) {
                    item.x = point.x + 100;
                }
                else {
                    item.scaleX = -1;
                    item.x = point.x - 76;
                    item.flip();
                }
                item.y = point.y + 25;
                if (seatId == 1 || seatId == 2) {
                    item.x = point.x - 11;
                }
                this._voiceArr[seatId] = item;
            }
            return this._voiceArr[seatId];
        };
        VoiceChat.prototype.recordEvent = function (evt) {
            this.stopRecord();
        };
        VoiceChat.prototype.startRecord = function (evt) {
            this._isCancel = false;
            this._curPosY = evt.localY;
            egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stopRecord, this);
            egret.MainContext.instance.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.checkCancel, this);
            // this.stopSound()
            uniLib.ZQGameSdk.startRecord();
            this._recording.startTimer();
        };
        VoiceChat.prototype.checkCancel = function (evt) {
            if (evt.localY > this._curPosY + 20) {
                this._isCancel = true;
                egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stopRecord, this);
                egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.checkCancel, this);
                uniLib.ZQGameSdk.stopRecord();
                this._recording.stopTimer();
            }
        };
        VoiceChat.prototype.stopRecord = function (evt) {
            if (evt === void 0) { evt = null; }
            egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stopRecord, this);
            egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.checkCancel, this);
            var text = this._recording.stopTimer();
            if (text < 1000) {
                var self = this;
                setTimeout(function () {
                    uniLib.ZQGameSdk.stopRecord();
                }, 1000);
            }
            else {
                uniLib.ZQGameSdk.stopRecord(this.onRecordBack, this);
            }
        };
        VoiceChat.prototype.onRecordBack = function (obj) {
            var self = this;
            var data = obj.data;
            if (obj.code == 0) {
                var voiceVo = new game.VoiceDataVo();
                voiceVo.url = data.voiceUrl;
                voiceVo.time = Math.round(data.voiceDuration / 1000);
                voiceVo.nickName = uniLib.UserInfo.uid.toString();
                voiceVo.text = data.text;
                voiceVo.status = 0;
                if (isNaN(voiceVo.time)) {
                    game.GameInfo.manage.showMildWarnShow("语音发送失败");
                }
                else {
                    if (this._isCancel == false) {
                        this.dispatchEventWith(game.UIEventConsts.SEND_RECORD, false, voiceVo);
                    }
                }
            }
            else {
                game.GameInfo.manage.showMildWarnShow(obj.errMsg);
            }
        };
        VoiceChat.prototype.destory = function () {
            if (this._startBtn) {
                this._startBtn.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.startRecord, this);
                egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stopRecord, this);
                egret.MainContext.instance.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.checkCancel, this);
                this._startBtn.destory();
            }
            this._startBtn = null;
            if (this._recording) {
                game.ResUtil.removeFromParent(this._recording);
                this._recording.removeEventListener(game.UIEventConsts.RECORD_TIME_OUT, this.recordEvent, this);
                this._recording.destory();
            }
            this._recording = null;
            var voice;
            for (var i = 0; i < this._voiceArr.length; i++) {
                voice = this._voiceArr[i];
                if (voice) {
                    game.ResUtil.removeFromParent(voice);
                    voice.destory();
                    voice = null;
                }
            }
            this._voiceArr = null;
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
        };
        /**
         记录玩家是否正在播放语音
         */
        VoiceChat.VoicePlaying = {};
        return VoiceChat;
    }(game.BaseVc));
    game.VoiceChat = VoiceChat;
    var VoiceMc = (function (_super) {
        __extends(VoiceMc, _super);
        function VoiceMc() {
            _super.call(this);
            this._ifFlip = false;
        }
        VoiceMc.prototype.initUI = function () {
            this._bg = game.ResUtil.createBitmapByName("voice_paopao");
            this._bg.scale9Grid = new egret.Rectangle(50, 10, 30, 20);
            this.addChild(this._bg);
            this._soundIcon = game.ResUtil.createBitmapByName("voice_icon", 24, 11);
            this.addChild(this._soundIcon);
            this._timeTxt = game.ResUtil.createTextFeild(0xffffff, egret.HorizontalAlign.RIGHT, "", 18, 48, 13, 50);
            this.addChild(this._timeTxt);
        };
        VoiceMc.prototype.onTimer = function (evt) {
            this._soundIcon.visible = !this._soundIcon.visible;
            var date = new Date();
            var nowTime = date.getTime();
            var time = Math.floor((nowTime - this._startTime) / 1000);
            if (time >= this._soundTime) {
                VoiceChat.StopVoicePlaying(this.uid);
                this.stopTimer();
            }
        };
        VoiceMc.prototype.stopTimer = function () {
            this._soundIcon.visible = true;
            this.visible = false;
            if (this._timer) {
                this._timer.removeEventListener(egret.TimerEvent.TIMER, this.onTimer, this);
                this._timer.stop();
                this._timer = null;
            }
        };
        VoiceMc.prototype.flip = function () {
            this._ifFlip = true;
            this._timeTxt.skewY = 180;
            this._timeTxt.textAlign = egret.HorizontalAlign.LEFT;
        };
        VoiceMc.prototype.setData = function (vo) {
            this.uid = vo.uid;
            VoiceChat.StartVoicePlaying(this.uid);
            if (vo.uid != uniLib.UserInfo.uid) {
                uniLib.ZQGameSdk.playRecord(vo.url, this.playEndBack, this);
            }
            if (vo.time) {
                this._timeTxt.text = vo.time + "''";
            }
            else {
                this._timeTxt.text = "";
            }
            this._soundTime = vo.time ? vo.time : 10;
            if (vo.time <= 3) {
                this._bg.width = 100;
            }
            else {
                this._bg.width = 100 + (vo.time - 3) * 5;
            }
            if (this._ifFlip) {
                this._timeTxt.x = this._bg.width - 12;
            }
            else {
                this._timeTxt.x = this._bg.width - 60;
            }
            this.stopTimer();
            this.visible = true;
            this._timer = new egret.Timer(200);
            this._timer.addEventListener(egret.TimerEvent.TIMER, this.onTimer, this);
            this._timer.start();
            var date = new Date();
            this._startTime = date.getTime();
        };
        VoiceMc.prototype.playEndBack = function (obj) {
            this.stopTimer();
        };
        VoiceMc.prototype.destory = function () {
            this.stopTimer();
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._bg = null;
            this._soundIcon = null;
        };
        return VoiceMc;
    }(game.BaseVc));
    game.VoiceMc = VoiceMc;
    var RecordingMc = (function (_super) {
        __extends(RecordingMc, _super);
        function RecordingMc() {
            _super.call(this);
            this._maxTime = 15;
            this._msTime = 0;
        }
        RecordingMc.prototype.initUI = function () {
            var recordbg = game.ResUtil.createBitmapByName("voice_recording");
            this.addChild(recordbg);
            this._moving = new egret.DisplayObjectContainer();
            this._moving.x = 104;
            this._moving.y = 102;
            var icon = game.ResUtil.createBitmapByName("voiceloading");
            icon.x = -icon.width / 2;
            icon.y = -icon.height / 2;
            this._moving.addChild(icon);
            this.addChild(this._moving);
            this._time = game.ResUtil.createTextFeild(0xC6D7DE, egret.HorizontalAlign.CENTER, "8''", 22, 74, 136, 75);
            this.addChild(this._time);
            this.visible = false;
        };
        RecordingMc.prototype.startTimer = function () {
            this.stopTimer();
            this.visible = true;
            this._startTimer = new egret.Timer(50, 0);
            var date = new Date();
            this._startTime = date.getTime();
            this._startTimer.addEventListener(egret.TimerEvent.TIMER, this.onTimer, this);
            this._startTimer.start();
        };
        RecordingMc.prototype.stopTimer = function () {
            this.visible = false;
            if (this._startTimer) {
                this._startTimer.removeEventListener(egret.TimerEvent.TIMER, this.onTimer, this);
                this._startTimer.stop();
                this._startTimer = null;
            }
            return this._msTime;
        };
        RecordingMc.prototype.onTimer = function (evt) {
            var date = new Date();
            var num = date.getTime();
            var nowT = Math.floor((num - this._startTime) / 1000);
            this._time.text = (nowT + 1) + "''";
            this._moving.rotation += 15;
            if (nowT >= this._maxTime) {
                this.dispatchEventWith(game.UIEventConsts.RECORD_TIME_OUT);
            }
            this._msTime = num - this._startTime;
        };
        RecordingMc.prototype.dispose = function () {
            this.stopTimer();
            if (this._moving) {
                uniLib.DisplayUtils.removeAllChildren(this._moving);
                uniLib.DisplayUtils.removeFromParent(this._moving);
            }
            uniLib.DisplayUtils.removeAllChildren(this);
            uniLib.DisplayUtils.removeFromParent(this);
            this._moving = null;
            this._time = null;
        };
        return RecordingMc;
    }(game.BaseVc));
    game.RecordingMc = RecordingMc;
})(game || (game = {}));

var game;
(function (game) {
    var HeadLoader = (function () {
        function HeadLoader() {
        }
        HeadLoader.prototype.load = function (url, completeFun, ioErrFun, obj) {
            this.destroy();
            this._completeFun = completeFun;
            this._errorFun = ioErrFun;
            this._callObj = obj;
            this._headUrl = url;
            var data = this.getHeadCache(url);
            if (data) {
                if (this._completeFun) {
                    this._completeFun.call(this._callObj, data);
                }
            }
            else {
                this._imageLoader = new egret.ImageLoader();
                this._imageLoader.addEventListener(egret.Event.COMPLETE, this.loadCompleteHandler, this);
                this._imageLoader.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
                // this._imageLoader.crossOrigin = "anonymous";
                this._imageLoader.load(this._headUrl);
            }
        };
        HeadLoader.prototype.loadCompleteHandler = function (event) {
            this._imageLoader.removeEventListener(egret.Event.COMPLETE, this.loadCompleteHandler, this);
            this._imageLoader.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
            this.saveHeadCache(this._headUrl, this._imageLoader.data);
            if (this._completeFun) {
                this._completeFun.call(this._callObj, this._imageLoader.data);
            }
        };
        HeadLoader.prototype.onIOError = function (event) {
            this._imageLoader.removeEventListener(egret.Event.COMPLETE, this.loadCompleteHandler, this);
            this._imageLoader.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
            if (this._errorFun) {
                this._errorFun.call(this._callObj, []);
            }
        };
        HeadLoader.prototype.destroy = function () {
            if (this._imageLoader) {
                this._imageLoader.removeEventListener(egret.Event.COMPLETE, this.loadCompleteHandler, this);
                this._imageLoader.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onIOError, this);
                this._imageLoader = null;
            }
            this._completeFun = null;
            this._errorFun = null;
            this._callObj = null;
            this._headUrl = null;
        };
        HeadLoader.prototype.getHeadCache = function (headUrl) {
            if (!uniLib.Global.localCache) {
                uniLib.Global.localCache = {};
            }
            else {
                if (uniLib.Global.localCache[headUrl]) {
                    return uniLib.Global.localCache[headUrl];
                }
            }
            return null;
        };
        HeadLoader.prototype.saveHeadCache = function (url, data) {
            if (!uniLib.Global.localCache) {
                uniLib.Global.localCache = {};
            }
            uniLib.Global.localCache[url] = data;
        };
        return HeadLoader;
    }());
    game.HeadLoader = HeadLoader;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var SoundLoader = (function (_super) {
        __extends(SoundLoader, _super);
        function SoundLoader(url) {
            _super.call(this);
            this._soundType = url;
            this.load();
        }
        SoundLoader.prototype.load = function () {
            var loader = new egret.URLLoader();
            //设置加载方式为声音
            loader.dataFormat = egret.URLLoaderDataFormat.SOUND;
            //添加加载完成侦听
            loader.addEventListener(egret.Event.COMPLETE, this.onLoadComplete, this);
            var url = "resource/assets/sound/" + this._soundType;
            var request = new egret.URLRequest(url);
            //开始加载
            loader.load(request);
        };
        SoundLoader.prototype.onLoadComplete = function (event) {
            var loader = event.target;
            //获取加载到的 Sound 对象
            var sound = loader.data;
            this.dispatchEventWith(SoundLoader.LOADED, false, { type: this._soundType, data: sound });
            //            var channel: egret.SoundChannel = sound.play(0,1);
            //            channel.addEventListener(egret.Event.SOUND_COMPLETE,this.onSoundComplete,this);
        };
        SoundLoader.LOADED = "loaded";
        return SoundLoader;
    }(egret.EventDispatcher));
    game.SoundLoader = SoundLoader;
})(game || (game = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ui;
(function (ui) {
    /**
     *
     * @author
     *
     */
    var AlignBitmapText = (function (_super) {
        __extends(AlignBitmapText, _super);
        function AlignBitmapText() {
            _super.call(this);
            this._hAlign = "left";
            this.tf = new egret.BitmapText();
            this.addChild(this.tf);
        }
        Object.defineProperty(AlignBitmapText.prototype, "hAlign", {
            set: function (value) {
                if (this._hAlign != value) {
                    this._hAlign = value;
                    this.updatePos();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlignBitmapText.prototype, "font", {
            get: function () {
                return this.tf.font;
            },
            set: function (value) {
                this.tf.font = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlignBitmapText.prototype, "letterSpacing", {
            set: function (value) {
                this.tf.letterSpacing = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlignBitmapText.prototype, "lineSpacing", {
            set: function (value) {
                this.tf.lineSpacing = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlignBitmapText.prototype, "text", {
            get: function () {
                return this.tf.text;
            },
            set: function (value) {
                this.tf.text = value;
                this.updatePos();
            },
            enumerable: true,
            configurable: true
        });
        //        font: Object
        //        要使用的字体的名称或用逗号分隔的字体名称列表，类型必须是 BitmapFont
        //        letterSpacing: number
        //        一个整数，表示字符之间的距量
        //        lineSpacing: number
        //        一个整数，表示行与行之间的垂直间距量
        //        text: string
        //        要显示的文本内容
        AlignBitmapText.prototype.updatePos = function () {
            var _x = 0;
            switch (this._hAlign) {
                case egret.HorizontalAlign.LEFT:
                    _x = 0;
                    break;
                case egret.HorizontalAlign.RIGHT:
                    _x = this.width - this.tf.width;
                    break;
                case egret.HorizontalAlign.CENTER:
                    _x = this.width / 2 - this.tf.width / 2;
                    break;
                default:
                    _x = 0;
                    break;
            }
            this.tf.x = _x;
        };
        return AlignBitmapText;
    }(egret.Sprite));
    ui.AlignBitmapText = AlignBitmapText;
})(ui || (ui = {}));

var ArrayUtil = (function () {
    function ArrayUtil() {
    }
    /**
     *  合并数组 并返回新数组 [ arrA[0], arrB[0] ];
     * @param arrA
     * @param arrB
     * @return
     *
     */
    ArrayUtil.mergeArray = function (arrA, arrB) {
        var arrC = new Array();
        var len;
        if (arrA.length >= arrB.length) {
            len = arrA.length;
        }
        else {
            len = arrB.length;
        }
        for (var i = 0; i < len; i++) {
            if (arrA[i])
                arrC.push(arrA[i]);
            if (arrB[i])
                arrC.push(arrB[i]);
        }
        return arrC;
    };
    /**
     删除某数据
     arr 指定数组（可以是Array,也可以是Vector）
     value
    */
    ArrayUtil.removeByValue = function (arr, value) {
        if (!arr || !(arr instanceof Array)) {
            return [];
        }
        var len = arr.length;
        for (var i = 0; i < len; i++) {
            if (arr[i] == value) {
                arr.splice(i, 1);
                return arr;
            }
        }
        if (arr) {
            return arr;
        }
        else {
            return [];
        }
    };
    /**
     * 倒序删除
     */
    ArrayUtil.removeValue = function (arr, value) {
        if (!arr || !(arr instanceof Array)) {
            return [];
        }
        var len = arr.length;
        for (var i = len - 1; i >= 0; i--) {
            if (arr[i] == value || (arr[i].cardId && arr[i].cardId == value)) {
                arr.splice(i, 1);
                return arr;
            }
        }
        if (arr) {
            return arr;
        }
        else {
            return [];
        }
    };
    /**
     元素是否在数组中
    */
    ArrayUtil.isInArray = function (element, arr) {
        var bool = false;
        if (!arr || !(arr instanceof Array)) {
            return bool;
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == element) {
                return true;
            }
        }
        return bool;
    };
    /***
     * 根据数据中的其中一个属性 删除该数据
     */
    ArrayUtil.deleteValue = function (element, arr) {
        if (!arr || !(arr instanceof Array)) {
            return [];
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].thisId == element) {
                return arr.splice(i, 1);
            }
        }
        return arr;
    };
    ArrayUtil.numberResolveToArray = function (value, arr) {
        var result = [];
        var index = 0;
        for (var i = 0; i < arr.length; i++) {
            while (value >= arr[i]) {
                result.push(arr[i]);
                value = value - arr[i];
            }
            if (value == 0) {
                break;
            }
        }
        return result;
    };
    /**深度复制数组*/
    ArrayUtil.deepcopy = function (obj) {
        var out = [], i = 0, len = obj.length;
        for (; i < len; i++) {
            if (obj[i] instanceof Array) {
                out[i] = this.deepcopy(obj[i]);
            }
            else
                out[i] = obj[i];
        }
        return out;
    };
    /**翻转一个数组，但不影响原数组*/
    ArrayUtil.reverse = function (source) {
        var arr = [];
        var len = source.length;
        for (var i = 0; i < len; i++) {
            arr.unshift(source[i]);
        }
        return arr;
    };
    return ArrayUtil;
}());

var AutoPlayMgr = (function () {
    function AutoPlayMgr() {
        this._soundRes = {};
        this.voiceStrArr = ["一万", "二万", "三万", "四万", "五万", "六万", "七万", "八万", "九万", "一条", "二条", "三条", "四条", "五条", "六条", "七条", "八条", "九条", "一饼", "二饼", "三饼", "四饼", "五饼", "六饼", "七饼", "八饼", "九饼", "东风", "南风", "西风", "北风", "红中", "发财", "白板", "胡", "过", "碰", "杠", "吃"];
        this.voiceCard = [11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 46, 47, 1, 2, 3, 4, 5];
        // uniLib.ZQGameSdk.init();
    }
    AutoPlayMgr.prototype.init = function (appId) {
        var grammar = "";
        for (var i = 0; i < this.voiceStrArr.length; i++) {
            grammar += this.voiceStrArr[i] + "\n";
        }
        var data = new uniLib.XFSetParam();
        // 		data.grammar=`#ABNF 1.0 UTF-8;
        // language zh-CN; 
        // mode voice;
        // root $main;
        // $main = majiang|麻将|麻酱|麻江|马江|马缰`;
        // data.vadBos = "10000";
        // data.vadEos = "5000";
        data.grammar = grammar;
        data.grammarType = uniLib.GRAMMARTYPE.OFFLINE;
        data.speechType = uniLib.SPEECHTYPE.GRAMMAR;
        // data.dot=false;
        // data.
        console.error("xfinit:" + JSON.stringify(data, null, 2));
        uniLib.ZQGameSdk.xfSpeechInit(appId, this.onXFinited, this, data);
    };
    AutoPlayMgr.prototype.onXFinited = function (obj) {
        console.error("#####xfinited#####");
        // if(obj.)
    };
    Object.defineProperty(AutoPlayMgr, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new AutoPlayMgr();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 自动打牌
     */
    AutoPlayMgr.prototype.onGetResult = function (obj) {
        console.error("######card#####" + JSON.stringify(obj, null, 2));
        // var data: any = obj.data;
        var cardId = 0;
        // if (obj.code == 0) {
        // 	// data.text = data.text.replace("。","，");
        // 	// var words:string[]=data.text.split("，");
        // 	// for (var i = 0; i < words.length; i++) {
        // 		// var pIndex: number = this.voiceStrArr.indexOf(words[i]);
        // 		// if (pIndex >= 0) {
        // 		// 	cardId = this.voiceCard[pIndex];
        // 		// 	break;
        // 		// }
        // 	// }
        if (obj.code == 0) {
            var word = obj.data.word;
            var pIndex = this.voiceStrArr.indexOf(word);
            if (pIndex >= 0) {
                cardId = Number(this.voiceCard[pIndex]);
            }
            var msg;
            console.error("cardId:" + cardId);
            if (cardId <= 5) {
                switch (cardId) {
                    case 1:
                        msg = new Cmd.WinMahjongCmd_C();
                        uniLib.NetMgr.tcpSend(msg);
                        break;
                    case 2:
                        msg = new Cmd.CancelOpMahjongCmd_C();
                        uniLib.NetMgr.tcpSend(msg);
                        break;
                    case 3:
                        {
                            var msg_1 = new Cmd.TouchCardMahjongCmd_C();
                            uniLib.NetMgr.tcpSend(msg_1);
                        }
                        break;
                    case 4:
                        {
                            if (!game.CardInfo.getInstance().drawData) {
                                var msg_2 = new Cmd.BarCardMahjongCmd_C();
                                uniLib.NetMgr.tcpSend(msg_2);
                            }
                            else {
                                if (game.RoomInfo.getInstance().host_mode || game.CardInfo.getInstance().drawData.barSet.length == 1) {
                                    var msg_3 = new Cmd.BarCardMahjongCmd_C();
                                    uniLib.NetMgr.tcpSend(msg_3);
                                }
                                else {
                                    Cmd.gameDispatch(game.MahjongFourFacadeConst.VOICE_SELECT_OPERATE, 2);
                                }
                            }
                        }
                        break;
                    case 5:
                        {
                            if (game.RoomInfo.getInstance().host_mode || game.RoomInfo.getInstance().OutCard.eatSet.length == 1) {
                                var msg_4 = new Cmd.EatCardMahjongCmd_C();
                                var outCard = game.RoomInfo.getInstance().OutCard;
                                var eatSet = (outCard && outCard.eatSet && outCard.eatSet instanceof Array) ? outCard.eatSet[0] : null;
                                if (eatSet) {
                                    msg_4.one = eatSet.one;
                                    msg_4.two = eatSet.two;
                                    msg_4.thisId = eatSet.two;
                                }
                                uniLib.NetMgr.tcpSend(msg_4);
                            }
                            else {
                                Cmd.gameDispatch(game.MahjongFourFacadeConst.VOICE_SELECT_OPERATE, 4);
                            }
                        }
                        break;
                    default:
                        break;
                }
                return;
            }
            //匹配手牌进行出牌操作
            var mythisCards = game.CardInfo.getInstance().getHandCardBySeat(0);
            console.error("mythisCards:" + JSON.stringify(mythisCards));
            var myCards = [];
            for (var i = 0; i < mythisCards.length; i++) {
                myCards.push(table.TableCard.thisIdToCardId(mythisCards[i]));
            }
            console.error("myCards:" + JSON.stringify(myCards));
            if (myCards.length > 0) {
                var pindex = myCards.indexOf(cardId);
                if (pindex >= 0) {
                    var sdmsg = new Cmd.OutCardMahjongCmd_C();
                    // sdmsg.cardId = cardId;
                    sdmsg.thisId = mythisCards[pindex];
                    console.error(JSON.stringify(sdmsg));
                    uniLib.NetMgr.tcpSend(sdmsg);
                }
                else {
                    if (game.GameData.getInstance().isCanOperate == true) {
                        // uniLib.ZQGameSdk.xfSpeechABNStart(this.onGetResult, this.onGetEnd, this);
                        uniLib.ZQGameSdk.xfSpeechStart(this.onGetResult, this.onGetEnd, this);
                    }
                }
            }
            else {
                console.error("######找不到牌######:" + cardId);
            }
        }
        else {
            console.error("语音识别错误");
            if (game.GameData.getInstance().isCanOperate == true) {
                // uniLib.ZQGameSdk.xfSpeechABNStart(this.onGetResult, this.onGetEnd, this);
                uniLib.ZQGameSdk.xfSpeechStart(this.onGetResult, this.onGetEnd, this);
            }
        }
    };
    AutoPlayMgr.prototype.onGetEnd = function (obj) {
        // console.error("语音识别结束" + game.GameData.getInstance().isMyTime);
        // if (game.GameData.getInstance().isMyTime == true) {
        // uniLib.ZQGameSdk.xfSpeechABNStart(this.onGetResult, this.onGetEnd, this);
        // uniLib.ZQGameSdk.xfSpeechStart(this.onGetResult, this.onGetEnd, this);
        // }
    };
    AutoPlayMgr.prototype.stopAutoRecord = function () {
        uniLib.ZQGameSdk.xfSpeechStop();
    };
    AutoPlayMgr.prototype.startAutoRecord = function () {
        console.error("开始语音识别");
        uniLib.ZQGameSdk.xfSpeechStart(this.onGetResult, this.onGetEnd, this);
        // uniLib.ZQGameSdk.xfSpeechABNStart(this.onGetResult, this.onGetEnd, this);
    };
    AutoPlayMgr.START_RECORD = "start_record";
    AutoPlayMgr.STOP_RECORD = "stop_record";
    return AutoPlayMgr;
}());

/**
 * 计算类
 */
var MathUtil = (function () {
    function MathUtil() {
    }
    MathUtil.pow = function (n) {
        if (n === void 0) { n = 0; }
        return n * n;
    };
    MathUtil.vectorRotation = function (p, n) {
        return new egret.Point(Math.cos(n) * Math.sqrt(p.x * p.x + p.y * p.y), Math.sin(n) * Math.sqrt(p.x * p.x + p.y * p.y));
        // return new egret.Point(p.x * Math.cos(n) - p.y * Math.sin(n), p.y * Math.cos(n) + p.x * Math.sin(n));
    };
    MathUtil.disTest = function (p1, n1, p2, n2) {
        if (n2 === void 0) { n2 = 0; }
        return MathUtil.pow(p1.x - p2.x) + MathUtil.pow(p1.y - p2.y) <= MathUtil.pow(n1 + n2);
    };
    /**
     * 两个整数间随机随机数
     * @min: 最小数
     * @max: 最大数
     */
    MathUtil.random = function (min, max) {
        return Math.round(Math.random() * (max - min) + min);
    };
    /**
         * 两个整数间随机随机数,包含min和max
         * @min: 最小数
         * @max: 最大数
         */
    MathUtil.RandomNumBoth = function (Min, Max) {
        var Range = Max - Min;
        var Rand = Math.random();
        var num = Min + Math.round(Rand * Range); //四舍五入
        return num;
    };
    /**
     * 检测一个点是否在圆内
     * centerX centerY radius 圆心以及半径
     * x y需要判断的x y 坐标
     */
    MathUtil.pointIsInRound = function (centerX, centerY, radius, x, y) {
        return MathUtil.pow(centerX - x) + MathUtil.pow(centerY - y) < MathUtil.pow(radius);
    };
    /**
     * 二分法从数组中找数据 indexOf
     */
    MathUtil.binary = function (find, arr, low, high) {
        if (low <= high) {
            if (arr[low] == find)
                return low;
            if (arr[high] == find)
                return high;
            var mid = Math.ceil((high + low) / 2);
            if (arr[mid] == find) {
                return mid;
            }
            else if (arr[mid] > find) {
                return MathUtil.binary(find, arr, low, mid - 1);
            }
            else {
                return MathUtil.binary(find, arr, mid + 1, high);
            }
        }
        return -1;
    };
    /**
         * 获取字符串实际长度
         */
    MathUtil.getStrRealLength = function (str) {
        var jmz = { GetLength: null };
        jmz.GetLength = function (str) {
            return Number(str.replace(/[\u0391-\uFFE5]/g, "aa").length); //先把中文替换成两个字节的英文，在计算长度
        };
        return jmz.GetLength(str);
    };
    return MathUtil;
}());

var game;
(function (game) {
    var PopupManager = (function () {
        function PopupManager() {
        }
        /**
         * 显示弹出框
         * @param	target:显示对象
         * @param	modal:是否添加遮罩
         * @param	center:是否居中显示
         * @param	useEffect:是否缓动
         * @param	isTop:是否在最上层
         */
        PopupManager.addPopUp = function (target, modal, center, useEffect, w, h, isTop) {
            if (modal === void 0) { modal = false; }
            if (center === void 0) { center = false; }
            if (useEffect === void 0) { useEffect = true; }
            if (w === void 0) { w = 0; }
            if (h === void 0) { h = 0; }
            if (isTop === void 0) { isTop = false; }
            if (this._popUpMask == null) {
                this._popUpMask = new egret.Sprite();
                this._popUpMask.graphics.beginFill(0, 0.3);
                if (game.GameInfo.isAllSceneApa()) {
                    this._popUpMask.graphics.drawRect((uniLib.Global.designWidth - uniLib.Global.screenWidth) / 2, 0, uniLib.Global.screenWidth, uniLib.Global.screenHeight); //* uniLib.ScreenUtils.scaleFactor);
                }
                else {
                    this._popUpMask.graphics.drawRect(0, 0, uniLib.Global.screenWidth, uniLib.Global.screenHeight); //* uniLib.ScreenUtils.scaleFactor);
                }
                this._popUpMask.graphics.endFill();
                this._popUpMask.touchEnabled = true;
            }
            if (modal) {
                this._popUpMask.visible = true;
            }
            else {
                this._popUpMask.visible = false;
            }
            if (!isTop) {
                if (game.GameInfo.topLayer) {
                    game.GameInfo.topLayer.addChild(this._popUpMask);
                    game.GameInfo.topLayer.addChild(target);
                }
            }
            else {
                if (game.GameInfo.topLayer) {
                    game.GameInfo.main.addChild(this._popUpMask);
                    game.GameInfo.main.addChild(target);
                }
            }
            var targetX;
            var targetY;
            if (center) {
                if (w) {
                    targetX = game.DataCache.defaultWidth - w >> 1;
                }
                else {
                    targetX = game.DataCache.defaultWidth - target.width >> 1;
                }
                if (h) {
                    targetY = game.DataCache.defaultHeight * uniLib.ScreenUtils.scaleFactor - h >> 1;
                }
                else {
                    targetY = game.DataCache.defaultHeight * uniLib.ScreenUtils.scaleFactor - target.height >> 1;
                }
            }
            else {
                targetX = target.x;
                targetY = target.y;
            }
            if (useEffect) {
                target.y = target.y - 200;
                target.x = targetX;
                target.alpha = 0;
                egret.Tween.removeTweens(target);
                egret.Tween.get(target).to({ x: targetX, y: targetY, alpha: 1 });
            }
            else {
                target.x = targetX;
                target.y = targetY;
            }
        };
        /**
         * 移除弹出框
         * @param	target:显示对象
         * @param	useEffect:是否缓动
         */
        PopupManager.removePopUp = function (target, useEffect) {
            if (useEffect === void 0) { useEffect = false; }
            if (this._popUpMask != null)
                this._popUpMask.visible = false;
            if (!useEffect) {
                if (target.parent)
                    target.parent.removeChild(target);
            }
            else {
                egret.Tween.removeTweens(target);
                egret.Tween.get(target).to({ y: target.y - 200, alpha: 0 }).call(this.removeTarget, this, [target]);
            }
        };
        PopupManager.removeTarget = function (target) {
            target.alpha = 1.0;
            egret.Tween.removeTweens(target);
            if (target.parent) {
                target.parent.removeChild(target);
            }
        };
        return PopupManager;
    }());
    game.PopupManager = PopupManager;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var PublicManage = (function () {
        function PublicManage() {
            this.showList = [];
        }
        PublicManage.getInstance = function () {
            if (!PublicManage.instance) {
                PublicManage.instance = new PublicManage();
            }
            return PublicManage.instance;
        };
        /**
         * 轻提示
         */
        PublicManage.prototype.showMildWarnShow = function (msg) {
            game.ResUtil.trace("轻度提示：" + msg);
            if (!msg) {
                return;
            }
            var alert = new game.MildAlertVC();
            alert.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.removeStage, this);
            alert.setText(msg);
            if (game.GameInfo.isAllSceneApa()) {
                alert.x = (uniLib.Global.designWidth - alert.width) / 2;
            }
            else {
                alert.x = (uniLib.Global.screenWidth - alert.width) / 2;
            }
            this.getContainer().addChild(alert);
            if (this.showList.length > 0) {
                for (var index = 0; index < this.showList.length; index++) {
                    this.showList[index].y -= alert.height;
                }
            }
            this.showList.push(alert);
        };
        PublicManage.prototype.getContainer = function () {
            if (game.GameInfo.topLayer) {
                return game.GameInfo.topLayer;
            }
            if (uniLib.SceneMgr.instance.currentScene.topLayer) {
                return uniLib.SceneMgr.instance.currentScene.topLayer;
            }
            return uniLib.SceneMgr.instance.currentScene;
        };
        PublicManage.prototype.removeStage = function (evt) {
            var alert = evt.currentTarget;
            alert.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.removeStage, this);
            this.showList.splice(this.showList.indexOf(alert), 1);
            alert.destory();
            alert = null;
        };
        PublicManage.prototype.showConfirmPanel = function (msg, btnlables, backFn, title, backObj, countdown, needClose) {
            if (backFn === void 0) { backFn = null; }
            if (title === void 0) { title = null; }
            if (countdown === void 0) { countdown = 0; }
            if (needClose === void 0) { needClose = true; }
            var _msgTips = new game.MsgBox(needClose);
            if (!title) {
                title = "";
            }
            _msgTips.setData(title, msg, btnlables, backFn, backObj, countdown);
            if (game.GameInfo.isAllSceneApa()) {
                _msgTips.x = Math.round((uniLib.Global.designWidth - _msgTips.width) / 2);
                _msgTips.y = Math.round((uniLib.Global.designHeight * uniLib.ScreenUtils.scaleFactor - _msgTips.height) / 2);
            }
            else {
                _msgTips.x = Math.round((uniLib.Global.screenWidth - _msgTips.width) / 2);
                _msgTips.y = Math.round((uniLib.Global.screenHeight * uniLib.ScreenUtils.scaleFactor - _msgTips.height) / 2);
            }
            // GameInfo.topLayer.addChild(_msgTips);
            game.PopupManager.addPopUp(_msgTips, true);
        };
        PublicManage.prototype.showMask = function () {
            if (!this.maskMc) {
                this.maskMc = new egret.Sprite();
                this.maskMc.graphics.beginFill(0x000000, 0.5);
                this.maskMc.graphics.drawRect(0, 0, game.DataCache.defaultWidth, game.DataCache.defaultHeight); //* uniLib.ScreenUtils.scaleFactor);
                this.maskMc.graphics.endFill();
            }
            game.GameInfo.topLayer.addChild(this.maskMc);
        };
        PublicManage.prototype.hideMask = function () {
            if (this.maskMc) {
                game.GameInfo.topLayer.removeChild(this.maskMc);
            }
        };
        PublicManage.prototype.showMarket = function () {
        };
        PublicManage.prototype.backHall = function () {
        };
        /**
        *录像面板专用
         */
        PublicManage.prototype.showVideoCommonPanel = function (msg, btnlables, backFn, title, backObj, countdown, needClose) {
            if (backFn === void 0) { backFn = null; }
            if (title === void 0) { title = null; }
            if (countdown === void 0) { countdown = 0; }
            if (needClose === void 0) { needClose = true; }
            var msgTip = new game.MsgBox(true);
            msgTip.setData(title, msg, btnlables, backFn, backObj, countdown);
            if (game.GameInfo.isAllSceneApa()) {
                msgTip.x = Math.round((uniLib.Global.designWidth - msgTip.width) / 2);
                msgTip.y = Math.round((uniLib.Global.designHeight * uniLib.ScreenUtils.scaleFactor - msgTip.height) / 2);
            }
            else {
                msgTip.x = Math.round((game.DataCache.defaultWidth - msgTip.width) / 2);
                msgTip.y = Math.round((game.DataCache.defaultHeight * uniLib.ScreenUtils.scaleFactor - msgTip.height) / 2);
            }
            game.PopupManager.addPopUp(msgTip, true, false, true, 0, 0, true);
        };
        return PublicManage;
    }());
    game.PublicManage = PublicManage;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var ResUtil = (function () {
        function ResUtil() {
        }
        /**
         * 获取url参数
         */
        ResUtil.getURLData = function () {
            if (!this.initParams) {
                this.initParams = {};
                var str = window.location.search;
                if (str == "") {
                    return;
                }
                if (str.charAt(0) == "?") {
                    str = str.slice(1);
                    ResUtil.trace("getURLData" + str);
                    var arr = str.split(/&/);
                    var paramArr;
                    for (var i = 0; i < arr.length; i++) {
                        paramArr = arr[i].split(/=/);
                        if (paramArr.length == 2) {
                            this.initParams[paramArr[0]] = paramArr[1];
                            ResUtil.trace("getURLData1" + paramArr[0], paramArr[1]);
                        }
                    }
                }
            }
            return this.initParams;
        };
        /**
         * 根据name关键字创建一个Bitmap对象。name属性请参考resources/resource.json配置文件的内容。
         * Create a Bitmap object according to name keyword.As for the property of name please refer to the configuration file of resources/resource.json.
         */
        ResUtil.createBitmapByName = function (name, x, y, scale) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (scale === void 0) { scale = 1; }
            var result = new egret.Bitmap();
            var texture = RES.getRes(name);
            result.texture = texture;
            result.smoothing = true;
            result.x = x;
            result.y = y;
            result.scaleX = result.scaleY = scale;
            return result;
        };
        ResUtil.createTexture = function (name) {
            var texture = RES.getRes(name);
            return texture;
        };
        ResUtil.trace = function () {
            var str = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                str[_i - 0] = arguments[_i];
            }
            uniLib.Console.log(str.join(","));
        };
        ResUtil.randRange = function (min, max) {
            var num = max - min;
            var randomNum = Math.floor(Math.random() * num);
            return min + randomNum;
        };
        /**
         * 格式化货币
         * @param currency 货币
         * @param num
         * @return String
         **/
        ResUtil.currencyFormat = function (num, len) {
            if (len === void 0) { len = -1; }
            var str = Math.abs(num).toString();
            var sign = "";
            if (num < 0) {
                sign = "-";
            }
            var small = "";
            if (str.indexOf(".") > -1) {
                small = str.substring(str.indexOf("."), str.length);
                str = str.substring(0, str.indexOf("."));
            }
            if (len != -1) {
                while (str.length < len) {
                    str = "0" + str;
                }
            }
            var ary = str.split("");
            var leng = ary.length;
            var index = 1;
            for (var i = leng - 1; i > 0; i--, index++) {
                if ((index / 3) == 1) {
                    index = 0;
                    ary[i] = "," + ary[i];
                }
            }
            return sign + ary.join("") + small;
        };
        ResUtil.backToNumber = function (numStr) {
            var num;
            //            numStr=numStr.replace(SystemConsts.CURRENCY,"");
            var pattern = /,/g;
            numStr = numStr.replace(pattern, "");
            return Math.round(Number(numStr));
        };
        //字符串长度
        ResUtil.getCharLength = function (txt) {
            var byte = new egret.ByteArray();
            byte.writeUTF(txt);
            byte.position = 0;
            return byte.bytesAvailable;
        };
        /**
          通过json png
          创建MovieClip
        */
        ResUtil.createMovieClip = function (name, jsons, png) {
            var mc;
            var data = RES.getRes(jsons);
            var txtr = RES.getRes(png);
            var mcFactory = new egret.MovieClipDataFactory(data, txtr);
            mc = new egret.MovieClip(mcFactory.generateMovieClipData(name));
            mc.gotoAndStop(1);
            mc.name = name;
            return mc;
        };
        ResUtil.createTextFeild = function (color, align, text, size, x, y, width, isBold, space) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = -1; }
            if (isBold === void 0) { isBold = false; }
            if (space === void 0) { space = 0; }
            var tf = new egret.TextField();
            if (width != -1) {
                tf.width = width;
            }
            tf.fontFamily = "微软雅黑";
            tf.bold = isBold;
            tf.textColor = color;
            tf.textAlign = align;
            tf.text = text;
            tf.size = size;
            tf.lineSpacing = space;
            tf.x = x;
            tf.y = y;
            tf.multiline = false;
            return tf;
        };
        ResUtil.createFontText = function (text, x, y, width, font) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = -1; }
            if (!font) {
                font = RES.getRes("betTipText_fnt");
            }
            var tf = new egret.BitmapText();
            if (width != -1) {
                tf.width = width;
            }
            tf.font = font;
            tf.text = text;
            tf.x = x;
            tf.y = y;
            return tf;
        };
        ResUtil.createScroll = function (content, w, h, x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            var scrollView = new egret.ScrollView();
            scrollView.width = w;
            scrollView.height = h;
            scrollView.x = x;
            scrollView.y = y;
            scrollView.setContent(content);
            return scrollView;
        };
        /**
    * 从父级中移除显示对象（如显示对象为影片剪辑则停止）
    * @param dis
    *
    */
        ResUtil.removeFromParent = function (dis) {
            if (dis && dis.parent) {
                dis.parent.removeChild(dis);
            }
        };
        /**
        * 移除显示容器中的所有子集但不包括自己
        * @paramisContainer
        */
        ResUtil.removeAllChildren = function (disContainer) {
            while (disContainer.numChildren > 0) {
                this.removeFromParent(disContainer.getChildAt(0));
            }
        };
        ResUtil.getTimeStr2 = function () {
            var date = new Date();
            var str = date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + " >>> ";
            return str;
        };
        ResUtil.numFormat = function (num, decimal) {
            if (decimal === void 0) { decimal = 0; }
            var str;
            var tempStr = "";
            var sign = "";
            if (num < 0) {
                num = -num;
                sign = "-";
            }
            var numArr;
            var uArr;
            numArr = [1000000000, 1000000, 1000];
            uArr = ["B", "M", "K"];
            str = String(num);
            for (var j = 0; j < numArr.length; j++) {
                if (num >= numArr[j]) {
                    tempStr = uArr[j];
                    if (decimal == -1) {
                        str = String(num / numArr[j]);
                    }
                    else {
                        str = String(this.setDot(num / numArr[j], decimal));
                    }
                    break;
                }
            }
            if (str.indexOf(".") != -1) {
                //如果小数点为0直接去掉
                for (var i = 0; i < decimal; i++) {
                    if (Number(str.charAt(str.length - 1)) == 0) {
                        if (i + 1 == decimal)
                            str = str.slice(0, str.length - 2);
                        else
                            str = str.slice(0, str.length - 1);
                    }
                }
                if (str.charAt(str.length - 1) == ".")
                    str = str.slice(0, str.length - 1);
            }
            return sign + str.concat(tempStr);
        };
        ResUtil.setDot = function (num, decimal) {
            if (decimal === void 0) { decimal = -1; }
            if (decimal > 0) {
                return Math.floor(num * Math.pow(10, decimal)) / Math.pow(10, decimal);
            }
            else if (decimal == 0) {
                return Math.floor(num);
            }
            return num;
        };
        /**
         * 改变Y轴变换之前是640
         */
        ResUtil.changeYAxis = function (num) {
            return uniLib.Global.screenHeight - (640 - num);
        };
        return ResUtil;
    }());
    game.ResUtil = ResUtil;
})(game || (game = {}));

var game;
(function (game) {
    /**
     *
     * @author
     *
     */
    var SoundManager = (function () {
        function SoundManager() {
            this._soundRes = {};
            this._curSounds = [];
        }
        Object.defineProperty(SoundManager, "instance", {
            get: function () {
                if (!this._instance) {
                    this._instance = new SoundManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        SoundManager.prototype.playSound = function (soundType) {
            var sound;
            if (this._soundRes[soundType]) {
                sound = this._soundRes[soundType];
                this.play(sound);
            }
            else {
                var loader = new game.SoundLoader(soundType);
                loader.addEventListener(game.SoundLoader.LOADED, this.onSoundLoaded, this);
            }
        };
        SoundManager.prototype.stopSound = function () {
            var len = this._curSounds.length;
            var channel;
            for (var i = 0; i < len; i++) {
                channel = this._curSounds[0];
                channel.stop();
                channel.removeEventListener(egret.Event.SOUND_COMPLETE, this.onSoundComplete, this);
                this._curSounds.splice(0, 1);
            }
        };
        SoundManager.prototype.play = function (sound) {
            var channel = sound.play(0, 1);
            channel.addEventListener(egret.Event.SOUND_COMPLETE, this.onSoundComplete, this);
            this._curSounds.push(channel);
        };
        SoundManager.prototype.startPlay = function (evt) {
            var sound = evt.data;
            var channel = sound.play(0, 1);
            channel.addEventListener(egret.Event.SOUND_COMPLETE, this.onSoundComplete, this);
            this._curSounds.push(channel);
        };
        SoundManager.prototype.onSoundComplete = function (evt) {
            var channel = evt.currentTarget;
            channel.stop();
            channel.removeEventListener(egret.Event.SOUND_COMPLETE, this.onSoundComplete, this);
            var index = this._curSounds.indexOf(channel);
            this._curSounds.splice(index, 1);
        };
        SoundManager.prototype.onSoundLoaded = function (evt) {
            evt.currentTarget.removeEventListener(game.SoundLoader.LOADED, this.onSoundLoaded, this);
            var sound = evt.data.data;
            this._soundRes[evt.data.type] = sound;
            this.play(sound);
        };
        return SoundManager;
    }());
    game.SoundManager = SoundManager;
})(game || (game = {}));

// 对自动生成的表格代码的扩展
/**
 * 表格加载后立刻从引擎资源缓存中删除，避免占内存
 */
function loadTable(key) {
    var res = RES.getRes(key);
    // RES.destroyRes(key);
    return res;
}
table.TableCard.instance = function () {
    if (table.TableCard.$instance == null) {
        table.TableCard.$instance = loadTable("TableCard_json");
    }
    return table.TableCard.$instance;
};
table.TableCard.selectByCardId = function (cardId) {
    // console.error(table);
    for (var _i = 0, _a = table.TableCard.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.cardId == cardId) {
            return item;
        }
    }
};
table.TableCard.selectByThisId = function (thisid) {
    for (var _i = 0, _a = table.TableCard.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.thisId == thisid) {
            return item;
        }
    }
};
table.TableCard.thisIdToCardId = function (thisid) {
    return Math.floor(thisid * 0.1);
};
table.TableCard.cardIdToType = function (cardId) {
    return Math.floor(cardId * 0.1);
};
table.TableCard.thisIdToType = function (thisid) {
    return Math.floor(thisid * 0.01);
};
table.TableCard.thisIdToIcon = function (thisid) {
    var item = table.TableCard.selectByThisId(thisid);
    if (item && item.icon) {
        return item.icon;
    }
    return 0;
};
table.TableCard.resNormal = function (cardId) {
    var str;
    var icon = table.TableCard.thisIdToIcon(cardId);
    if (icon != 0) {
        str = icon.toString();
    }
    else {
        str = cardId.toString();
    }
    var name = "Card_1_" + str.charAt(0) + "_" + str.charAt(1);
    return name;
};
table.TableCard.resPutOut = function (cardId, seatId) {
    var str;
    var icon = table.TableCard.thisIdToIcon(cardId);
    if (icon != 0) {
        str = icon.toString();
    }
    else {
        str = cardId.toString();
    }
    return "PutOutCard" + seatId + "_" + str.charAt(0) + "_" + str.charAt(1);
};
table.TableCard.resWin = function (cardId) {
    var str;
    var icon = table.TableCard.thisIdToIcon(cardId);
    if (icon != 0) {
        str = icon.toString();
    }
    else {
        str = cardId.toString();
    }
    return "WinCard0_" + str.charAt(0) + "_" + str.charAt(1);
};
table.TableCard.resOpen = function (cardId) {
    var str;
    var icon = table.TableCard.thisIdToIcon(cardId);
    if (icon != 0) {
        str = icon.toString();
    }
    else {
        str = cardId.toString();
    }
    return "OpenCard0_" + str.charAt(0) + "_" + str.charAt(1);
};
table.TableCard.resSound = function (thisId, female) {
    var icon = table.TableCard.thisIdToIcon(thisId);
    if (icon == 0) {
        //如果icon为0 取cardId
        icon = table.TableCard.thisIdToCardId(thisId);
    }
    var sound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_mp3";
    //这里兼容多个音效随机循环 但是格式要求为 voice_game.RoomInfo.getInstance().languageMode_female_icon_roundNum_mp3d;
    var roundNum = (Math.floor(Math.random() * 10) % game.RoomInfo.getInstance().soundRandomNum); //随机数
    //为了防止没有设置random出来的数字没有音效资源  这里先定一个默认的
    var defaultRandomSound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_0_mp3";
    //随机出来的音效 为了防止没有 需要判空
    var randomSound = "voice_" + game.RoomInfo.getInstance().languageMode + "_" + female + "_" + icon + "_" + roundNum + "_mp3";
    if (RES.hasRes(randomSound)) {
        return randomSound;
    }
    else if (RES.hasRes(defaultRandomSound)) {
        return defaultRandomSound;
    }
    else if (RES.hasRes(sound)) {
        return sound;
    }
    return "";
};
table.TableCard.resSoundAction = function (type, female) {
    var sound = "action_" + game.RoomInfo.getInstance().languageMode + "_" + female.toString() + type.toString() + "_mp3";
    //这里兼容多个音效随机循环 但是格式要求为 voice_game.RoomInfo.getInstance().languageMode_female_icon_roundNum_mp3d;
    var roundNum = (Math.floor(Math.random() * 10) % game.RoomInfo.getInstance().soundRandomNum); //随机数
    //为了防止没有设置random出来的数字没有音效资源  这里先定一个默认的
    var defaultRandomSound = "action_" + game.RoomInfo.getInstance().languageMode + "_" + female.toString() + type.toString() + "_0_mp3";
    //随机出来的音效 为了防止没有 需要判空
    var randomSound = "action_" + game.RoomInfo.getInstance().languageMode + "_" + female.toString() + type.toString() + "_" + roundNum + "_mp3";
    if (RES.hasRes(randomSound)) {
        return randomSound;
    }
    else if (RES.hasRes(defaultRandomSound)) {
        return defaultRandomSound;
    }
    else if (RES.hasRes(sound)) {
        return sound;
    }
    return "";
};
table.TableCard.resSoundGift = function (giftId) {
    var sound = "GiftSound" + giftId + "_mp3";
    if (RES.hasRes(sound)) {
        return sound;
    }
    return "";
};
table.TableCard.res2D5CardName = function (cardId) {
    var str;
    var icon = table.TableCard.thisIdToIcon(cardId);
    if (icon != 0) {
        str = icon.toString();
    }
    else {
        str = cardId.toString();
    }
    var name = "D25_" + str.charAt(0) + "_" + str.charAt(1);
    return name;
};
table.TableGift.instance = function () {
    if (table.TableGift.$instance == null) {
        table.TableGift.$instance = loadTable("TableGift_json");
    }
    return table.TableGift.$instance;
};
table.TableServerReturnCode.instance = function () {
    if (table.TableServerReturnCode.$instance == null) {
        table.TableServerReturnCode.$instance = loadTable("TableServerReturnCode_json");
    }
    return table.TableServerReturnCode.$instance;
};
table.TableVoice.instance = function () {
    if (table.TableVoice.$instance == null) {
        table.TableVoice.$instance = loadTable("TableVoice_json");
    }
    return table.TableVoice.$instance;
};
table.TableVoice.select = function (text) {
    for (var _i = 0, _a = table.TableVoice.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.text == text) {
            return item.cardId;
        }
    }
    return 0;
};
table.TableMahjongMulti.instance = function () {
    if (table.TableMahjongMulti.$instance == null) {
        table.TableMahjongMulti.$instance = loadTable("TableMahjongMulti_json");
    }
    return table.TableMahjongMulti.$instance;
};
table.TableMahjongMulti.selectNameById = function (num) {
    for (var _i = 0, _a = table.TableMahjongMulti.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.gameId != game.RoomInfo.getInstance().gameId) {
            continue;
        }
        if (item.id == num) {
            return item.name;
        }
    }
    return "";
};
table.TableMahjongMulti.selectTypeById = function (num) {
    for (var _i = 0, _a = table.TableMahjongMulti.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.id == num) {
            return item.type;
        }
    }
    return "+";
};
table.TableMahjongMulti.selectBaohuById = function (num) {
    for (var _i = 0, _a = table.TableMahjongMulti.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.gameId != game.RoomInfo.getInstance().gameId) {
            continue;
        }
        if (item.id == num) {
            return item.baohu;
        }
    }
    return 0;
};
table.TableMahjongMulti.selectCartoonById = function (num) {
    for (var _i = 0, _a = table.TableMahjongMulti.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.gameId != game.RoomInfo.getInstance().gameId) {
            continue;
        }
        if (item.id == num) {
            return item.cartoon;
        }
    }
    return "";
};
table.TableMahjongMulti.selectItemById = function (num) {
    for (var _i = 0, _a = table.TableMahjongMulti.instance(); _i < _a.length; _i++) {
        var item = _a[_i];
        if (item.id == num && item.gameId == uniLib.Global.gameId) {
            return item;
        }
    }
    return null;
};
table.TablePlayTypeList.instance = function () {
    if (table.TablePlayTypeList.$instance == null) {
        table.TablePlayTypeList.$instance = loadTable("TablePlayTypeList_json");
    }
    return table.TablePlayTypeList.$instance;
};
table.TablePlayTypeList.getPlayTypeDes = function (id) {
    try {
        for (var _i = 0, _a = table.TablePlayTypeList.instance(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id == id) {
                return item.desc;
            }
        }
        return "";
    }
    catch (e) {
        console.error("这是单独运行游戏时候TablePlayTypeList_json报错");
    }
};
table.TablePlayTypeList.getConfig = function (id) {
    var instance = table.TablePlayTypeList.instance();
    for (var _i = 0, instance_1 = instance; _i < instance_1.length; _i++) {
        var item = instance_1[_i];
        if (item.id == id)
            return item;
    }
    return;
};
